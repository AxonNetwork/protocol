// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nodeeth

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProtocolABI is the input ABI used to generate the binding from.
const ProtocolABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getAddressForUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"},{\"name\":\"oldCommitHash\",\"type\":\"bytes20\"},{\"name\":\"newCommitHash\",\"type\":\"bytes20\"}],\"name\":\"updateRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"whichUsers\",\"type\":\"uint8\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getRepoUsers\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressHasPushAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usernamesByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"setPublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressHasPullAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"createRepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"repoExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"isRepoPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getRefs\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userHasPushAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addressesByUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getUserPermissions\",\"outputs\":[{\"name\":\"puller\",\"type\":\"bool\"},{\"name\":\"pusher\",\"type\":\"bool\"},{\"name\":\"admin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"puller\",\"type\":\"bool\"},{\"name\":\"pusher\",\"type\":\"bool\"},{\"name\":\"admin\",\"type\":\"bool\"}],\"name\":\"setUserPermissions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"deleteRepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"deleteRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userHasPullAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"numRefs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"getRef\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes20\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"LogSetUsername\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"LogCreateRepo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"LogDeleteRepo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"LogSetPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"refName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"commitHash\",\"type\":\"bytes20\"}],\"name\":\"LogUpdateRef\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"LogDeleteRef\",\"type\":\"event\"}]"

// ProtocolBin is the compiled bytecode used for deploying new contracts.
const ProtocolBin = `$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948a9392606490910190602085019080838360005b838110156117e45781810151838201526020016117cc565b50505050905090810190601f1680156118115780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561182f57600080fd5b505af4158015611843573d6000803e3d6000fd5b505050506040513d602081101561185957600080fd5b5082905060048201600061186c87614257565b815260200190815260200160002060006101000a815481600160a060020a0302191690836c0100000000000000000000000090040217905550836040518082805190602001908083835b602083106118d55780518252601f1990920191602091820191016118b6565b51815160209384036101000a60001901801990921691161790526040519190930181900381208a519095508a945090928392508401908083835b6020831061192e5780518252601f19909201916020918201910161190f565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206bffffffffffffffffffffffff198a16835293519395503394507f53cefa826f4c8a285b2b5d751be6efe1a535e332d21fc085341fb21162ace30b9391829003019150a45050505050565b600060606000600260006119b389614257565b81526020810191909152604001600020805490915060ff161515611a0f576040805160e560020a62461bcd02815260206004820152601360248201526000805160206145bb833981519152604482015290519081900360640190fd5b600581016000876002811115611a2157fe5b1415611a31575060058101611a69565b6001876002811115611a3f57fe5b1415611a4f5750600b8101611a69565b6002876002811115611a5d57fe5b1415611a695750600881015b60606000868802815b8981108015611b0157508473__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015611ad057600080fd5b505af4158015611ae4573d6000803e3d6000fd5b505050506040513d6020811015611afa57600080fd5b5051818301105b15611bff576040805160e160020a6314dcbd5b028152600481018790528284016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b158015611b6357600080fd5b505af4158015611b77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611ba057600080fd5b810190808051640100000000811115611bb857600080fd5b82016020810184811115611bcb57600080fd5b8151640100000000811182820187101715611be557600080fd5b505080519097509590950160200194505050600101611a72565b50816040519080825280601f01601f191660200182016040528015611c2b576020820181803883390190505b5095506000805b8a81108015611cc157508573__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015611c9057600080fd5b505af4158015611ca4573d6000803e3d6000fd5b505050506040513d6020811015611cba57600080fd5b5051818401105b15611ddb576040805160e160020a6314dcbd5b028152600481018890528285016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b158015611d2357600080fd5b505af4158015611d37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611d6057600080fd5b810190808051640100000000811115611d7857600080fd5b82016020810184811115611d8b57600080fd5b8151640100000000811182820187101715611da557600080fd5b50509291905050509450611dbb855189846142ce565b602082019150611dcc85898461433d565b84519190910190600101611c32565b508473__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015611e3057600080fd5b505af4158015611e44573d6000803e3d6000fd5b505050506040513d6020811015611e5a57600080fd5b5051975050505050505094509492505050565b600160a060020a03821660009081526020818152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611f1493830182828015611f095780601f10611ede57610100808354040283529160200191611f09565b820191906000526020600020905b815481529060010190602001808311611eec57829003601f168201915b505050505083612d23565b90505b92915050565b600060208181529181526040908190208054825160026001831615610100026000190190921691909104601f810185900485028201850190935282815292909190830182828015611faf5780601f10611f8457610100808354040283529160200191611faf565b820191906000526020600020905b815481529060010190602001808311611f9257829003601f168201915b505050505081565b611fc133836126d9565b15156120015760405160e560020a62461bcd0281526004018080602001828103825260218152602001806145db6021913960400191505060405180910390fd5b60006002600061201085614257565b81526020810191909152604001600020805490915060ff16151561207e576040805160e560020a62461bcd02815260206004820152601860248201527f74686973207265706f20646f6573206e6f742065786973740000000000000000604482015290519081900360640190fd5b600e8101805460ff191683151590811790915560408051602080820193909352818152855191810191909152845133927fafd3374d7b80a84573da7094729fa7e4a8a87165437b49e55a448db5b9df704c92879287928291606083019186019080838360005b838110156120fc5781810151838201526020016120e4565b50505050905090810190601f1680156121295780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2505050565b600160a060020a03821660009081526020818152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611f14938301828280156121d85780601f106121ad576101008083540402835291602001916121d8565b820191906000526020600020905b8154815290600101906020018083116121bb57829003601f168201915b505050505083613fd0565b80516000106122265760405160e560020a62461bcd0281526004018080602001828103825260218152602001806145766021913960400191505060405180910390fd5b336000908152602081815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156122ba5780601f1061228f576101008083540402835291602001916122ba565b820191906000526020600020905b81548152906001019060200180831161229d57829003601f168201915b505050505090506000815111151561231c576040805160e560020a62461bcd02815260206004820152601f60248201527f796f752068617665206e6f7420636c61696d6564206120757365726e616d6500604482015290519081900360640190fd5b60006002600061232b85614257565b81526020810191909152604001600020805490915060ff16156123825760405160e560020a62461bcd0281526004018080602001828103825260248152602001806145976024913960400191505060405180910390fd5b805460ff191660011781556040805160e060020a63524e643b02815260088301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b94889392606490910190602085019080838360005b838110156124015781810151838201526020016123e9565b50505050905090810190601f16801561242e5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561244c57600080fd5b505af4158015612460573d6000803e3d6000fd5b505050506040513d602081101561247657600080fd5b50506040805160e060020a63524e643b02815260058301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b94889392606490910190602085019080838360005b838110156124ec5781810151838201526020016124d4565b50505050905090810190601f1680156125195780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561253757600080fd5b505af415801561254b573d6000803e3d6000fd5b505050506040513d602081101561256157600080fd5b50506040805160e060020a63524e643b028152600b8301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b94889392606490910190602085019080838360005b838110156125d75781810151838201526020016125bf565b50505050905090810190601f1680156126045780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561262257600080fd5b505af4158015612636573d6000803e3d6000fd5b505050506040513d602081101561264c57600080fd5b50506040518351849190819060208401908083835b602083106126805780518252601f199092019160209182019101612661565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae85299160009150a3505050565b600160a060020a03821660009081526020818152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611f14938301828280156127755780601f1061274a57610100808354040283529160200191612775565b820191906000526020600020905b81548152906001019060200180831161275857829003601f168201915b505050505083613d4a565b60006002600061278f84614257565b815260208101919091526040016000205460ff1692915050565b6000600260006127b884614257565b81526020810191909152604001600020600e015460ff1692915050565b600060606000600260006127e888614257565b81526020810191909152604001600020805490915060ff161515612844576040805160e560020a62461bcd02815260206004820152601360248201526000805160206145bb833981519152604482015290519081900360640190fd5b6060600080868802815b89811080156128f65750604080517f24861346000000000000000000000000000000000000000000000000000000008152600188016004820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916324861346916024808301926020929190829003018186803b1580156128c557600080fd5b505af41580156128d9573d6000803e3d6000fd5b505050506040513d60208110156128ef57600080fd5b5051818301105b15612a2b576040805160e160020a6314dcbd5b0281526001880160048201528284016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b15801561295a57600080fd5b505af415801561296e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561299757600080fd5b8101908080516401000000008111156129af57600080fd5b820160208101848111156129c257600080fd5b81516401000000008111828201871017156129dc57600080fd5b505092919050505094508560040160006129f587614257565b815260208101919091526040016000205485516c010000000000000000000000009091029450929092016054019160010161284e565b50816040519080825280601f01601f191660200182016040528015612a57576020820181803883390190505b5095506000805b8a81108015612b065750604080517f24861346000000000000000000000000000000000000000000000000000000008152600189016004820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916324861346916024808301926020929190829003018186803b158015612ad557600080fd5b505af4158015612ae9573d6000803e3d6000fd5b505050506040513d6020811015612aff57600080fd5b5051818401105b15612c79576040805160e160020a6314dcbd5b0281526001890160048201528285016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b158015612b6a57600080fd5b505af4158015612b7e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612ba757600080fd5b810190808051640100000000811115612bbf57600080fd5b82016020810184811115612bd257600080fd5b8151640100000000811182820187101715612bec57600080fd5b50509291905050509550866004016000612c0588614257565b815260208101919091526040016000205486516c010000000000000000000000009091029550612c369089846142ce565b602082019150612c4786898461433d565b855182019150612c59601489846142ce565b602082019150612c6a8589846143b8565b60149190910190600101612a5e565b50604080517f24861346000000000000000000000000000000000000000000000000000000008152600188016004820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916324861346916024808301926020929190829003018186803b158015612ce757600080fd5b505af4158015612cfb573d6000803e3d6000fd5b505050506040513d6020811015612d1157600080fd5b50519750505050505050935093915050565b600060026000612d3284614257565b815260200190815260200160002060080173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__63411565559091856040518363ffffffff1660e060020a0281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612db5578181015183820152602001612d9d565b50505050905090810190601f168015612de25780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612e0057600080fd5b505af4158015612e14573d6000803e3d6000fd5b505050506040513d6020811015612e2a57600080fd5b50519392505050565b600160205260009081526040902054600160a060020a031681565b60008060008060026000612e6188614257565b81526020810191909152604001600020805490915060ff161515612ebd576040805160e560020a62461bcd02815260206004820152601360248201526000805160206145bb833981519152604482015290519081900360640190fd5b604080517f41156555000000000000000000000000000000000000000000000000000000008152600b8301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__946341156555948b9392606490910190602085019080838360005b83811015612f47578181015183820152602001612f2f565b50505050905090810190601f168015612f745780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612f9257600080fd5b505af4158015612fa6573d6000803e3d6000fd5b505050506040513d6020811015612fbc57600080fd5b5051604080517f4115655500000000000000000000000000000000000000000000000000000000815260088401600482018181526024830193845289516044840152895173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__946341156555948c9392606490910190602085019080838360005b83811015613048578181015183820152602001613030565b50505050905090810190601f1680156130755780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561309357600080fd5b505af41580156130a7573d6000803e3d6000fd5b505050506040513d60208110156130bd57600080fd5b5051604080517f411565550000000000000000000000000000000000000000000000000000000081526005850160048201818152602483019384528a5160448401528a5173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__946341156555948d9392606490910190602085019080838360005b83811015613149578181015183820152602001613131565b50505050905090810190601f1680156131765780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561319457600080fd5b505af41580156131a8573d6000803e3d6000fd5b505050506040513d60208110156131be57600080fd5b505191955093509150509250925092565b6131d933866126d9565b151561322f576040805160e560020a62461bcd02815260206004820152601460248201527f796f7520617265206e6f7420616e2061646d696e000000000000000000000000604482015290519081900360640190fd5b60006002600061323e88614257565b81526020810191909152604001600020805490915060ff16151561329a576040805160e560020a62461bcd02815260206004820152601360248201526000805160206145bb833981519152604482015290519081900360640190fd5b8315613391576040805160e060020a63524e643b028152600b8301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948b9392606490910190602085019080838360005b838110156133145781810151838201526020016132fc565b50505050905090810190601f1680156133415780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561335f57600080fd5b505af4158015613373573d6000803e3d6000fd5b505050506040513d602081101561338957600080fd5b5061347d9050565b6040805160e060020a634cab0b15028152600b8301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b15948b9392606490910190602085019080838360005b838110156134055781810151838201526020016133ed565b50505050905090810190601f1680156134325780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561345057600080fd5b505af4158015613464573d6000803e3d6000fd5b505050506040513d602081101561347a57600080fd5b50505b8215613574576040805160e060020a63524e643b02815260088301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948b9392606490910190602085019080838360005b838110156134f75781810151838201526020016134df565b50505050905090810190601f1680156135245780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561354257600080fd5b505af4158015613556573d6000803e3d6000fd5b505050506040513d602081101561356c57600080fd5b506136609050565b6040805160e060020a634cab0b1502815260088301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b15948b9392606490910190602085019080838360005b838110156135e85781810151838201526020016135d0565b50505050905090810190601f1680156136155780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561363357600080fd5b505af4158015613647573d6000803e3d6000fd5b505050506040513d602081101561365d57600080fd5b50505b8115613757576040805160e060020a63524e643b02815260058301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948b9392606490910190602085019080838360005b838110156136da5781810151838201526020016136c2565b50505050905090810190601f1680156137075780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561372557600080fd5b505af4158015613739573d6000803e3d6000fd5b505050506040513d602081101561374f57600080fd5b506138439050565b6040805160e060020a634cab0b1502815260058301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b15948b9392606490910190602085019080838360005b838110156137cb5781810151838201526020016137b3565b50505050905090810190601f1680156137f85780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561381657600080fd5b505af415801561382a573d6000803e3d6000fd5b505050506040513d602081101561384057600080fd5b50505b505050505050565b61385533826126d9565b15156138955760405160e560020a62461bcd0281526004018080602001828103825260218152602001806145db6021913960400191505060405180910390fd5b6000600260006138a484614257565b81526020810191909152604001600020805490915060ff161515613912576040805160e560020a62461bcd02815260206004820152601860248201527f74686973207265706f20646f6573206e6f742065786973740000000000000000604482015290519081900360640190fd5b6002600061391f84614257565b815260208101919091526040016000908120805460ff191681559060018201816139498282614428565b505060058201600061395b8282614428565b505060088201600061396d8282614428565b5050600b8201600061397f8282614428565b505050600e01805460ff191690556040518251839190819060208401908083835b602083106139bf5780518252601f1990920191602091820191016139a0565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad9160009150a35050565b336000908152602081815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452613a819392830182828015611f095780601f10611ede57610100808354040283529160200191611f09565b1515613ad7576040805160e560020a62461bcd02815260206004820152601a60248201527f796f7520646f6e27742068617665207075736820616363657373000000000000604482015290519081900360640190fd5b600060026000613ae685614257565b81526020810191909152604001600020805490915060ff161515613b42576040805160e560020a62461bcd02815260206004820152601360248201526000805160206145bb833981519152604482015290519081900360640190fd5b6040805160e060020a634cab0b1502815260018301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b1594889392606490910190602085019080838360005b83811015613bb6578181015183820152602001613b9e565b50505050905090810190601f168015613be35780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015613c0157600080fd5b505af4158015613c15573d6000803e3d6000fd5b505050506040513d6020811015613c2b57600080fd5b5050600481016000613c3c84614257565b81526020808201929092526040908101600020805473ffffffffffffffffffffffffffffffffffffffff1916905551835184928291908401908083835b60208310613c985780518252601f199092019160209182019101613c79565b51815160209384036101000a6000190180199092169116179052604051919093018190038120885190955088945090928392508401908083835b60208310613cf15780518252601f199092019160209182019101613cd2565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507ff7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef05499160009150a4505050565b600060026000613d5984614257565b815260200190815260200160002060050173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__63411565559091856040518363ffffffff1660e060020a02815260040180838152602001806020018281038252838181518152602001915080519060200190808383600083811015612db5578181015183820152602001612d9d565b8051600010613e1e5760405160e560020a62461bcd0281526004018080602001828103825260238152602001806145fc6023913960400191505060405180910390fd5b336000908152602081905260409020546002600019610100600184161502019091160415613e805760405160e560020a62461bcd02815260040180806020018281038252602a81526020018061454c602a913960400191505060405180910390fd5b6000613e8b82614257565b600081815260016020526040902054909150600160a060020a031615613efb576040805160e560020a62461bcd02815260206004820181905260248201527f7468697320757365726e616d6520697320616c726561647920636c61696d6564604482015290519081900360640190fd5b336000908152602081815260409091208351613f1992850190614449565b50600081815260016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916331790559051835184928291908401908083835b60208310613f785780518252601f199092019160209182019101613f59565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507faffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d999160009150a35050565b600080613fdc83614257565b6000818152600260205260409020600e015490915060ff16151560011415614008576001915050611f17565b60026000828152602001908152602001600020600b0173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__63411565559091866040518363ffffffff1660e060020a0281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614090578181015183820152602001614078565b50505050905090810190601f1680156140bd5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156140db57600080fd5b505af41580156140ef573d6000803e3d6000fd5b505050506040513d602081101561410557600080fd5b5051949350505050565b60006002600061411e84614257565b815260200190815260200160002060010173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b15801561418257600080fd5b505af4158015614196573d6000803e3d6000fd5b505050506040513d60208110156141ac57600080fd5b505192915050565b600080600260006141c486614257565b81526020810191909152604001600020805490915060ff161515614220576040805160e560020a62461bcd02815260206004820152601360248201526000805160206145bb833981519152604482015290519081900360640190fd5b80600401600061422f85614257565b81526020810191909152604001600020546c0100000000000000000000000002949350505050565b6000816040516020018082805190602001908083835b6020831061428c5780518252601f19909201916020918201910161426d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b8260005b6020811015614336578181602081106142e757fe5b1a60f860020a02848483018151811015156142fe57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001016142d2565b5050505050565b60005b83518110156143b257838181518110151561435757fe5b90602001015160f860020a900460f860020a028383830181518110151561437a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101614340565b50505050565b60005b60148160ff1610156143b2578360ff8216601481106143d657fe5b1a60f860020a0283838360ff16018151811015156143f057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001016143bb565b508054600082559060005260206000209081019061444691906144c7565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061448a57805160ff19168380011785556144b7565b828001600101855582156144b7579182015b828111156144b757825182559160200191906001019061449c565b506144c39291506144ed565b5090565b6144ea91905b808211156144c35760006144e18282614507565b506001016144cd565b90565b6144ea91905b808211156144c357600081556001016144f3565b50805460018160011615610100020316600290046000825580601f1061452d5750614446565b601f01602090049060005260206000209081019061444691906144ed56fe796f7572206164647265737320616c72656164792062656c6f6e677320746f206120757365726e616d65617267756d656e7420277265706f4944272063616e6e6f7420626520656d70747974686973207265706f49442068617320616c7265616479206265656e20636c61696d65647265706f20646f6573206e6f7420657869737400000000000000000000000000796f7520617265206e6f7420616e2061646d696e206f662074686973207265706f617267756d656e742027757365726e616d65272063616e6e6f7420626520656d7074797468652070726f7669646564206f6c64436f6d6d69744861736820697320696e636f7272656374a165627a7a72305820cb7234adb8991621be9aaa0f65e87f25b058516e32776a335ebd04e118bd6c070029`

// DeployProtocol deploys a new Ethereum contract, binding an instance of Protocol to it.
func DeployProtocol(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Protocol, error) {
	parsed, err := abi.JSON(strings.NewReader(ProtocolABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProtocolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Protocol{ProtocolCaller: ProtocolCaller{contract: contract}, ProtocolTransactor: ProtocolTransactor{contract: contract}, ProtocolFilterer: ProtocolFilterer{contract: contract}}, nil
}

// Protocol is an auto generated Go binding around an Ethereum contract.
type Protocol struct {
	ProtocolCaller     // Read-only binding to the contract
	ProtocolTransactor // Write-only binding to the contract
	ProtocolFilterer   // Log filterer for contract events
}

// ProtocolCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProtocolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProtocolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProtocolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProtocolSession struct {
	Contract     *Protocol         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProtocolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProtocolCallerSession struct {
	Contract *ProtocolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ProtocolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProtocolTransactorSession struct {
	Contract     *ProtocolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ProtocolRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProtocolRaw struct {
	Contract *Protocol // Generic contract binding to access the raw methods on
}

// ProtocolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProtocolCallerRaw struct {
	Contract *ProtocolCaller // Generic read-only contract binding to access the raw methods on
}

// ProtocolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProtocolTransactorRaw struct {
	Contract *ProtocolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProtocol creates a new instance of Protocol, bound to a specific deployed contract.
func NewProtocol(address common.Address, backend bind.ContractBackend) (*Protocol, error) {
	contract, err := bindProtocol(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Protocol{ProtocolCaller: ProtocolCaller{contract: contract}, ProtocolTransactor: ProtocolTransactor{contract: contract}, ProtocolFilterer: ProtocolFilterer{contract: contract}}, nil
}

// NewProtocolCaller creates a new read-only instance of Protocol, bound to a specific deployed contract.
func NewProtocolCaller(address common.Address, caller bind.ContractCaller) (*ProtocolCaller, error) {
	contract, err := bindProtocol(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProtocolCaller{contract: contract}, nil
}

// NewProtocolTransactor creates a new write-only instance of Protocol, bound to a specific deployed contract.
func NewProtocolTransactor(address common.Address, transactor bind.ContractTransactor) (*ProtocolTransactor, error) {
	contract, err := bindProtocol(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProtocolTransactor{contract: contract}, nil
}

// NewProtocolFilterer creates a new log filterer instance of Protocol, bound to a specific deployed contract.
func NewProtocolFilterer(address common.Address, filterer bind.ContractFilterer) (*ProtocolFilterer, error) {
	contract, err := bindProtocol(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProtocolFilterer{contract: contract}, nil
}

// bindProtocol binds a generic wrapper to an already deployed contract.
func bindProtocol(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProtocolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Protocol *ProtocolRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Protocol.Contract.ProtocolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Protocol *ProtocolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Protocol.Contract.ProtocolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Protocol *ProtocolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Protocol.Contract.ProtocolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Protocol *ProtocolCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Protocol.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Protocol *ProtocolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Protocol.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Protocol *ProtocolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Protocol.Contract.contract.Transact(opts, method, params...)
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressHasPullAccess(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressHasPullAccess", addr, repoID)
	return *ret0, err
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressHasPullAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPullAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressHasPullAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPullAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressHasPushAccess(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressHasPushAccess", addr, repoID)
	return *ret0, err
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressHasPushAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPushAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressHasPushAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPushAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressIsAdmin(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressIsAdmin", addr, repoID)
	return *ret0, err
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressIsAdmin(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressIsAdmin(&_Protocol.CallOpts, addr, repoID)
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressIsAdmin(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressIsAdmin(&_Protocol.CallOpts, addr, repoID)
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolCaller) AddressesByUsername(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressesByUsername", arg0)
	return *ret0, err
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolSession) AddressesByUsername(arg0 [32]byte) (common.Address, error) {
	return _Protocol.Contract.AddressesByUsername(&_Protocol.CallOpts, arg0)
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolCallerSession) AddressesByUsername(arg0 [32]byte) (common.Address, error) {
	return _Protocol.Contract.AddressesByUsername(&_Protocol.CallOpts, arg0)
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolCaller) GetAddressForUsername(opts *bind.CallOpts, username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "getAddressForUsername", username)
	return *ret0, err
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolSession) GetAddressForUsername(username string) (common.Address, error) {
	return _Protocol.Contract.GetAddressForUsername(&_Protocol.CallOpts, username)
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolCallerSession) GetAddressForUsername(username string) (common.Address, error) {
	return _Protocol.Contract.GetAddressForUsername(&_Protocol.CallOpts, username)
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(bytes20)
func (_Protocol *ProtocolCaller) GetRef(opts *bind.CallOpts, repoID string, refName string) ([20]byte, error) {
	var (
		ret0 = new([20]byte)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "getRef", repoID, refName)
	return *ret0, err
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(bytes20)
func (_Protocol *ProtocolSession) GetRef(repoID string, refName string) ([20]byte, error) {
	return _Protocol.Contract.GetRef(&_Protocol.CallOpts, repoID, refName)
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(bytes20)
func (_Protocol *ProtocolCallerSession) GetRef(repoID string, refName string) ([20]byte, error) {
	return _Protocol.Contract.GetRef(&_Protocol.CallOpts, repoID, refName)
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCaller) GetRefs(opts *bind.CallOpts, repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	ret := new(struct {
		Total *big.Int
		Data  []byte
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getRefs", repoID, pageSize, page)
	return *ret, err
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolSession) GetRefs(repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRefs(&_Protocol.CallOpts, repoID, pageSize, page)
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCallerSession) GetRefs(repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRefs(&_Protocol.CallOpts, repoID, pageSize, page)
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCaller) GetRepoUsers(opts *bind.CallOpts, repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	ret := new(struct {
		Total *big.Int
		Data  []byte
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getRepoUsers", repoID, whichUsers, pageSize, page)
	return *ret, err
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolSession) GetRepoUsers(repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRepoUsers(&_Protocol.CallOpts, repoID, whichUsers, pageSize, page)
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCallerSession) GetRepoUsers(repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRepoUsers(&_Protocol.CallOpts, repoID, whichUsers, pageSize, page)
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolCaller) GetUserPermissions(opts *bind.CallOpts, repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	ret := new(struct {
		Puller bool
		Pusher bool
		Admin  bool
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getUserPermissions", repoID, username)
	return *ret, err
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolSession) GetUserPermissions(repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	return _Protocol.Contract.GetUserPermissions(&_Protocol.CallOpts, repoID, username)
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolCallerSession) GetUserPermissions(repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	return _Protocol.Contract.GetUserPermissions(&_Protocol.CallOpts, repoID, username)
}

// IsRepoPublic is a free data retrieval call binding the contract method 0x6653a812.
//
// Solidity: function isRepoPublic(repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) IsRepoPublic(opts *bind.CallOpts, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "isRepoPublic", repoID)
	return *ret0, err
}

// IsRepoPublic is a free data retrieval call binding the contract method 0x6653a812.
//
// Solidity: function isRepoPublic(repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) IsRepoPublic(repoID string) (bool, error) {
	return _Protocol.Contract.IsRepoPublic(&_Protocol.CallOpts, repoID)
}

// IsRepoPublic is a free data retrieval call binding the contract method 0x6653a812.
//
// Solidity: function isRepoPublic(repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) IsRepoPublic(repoID string) (bool, error) {
	return _Protocol.Contract.IsRepoPublic(&_Protocol.CallOpts, repoID)
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolCaller) NumRefs(opts *bind.CallOpts, repoID string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "numRefs", repoID)
	return *ret0, err
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolSession) NumRefs(repoID string) (*big.Int, error) {
	return _Protocol.Contract.NumRefs(&_Protocol.CallOpts, repoID)
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolCallerSession) NumRefs(repoID string) (*big.Int, error) {
	return _Protocol.Contract.NumRefs(&_Protocol.CallOpts, repoID)
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) RepoExists(opts *bind.CallOpts, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "repoExists", repoID)
	return *ret0, err
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) RepoExists(repoID string) (bool, error) {
	return _Protocol.Contract.RepoExists(&_Protocol.CallOpts, repoID)
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) RepoExists(repoID string) (bool, error) {
	return _Protocol.Contract.RepoExists(&_Protocol.CallOpts, repoID)
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserHasPullAccess(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userHasPullAccess", username, repoID)
	return *ret0, err
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserHasPullAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPullAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserHasPullAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPullAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserHasPushAccess(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userHasPushAccess", username, repoID)
	return *ret0, err
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserHasPushAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPushAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserHasPushAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPushAccess(&_Protocol.CallOpts, username, repoID)
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserIsAdmin(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userIsAdmin", username, repoID)
	return *ret0, err
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserIsAdmin(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserIsAdmin(&_Protocol.CallOpts, username, repoID)
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserIsAdmin(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserIsAdmin(&_Protocol.CallOpts, username, repoID)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolCaller) UsernamesByAddress(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "usernamesByAddress", arg0)
	return *ret0, err
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolSession) UsernamesByAddress(arg0 common.Address) (string, error) {
	return _Protocol.Contract.UsernamesByAddress(&_Protocol.CallOpts, arg0)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolCallerSession) UsernamesByAddress(arg0 common.Address) (string, error) {
	return _Protocol.Contract.UsernamesByAddress(&_Protocol.CallOpts, arg0)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolTransactor) CreateRepo(opts *bind.TransactOpts, repoID string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "createRepo", repoID)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolSession) CreateRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.CreateRepo(&_Protocol.TransactOpts, repoID)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolTransactorSession) CreateRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.CreateRepo(&_Protocol.TransactOpts, repoID)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolTransactor) DeleteRef(opts *bind.TransactOpts, repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "deleteRef", repoID, refName)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolSession) DeleteRef(repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRef(&_Protocol.TransactOpts, repoID, refName)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolTransactorSession) DeleteRef(repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRef(&_Protocol.TransactOpts, repoID, refName)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolTransactor) DeleteRepo(opts *bind.TransactOpts, repoID string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "deleteRepo", repoID)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolSession) DeleteRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRepo(&_Protocol.TransactOpts, repoID)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolTransactorSession) DeleteRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRepo(&_Protocol.TransactOpts, repoID)
}

// SetPublic is a paid mutator transaction binding the contract method 0x484af658.
//
// Solidity: function setPublic(repoID string, isPublic bool) returns()
func (_Protocol *ProtocolTransactor) SetPublic(opts *bind.TransactOpts, repoID string, isPublic bool) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setPublic", repoID, isPublic)
}

// SetPublic is a paid mutator transaction binding the contract method 0x484af658.
//
// Solidity: function setPublic(repoID string, isPublic bool) returns()
func (_Protocol *ProtocolSession) SetPublic(repoID string, isPublic bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetPublic(&_Protocol.TransactOpts, repoID, isPublic)
}

// SetPublic is a paid mutator transaction binding the contract method 0x484af658.
//
// Solidity: function setPublic(repoID string, isPublic bool) returns()
func (_Protocol *ProtocolTransactorSession) SetPublic(repoID string, isPublic bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetPublic(&_Protocol.TransactOpts, repoID, isPublic)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolTransactor) SetUserPermissions(opts *bind.TransactOpts, repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setUserPermissions", repoID, username, puller, pusher, admin)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolSession) SetUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetUserPermissions(&_Protocol.TransactOpts, repoID, username, puller, pusher, admin)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolTransactorSession) SetUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetUserPermissions(&_Protocol.TransactOpts, repoID, username, puller, pusher, admin)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolTransactor) SetUsername(opts *bind.TransactOpts, username string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setUsername", username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolSession) SetUsername(username string) (*types.Transaction, error) {
	return _Protocol.Contract.SetUsername(&_Protocol.TransactOpts, username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolTransactorSession) SetUsername(username string) (*types.Transaction, error) {
	return _Protocol.Contract.SetUsername(&_Protocol.TransactOpts, username)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x154b1d1f.
//
// Solidity: function updateRef(repoID string, refName string, oldCommitHash bytes20, newCommitHash bytes20) returns()
func (_Protocol *ProtocolTransactor) UpdateRef(opts *bind.TransactOpts, repoID string, refName string, oldCommitHash [20]byte, newCommitHash [20]byte) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "updateRef", repoID, refName, oldCommitHash, newCommitHash)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x154b1d1f.
//
// Solidity: function updateRef(repoID string, refName string, oldCommitHash bytes20, newCommitHash bytes20) returns()
func (_Protocol *ProtocolSession) UpdateRef(repoID string, refName string, oldCommitHash [20]byte, newCommitHash [20]byte) (*types.Transaction, error) {
	return _Protocol.Contract.UpdateRef(&_Protocol.TransactOpts, repoID, refName, oldCommitHash, newCommitHash)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x154b1d1f.
//
// Solidity: function updateRef(repoID string, refName string, oldCommitHash bytes20, newCommitHash bytes20) returns()
func (_Protocol *ProtocolTransactorSession) UpdateRef(repoID string, refName string, oldCommitHash [20]byte, newCommitHash [20]byte) (*types.Transaction, error) {
	return _Protocol.Contract.UpdateRef(&_Protocol.TransactOpts, repoID, refName, oldCommitHash, newCommitHash)
}

// ProtocolLogCreateRepoIterator is returned from FilterLogCreateRepo and is used to iterate over the raw logs and unpacked data for LogCreateRepo events raised by the Protocol contract.
type ProtocolLogCreateRepoIterator struct {
	Event *ProtocolLogCreateRepo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogCreateRepoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogCreateRepo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogCreateRepo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogCreateRepoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogCreateRepoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogCreateRepo represents a LogCreateRepo event raised by the Protocol contract.
type ProtocolLogCreateRepo struct {
	User   common.Address
	RepoID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogCreateRepo is a free log retrieval operation binding the contract event 0x967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae8529.
//
// Solidity: e LogCreateRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) FilterLogCreateRepo(opts *bind.FilterOpts, user []common.Address, repoID []string) (*ProtocolLogCreateRepoIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogCreateRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogCreateRepoIterator{contract: _Protocol.contract, event: "LogCreateRepo", logs: logs, sub: sub}, nil
}

// WatchLogCreateRepo is a free log subscription operation binding the contract event 0x967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae8529.
//
// Solidity: e LogCreateRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) WatchLogCreateRepo(opts *bind.WatchOpts, sink chan<- *ProtocolLogCreateRepo, user []common.Address, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogCreateRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogCreateRepo)
				if err := _Protocol.contract.UnpackLog(event, "LogCreateRepo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogDeleteRefIterator is returned from FilterLogDeleteRef and is used to iterate over the raw logs and unpacked data for LogDeleteRef events raised by the Protocol contract.
type ProtocolLogDeleteRefIterator struct {
	Event *ProtocolLogDeleteRef // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogDeleteRefIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogDeleteRef)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogDeleteRef)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogDeleteRefIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogDeleteRefIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogDeleteRef represents a LogDeleteRef event raised by the Protocol contract.
type ProtocolLogDeleteRef struct {
	User    common.Address
	RepoID  common.Hash
	RefName common.Hash
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterLogDeleteRef is a free log retrieval operation binding the contract event 0xf7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef0549.
//
// Solidity: e LogDeleteRef(user indexed address, repoID indexed string, refName indexed string)
func (_Protocol *ProtocolFilterer) FilterLogDeleteRef(opts *bind.FilterOpts, user []common.Address, repoID []string, refName []string) (*ProtocolLogDeleteRefIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogDeleteRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogDeleteRefIterator{contract: _Protocol.contract, event: "LogDeleteRef", logs: logs, sub: sub}, nil
}

// WatchLogDeleteRef is a free log subscription operation binding the contract event 0xf7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef0549.
//
// Solidity: e LogDeleteRef(user indexed address, repoID indexed string, refName indexed string)
func (_Protocol *ProtocolFilterer) WatchLogDeleteRef(opts *bind.WatchOpts, sink chan<- *ProtocolLogDeleteRef, user []common.Address, repoID []string, refName []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogDeleteRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogDeleteRef)
				if err := _Protocol.contract.UnpackLog(event, "LogDeleteRef", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogDeleteRepoIterator is returned from FilterLogDeleteRepo and is used to iterate over the raw logs and unpacked data for LogDeleteRepo events raised by the Protocol contract.
type ProtocolLogDeleteRepoIterator struct {
	Event *ProtocolLogDeleteRepo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogDeleteRepoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogDeleteRepo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogDeleteRepo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogDeleteRepoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogDeleteRepoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogDeleteRepo represents a LogDeleteRepo event raised by the Protocol contract.
type ProtocolLogDeleteRepo struct {
	User   common.Address
	RepoID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogDeleteRepo is a free log retrieval operation binding the contract event 0x2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad.
//
// Solidity: e LogDeleteRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) FilterLogDeleteRepo(opts *bind.FilterOpts, user []common.Address, repoID []string) (*ProtocolLogDeleteRepoIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogDeleteRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogDeleteRepoIterator{contract: _Protocol.contract, event: "LogDeleteRepo", logs: logs, sub: sub}, nil
}

// WatchLogDeleteRepo is a free log subscription operation binding the contract event 0x2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad.
//
// Solidity: e LogDeleteRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) WatchLogDeleteRepo(opts *bind.WatchOpts, sink chan<- *ProtocolLogDeleteRepo, user []common.Address, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogDeleteRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogDeleteRepo)
				if err := _Protocol.contract.UnpackLog(event, "LogDeleteRepo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogSetPublicIterator is returned from FilterLogSetPublic and is used to iterate over the raw logs and unpacked data for LogSetPublic events raised by the Protocol contract.
type ProtocolLogSetPublicIterator struct {
	Event *ProtocolLogSetPublic // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogSetPublicIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogSetPublic)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogSetPublic)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogSetPublicIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogSetPublicIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogSetPublic represents a LogSetPublic event raised by the Protocol contract.
type ProtocolLogSetPublic struct {
	User     common.Address
	RepoID   string
	IsPublic bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogSetPublic is a free log retrieval operation binding the contract event 0xafd3374d7b80a84573da7094729fa7e4a8a87165437b49e55a448db5b9df704c.
//
// Solidity: e LogSetPublic(user indexed address, repoID string, isPublic bool)
func (_Protocol *ProtocolFilterer) FilterLogSetPublic(opts *bind.FilterOpts, user []common.Address) (*ProtocolLogSetPublicIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogSetPublic", userRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogSetPublicIterator{contract: _Protocol.contract, event: "LogSetPublic", logs: logs, sub: sub}, nil
}

// WatchLogSetPublic is a free log subscription operation binding the contract event 0xafd3374d7b80a84573da7094729fa7e4a8a87165437b49e55a448db5b9df704c.
//
// Solidity: e LogSetPublic(user indexed address, repoID string, isPublic bool)
func (_Protocol *ProtocolFilterer) WatchLogSetPublic(opts *bind.WatchOpts, sink chan<- *ProtocolLogSetPublic, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogSetPublic", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogSetPublic)
				if err := _Protocol.contract.UnpackLog(event, "LogSetPublic", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogSetUsernameIterator is returned from FilterLogSetUsername and is used to iterate over the raw logs and unpacked data for LogSetUsername events raised by the Protocol contract.
type ProtocolLogSetUsernameIterator struct {
	Event *ProtocolLogSetUsername // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogSetUsernameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogSetUsername)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogSetUsername)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogSetUsernameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogSetUsernameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogSetUsername represents a LogSetUsername event raised by the Protocol contract.
type ProtocolLogSetUsername struct {
	Addr     common.Address
	Username common.Hash
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogSetUsername is a free log retrieval operation binding the contract event 0xaffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d99.
//
// Solidity: e LogSetUsername(addr indexed address, username indexed string)
func (_Protocol *ProtocolFilterer) FilterLogSetUsername(opts *bind.FilterOpts, addr []common.Address, username []string) (*ProtocolLogSetUsernameIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogSetUsername", addrRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogSetUsernameIterator{contract: _Protocol.contract, event: "LogSetUsername", logs: logs, sub: sub}, nil
}

// WatchLogSetUsername is a free log subscription operation binding the contract event 0xaffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d99.
//
// Solidity: e LogSetUsername(addr indexed address, username indexed string)
func (_Protocol *ProtocolFilterer) WatchLogSetUsername(opts *bind.WatchOpts, sink chan<- *ProtocolLogSetUsername, addr []common.Address, username []string) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogSetUsername", addrRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogSetUsername)
				if err := _Protocol.contract.UnpackLog(event, "LogSetUsername", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogUpdateRefIterator is returned from FilterLogUpdateRef and is used to iterate over the raw logs and unpacked data for LogUpdateRef events raised by the Protocol contract.
type ProtocolLogUpdateRefIterator struct {
	Event *ProtocolLogUpdateRef // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogUpdateRefIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogUpdateRef)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogUpdateRef)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogUpdateRefIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogUpdateRefIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogUpdateRef represents a LogUpdateRef event raised by the Protocol contract.
type ProtocolLogUpdateRef struct {
	User       common.Address
	RepoID     common.Hash
	RefName    common.Hash
	CommitHash [20]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogUpdateRef is a free log retrieval operation binding the contract event 0x53cefa826f4c8a285b2b5d751be6efe1a535e332d21fc085341fb21162ace30b.
//
// Solidity: e LogUpdateRef(user indexed address, repoID indexed string, refName indexed string, commitHash bytes20)
func (_Protocol *ProtocolFilterer) FilterLogUpdateRef(opts *bind.FilterOpts, user []common.Address, repoID []string, refName []string) (*ProtocolLogUpdateRefIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogUpdateRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogUpdateRefIterator{contract: _Protocol.contract, event: "LogUpdateRef", logs: logs, sub: sub}, nil
}

// WatchLogUpdateRef is a free log subscription operation binding the contract event 0x53cefa826f4c8a285b2b5d751be6efe1a535e332d21fc085341fb21162ace30b.
//
// Solidity: e LogUpdateRef(user indexed address, repoID indexed string, refName indexed string, commitHash bytes20)
func (_Protocol *ProtocolFilterer) WatchLogUpdateRef(opts *bind.WatchOpts, sink chan<- *ProtocolLogUpdateRef, user []common.Address, repoID []string, refName []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogUpdateRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogUpdateRef)
				if err := _Protocol.contract.UnpackLog(event, "LogUpdateRef", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
