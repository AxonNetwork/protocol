// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nodeeth

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// ProtocolABI is the input ABI used to generate the binding from.
const ProtocolABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getAddressForUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"whichUsers\",\"type\":\"uint8\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getRepoUsers\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressHasPushAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usernamesByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressHasPullAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"createRepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"repoExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"},{\"name\":\"commitHash\",\"type\":\"string\"}],\"name\":\"updateRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getRefs\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userHasPushAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addressesByUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getUserPermissions\",\"outputs\":[{\"name\":\"puller\",\"type\":\"bool\"},{\"name\":\"pusher\",\"type\":\"bool\"},{\"name\":\"admin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"puller\",\"type\":\"bool\"},{\"name\":\"pusher\",\"type\":\"bool\"},{\"name\":\"admin\",\"type\":\"bool\"}],\"name\":\"setUserPermissions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"deleteRepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"deleteRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userHasPullAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"numRefs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"getRef\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"LogSetUsername\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"LogCreateRepo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"LogDeleteRepo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"refName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"commitHash\",\"type\":\"string\"}],\"name\":\"LogUpdateRef\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"LogDeleteRef\",\"type\":\"event\"}]"

// ProtocolBin is the compiled bytecode used for deploying new contracts.
const ProtocolBin = `0x608060405234801561001057600080fd5b50613d95806100206000396000f3006080604052600436106101035763ffffffff60e060020a600035041663095a053581146101085780631ccd49121461017d5780632b133be01461026457806342dfb6da146102df5780634d6e93cb146103755780634fa94bea146103dc57806353dad77714610437578063592c6a0f1461049e578063605a5dd8146104f75780636735c577146105cc5780637bbaf1591461062e578063a58e325c146106c5578063abd9649c146106dd578063d4fa6a8f14610796578063d51c250c1461083e578063e07a896d14610897578063ec6761891461092e578063ed59313a146109c5578063ede07dfe14610a1e578063f2ebfa1014610ab5578063f6ce75b314610b20575b600080fd5b34801561011457600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610161943694929360249392840191908190840183828082843750949750610bb79650505050505050565b60408051600160a060020a039092168252519081900360200190f35b34801561018957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101e59436949293602493928401919081908401838280828437509497505050833560ff1694505050602082013591604001359050610be6565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610228578181015183820152602001610210565b50505050905090810190601f1680156102555780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561027057600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102cb958335600160a060020a03169536956044949193909101919081908401838280828437509497506110ce9650505050505050565b604080519115158252519081900360200190f35b3480156102eb57600080fd5b50610300600160a060020a036004351661117c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561033a578181015183820152602001610322565b50505050905090810190601f1680156103675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038157600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102cb958335600160a060020a03169536956044949193909101919081908401838280828437509497506112169650505050505050565b3480156103e857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104359436949293602493928401919081908401838280828437509497506112bd9650505050505050565b005b34801561044357600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102cb958335600160a060020a03169536956044949193909101919081908401838280828437509497506118379650505050505050565b3480156104aa57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102cb9436949293602493928401919081908401838280828437509497506118de9650505050505050565b34801561050357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261043594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506119079650505050505050565b3480156105d857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101e5943694929360249392840191908190840183828082843750949750508435955050506020909201359150611d2f9050565b34801561063a57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102cb94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506123559650505050505050565b3480156106d157600080fd5b5061016160043561246d565b3480156106e957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261077494369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506124889650505050505050565b6040805193151584529115156020840152151582820152519081900360600190f35b3480156107a257600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261043594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750505050823515159350505060208101351515906040013515156127d3565b34801561084a57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610435943694929360249392840191908190840183828082843750949750612e679650505050505050565b3480156108a357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261043594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061306f9650505050505050565b34801561093a57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102cb94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506133c79650505050505050565b3480156109d157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104359436949293602493928401919081908401838280828437509497506134609650505050505050565b348015610a2a57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102cb94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506136ce9650505050505050565b348015610ac157600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610b0e94369492936024939284019190819084018382808284375094975061380d9650505050505050565b60408051918252519081900360200190f35b348015610b2c57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261030094369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506138b79650505050505050565b600060016000610bc6846139d6565b8152602081019190915260400160002054600160a060020a031692915050565b60006060600080606060008060008060026000610c028f6139d6565b81526020810191909152604001600020805490975060ff161515610c5e576040805160e560020a62461bcd0281526020600482015260136024820152600080516020613d0a833981519152604482015290519081900360640190fd5b60008c6002811115610c6c57fe5b1415610c7d57866005019550610cb7565b60018c6002811115610c8b57fe5b1415610c9c5786600b019550610cb7565b60028c6002811115610caa57fe5b1415610cb7578660080195505b600093508a8a029250600091505b8a82108015610d5457508573__../../eth/contracts/StringSetLib.sol__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015610d2357600080fd5b505af4158015610d37573d6000803e3d6000fd5b505050506040513d6020811015610d4d57600080fd5b5051828401105b15610e595760408051600080516020613caa8339815191528152600481018890528385016024820152905173__../../eth/contracts/StringSetLib.sol__916329b97ab6916044808301926000929190829003018186803b158015610dba57600080fd5b505af4158015610dce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610df757600080fd5b810190808051640100000000811115610e0f57600080fd5b82016020810184811115610e2257600080fd5b8151640100000000811182820187101715610e3c57600080fd5b505080519098509690960160200195505060019092019150610cc5565b836040519080825280601f01601f191660200182016040528015610e87578160200160208202803883390190505b50975060009050600091505b8a82108015610f2257508573__../../eth/contracts/StringSetLib.sol__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015610ef157600080fd5b505af4158015610f05573d6000803e3d6000fd5b505050506040513d6020811015610f1b57600080fd5b5051828401105b1561103c5760408051600080516020613caa8339815191528152600481018890528385016024820152905173__../../eth/contracts/StringSetLib.sol__916329b97ab6916044808301926000929190829003018186803b158015610f8857600080fd5b505af4158015610f9c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610fc557600080fd5b810190808051640100000000811115610fdd57600080fd5b82016020810184811115610ff057600080fd5b815164010000000081118282018710171561100a57600080fd5b5050929190505050945061102085518983613aa0565b60200161102e858983613b0f565b845160019092019101610e93565b8573__../../eth/contracts/StringSetLib.sol__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b15801561109057600080fd5b505af41580156110a4573d6000803e3d6000fd5b505050506040513d60208110156110ba57600080fd5b505198505050505050505094509492505050565b600160a060020a03821660009081526020818152604080832080548251601f600260001961010060018616150201909316929092049182018590048502810185019093528083526111759383018282801561116a5780601f1061113f5761010080835404028352916020019161116a565b820191906000526020600020905b81548152906001019060200180831161114d57829003601f168201915b505050505083612355565b9392505050565b600060208181529181526040908190208054825160026001831615610100026000190190921691909104601f81018590048502820185019093528281529290919083018282801561120e5780601f106111e35761010080835404028352916020019161120e565b820191906000526020600020905b8154815290600101906020018083116111f157829003601f168201915b505050505081565b600160a060020a03821660009081526020818152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611175938301828280156112b25780601f10611287576101008083540402835291602001916112b2565b820191906000526020600020905b81548152906001019060200180831161129557829003601f168201915b5050505050836136ce565b60606000808351111515611341576040805160e560020a62461bcd02815260206004820152602160248201527f617267756d656e7420277265706f4944272063616e6e6f7420626520656d707460448201527f7900000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152602081815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156113d35780601f106113a8576101008083540402835291602001916113d3565b820191906000526020600020905b8154815290600101906020018083116113b657829003601f168201915b5050505050915060008251111515611435576040805160e560020a62461bcd02815260206004820152601f60248201527f796f752068617665206e6f7420636c61696d6564206120757365726e616d6500604482015290519081900360640190fd5b60026000611442856139d6565b81526020810191909152604001600020805490915060ff16156114d4576040805160e560020a62461bcd028152602060048201526024808201527f74686973207265706f49442068617320616c7265616479206265656e20636c6160448201527f696d656400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b805460ff1916600117815560408051600080516020613d2a833981519152815260088301600482018181526024830193845285516044840152855173__../../eth/contracts/StringSetLib.sol__9463524e643b94889392606490910190602085019080838360005b8381101561155757818101518382015260200161153f565b50505050905090810190601f1680156115845780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156115a257600080fd5b505af41580156115b6573d6000803e3d6000fd5b505050506040513d60208110156115cc57600080fd5b505060408051600080516020613d2a833981519152815260058301600482018181526024830193845285516044840152855173__../../eth/contracts/StringSetLib.sol__9463524e643b94889392606490910190602085019080838360005b8381101561164657818101518382015260200161162e565b50505050905090810190601f1680156116735780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561169157600080fd5b505af41580156116a5573d6000803e3d6000fd5b505050506040513d60208110156116bb57600080fd5b505060408051600080516020613d2a8339815191528152600b8301600482018181526024830193845285516044840152855173__../../eth/contracts/StringSetLib.sol__9463524e643b94889392606490910190602085019080838360005b8381101561173557818101518382015260200161171d565b50505050905090810190601f1680156117625780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561178057600080fd5b505af4158015611794573d6000803e3d6000fd5b505050506040513d60208110156117aa57600080fd5b50506040518351849190819060208401908083835b602083106117de5780518252601f1990920191602091820191016117bf565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae85299160009150a3505050565b600160a060020a03821660009081526020818152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611175938301828280156118d35780601f106118a8576101008083540402835291602001916118d3565b820191906000526020600020905b8154815290600101906020018083116118b657829003601f168201915b5050505050836133c7565b6000600260006118ed846139d6565b815260208101919091526040016000205460ff1692915050565b3360009081526020818152604080832080548251601f600260001961010060018616150201909316929092049182018590048502810185019093528083526119a59383018282801561199a5780601f1061196f5761010080835404028352916020019161199a565b820191906000526020600020905b81548152906001019060200180831161197d57829003601f168201915b505050505085612355565b15156119fb576040805160e560020a62461bcd02815260206004820152601a60248201527f796f7520646f6e27742068617665207075736820616363657373000000000000604482015290519081900360640190fd5b8151602814611a54576040805160e560020a62461bcd02815260206004820152600f60248201527f62616420636f6d6d697420686173680000000000000000000000000000000000604482015290519081900360640190fd5b60026000611a61866139d6565b81526020810191909152604001600020805490915060ff161515611abd576040805160e560020a62461bcd0281526020600482015260136024820152600080516020613d0a833981519152604482015290519081900360640190fd5b60408051600080516020613d2a833981519152815260018301600482018181526024830193845286516044840152865173__../../eth/contracts/StringSetLib.sol__9463524e643b94899392606490910190602085019080838360005b83811015611b35578181015183820152602001611b1d565b50505050905090810190601f168015611b625780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611b8057600080fd5b505af4158015611b94573d6000803e3d6000fd5b505050506040513d6020811015611baa57600080fd5b50829050600482016000611bbd866139d6565b81526020808201929092526040016000208251611be09391929190910190613b8a565b50826040518082805190602001908083835b60208310611c115780518252601f199092019160209182019101611bf2565b51815160209384036101000a6000190180199092169116179052604051919093018190038120895190955089945090928392508401908083835b60208310611c6a5780518252601f199092019160209182019101611c4b565b51815160209384036101000a60001901801990921691161790526040805192909401829003822081835289518383015289519096503395507fc77d795c5ada12e6e61f6ca6c04423828f0660699387fefc548700aad589669b948a94508392908301919085019080838360005b83811015611cef578181015183820152602001611cd7565b50505050905090810190601f168015611d1c5780820380516001836020036101000a031916815260200191505b509250505060405180910390a450505050565b60006060600060608060008060008060026000611d4b8e6139d6565b81526020810191909152604001600020805490975060ff161515611da7576040805160e560020a62461bcd0281526020600482015260136024820152600080516020613d0a833981519152604482015290519081900360640190fd5b600093508a8a029250600091505b8a82108015611e4b575060408051600080516020613cea8339815191528152600189016004820152905173__../../eth/contracts/StringSetLib.sol__916324861346916024808301926020929190829003018186803b158015611e1a57600080fd5b505af4158015611e2e573d6000803e3d6000fd5b505050506040513d6020811015611e4457600080fd5b5051828401105b156120065760408051600080516020613caa83398151915281526001890160048201528385016024820152905173__../../eth/contracts/StringSetLib.sol__916329b97ab6916044808301926000929190829003018186803b158015611eb357600080fd5b505af4158015611ec7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611ef057600080fd5b810190808051640100000000811115611f0857600080fd5b82016020810184811115611f1b57600080fd5b8151640100000000811182820187101715611f3557600080fd5b50509291905050509550866004016000611f4e886139d6565b815260208082019290925260409081016000208054825160026000196001841615610100020190921691909104601f810185900485028201850190935282815292909190830182828015611fe35780601f10611fb857610100808354040283529160200191611fe3565b820191906000526020600020905b815481529060010190602001808311611fc657829003601f168201915b505050505094508451865160200160200101840193508180600101925050611db5565b836040519080825280601f01601f191660200182016040528015612034578160200160208202803883390190505b50975060009050600091505b8a821080156120d6575060408051600080516020613cea8339815191528152600189016004820152905173__../../eth/contracts/StringSetLib.sol__916324861346916024808301926020929190829003018186803b1580156120a557600080fd5b505af41580156120b9573d6000803e3d6000fd5b505050506040513d60208110156120cf57600080fd5b5051828401105b156122bd5760408051600080516020613caa83398151915281526001890160048201528385016024820152905173__../../eth/contracts/StringSetLib.sol__916329b97ab6916044808301926000929190829003018186803b15801561213e57600080fd5b505af4158015612152573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561217b57600080fd5b81019080805164010000000081111561219357600080fd5b820160208101848111156121a657600080fd5b81516401000000008111828201871017156121c057600080fd5b505092919050505095508660040160006121d9886139d6565b815260208082019290925260409081016000208054825160026000196001841615610100020190921691909104601f81018590048502820185019093528281529290919083018282801561226e5780601f106122435761010080835404028352916020019161226e565b820191906000526020600020905b81548152906001019060200180831161225157829003601f168201915b5050505050945061228186518983613aa0565b60200161228f868983613b0f565b8551810190506122a185518983613aa0565b6020016122af858983613b0f565b845160019092019101612040565b60408051600080516020613cea8339815191528152600189016004820152905173__../../eth/contracts/StringSetLib.sol__916324861346916024808301926020929190829003018186803b15801561231857600080fd5b505af415801561232c573d6000803e3d6000fd5b505050506040513d602081101561234257600080fd5b5051985050505050505050935093915050565b600060026000612364846139d6565b6000191660001916815260200190815260200160002060080173__../../eth/contracts/StringSetLib.sol__63411565559091856040518363ffffffff1660e060020a0281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156123ef5781810151838201526020016123d7565b50505050905090810190601f16801561241c5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561243a57600080fd5b505af415801561244e573d6000803e3d6000fd5b505050506040513d602081101561246457600080fd5b50519392505050565b600160205260009081526040902054600160a060020a031681565b6000806000806002600061249b886139d6565b81526020810191909152604001600020805490915060ff1615156124f7576040805160e560020a62461bcd0281526020600482015260136024820152600080516020613d0a833981519152604482015290519081900360640190fd5b60408051600080516020613d4a8339815191528152600b8301600482018181526024830193845288516044840152885173__../../eth/contracts/StringSetLib.sol__946341156555948b9392606490910190602085019080838360005b8381101561256f578181015183820152602001612557565b50505050905090810190601f16801561259c5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156125ba57600080fd5b505af41580156125ce573d6000803e3d6000fd5b505050506040513d60208110156125e457600080fd5b505160408051600080516020613d4a833981519152815260088401600482018181526024830193845289516044840152895173__../../eth/contracts/StringSetLib.sol__946341156555948c9392606490910190602085019080838360005b8381101561265e578181015183820152602001612646565b50505050905090810190601f16801561268b5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156126a957600080fd5b505af41580156126bd573d6000803e3d6000fd5b505050506040513d60208110156126d357600080fd5b505160408051600080516020613d4a83398151915281526005850160048201818152602483019384528a5160448401528a5173__../../eth/contracts/StringSetLib.sol__946341156555948d9392606490910190602085019080838360005b8381101561274d578181015183820152602001612735565b50505050905090810190601f16801561277a5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561279857600080fd5b505af41580156127ac573d6000803e3d6000fd5b505050506040513d60208110156127c257600080fd5b505191955093509150509250925092565b60006127df3387611837565b1515612835576040805160e560020a62461bcd02815260206004820152601460248201527f796f7520617265206e6f7420616e2061646d696e000000000000000000000000604482015290519081900360640190fd5b60026000612842886139d6565b81526020810191909152604001600020805490915060ff16151561289e576040805160e560020a62461bcd0281526020600482015260136024820152600080516020613d0a833981519152604482015290519081900360640190fd5b83156129995760408051600080516020613d2a8339815191528152600b8301600482018181526024830193845288516044840152885173__../../eth/contracts/StringSetLib.sol__9463524e643b948b9392606490910190602085019080838360005b8381101561291c578181015183820152602001612904565b50505050905090810190601f1680156129495780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561296757600080fd5b505af415801561297b573d6000803e3d6000fd5b505050506040513d602081101561299157600080fd5b50612a899050565b60408051600080516020613cca8339815191528152600b8301600482018181526024830193845288516044840152885173__../../eth/contracts/StringSetLib.sol__94634cab0b15948b9392606490910190602085019080838360005b83811015612a115781810151838201526020016129f9565b50505050905090810190601f168015612a3e5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612a5c57600080fd5b505af4158015612a70573d6000803e3d6000fd5b505050506040513d6020811015612a8657600080fd5b50505b8215612b845760408051600080516020613d2a833981519152815260088301600482018181526024830193845288516044840152885173__../../eth/contracts/StringSetLib.sol__9463524e643b948b9392606490910190602085019080838360005b83811015612b07578181015183820152602001612aef565b50505050905090810190601f168015612b345780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612b5257600080fd5b505af4158015612b66573d6000803e3d6000fd5b505050506040513d6020811015612b7c57600080fd5b50612c749050565b60408051600080516020613cca833981519152815260088301600482018181526024830193845288516044840152885173__../../eth/contracts/StringSetLib.sol__94634cab0b15948b9392606490910190602085019080838360005b83811015612bfc578181015183820152602001612be4565b50505050905090810190601f168015612c295780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612c4757600080fd5b505af4158015612c5b573d6000803e3d6000fd5b505050506040513d6020811015612c7157600080fd5b50505b8115612d6f5760408051600080516020613d2a833981519152815260058301600482018181526024830193845288516044840152885173__../../eth/contracts/StringSetLib.sol__9463524e643b948b9392606490910190602085019080838360005b83811015612cf2578181015183820152602001612cda565b50505050905090810190601f168015612d1f5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612d3d57600080fd5b505af4158015612d51573d6000803e3d6000fd5b505050506040513d6020811015612d6757600080fd5b50612e5f9050565b60408051600080516020613cca833981519152815260058301600482018181526024830193845288516044840152885173__../../eth/contracts/StringSetLib.sol__94634cab0b15948b9392606490910190602085019080838360005b83811015612de7578181015183820152602001612dcf565b50505050905090810190601f168015612e145780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612e3257600080fd5b505af4158015612e46573d6000803e3d6000fd5b505050506040513d6020811015612e5c57600080fd5b50505b505050505050565b6000612e733383611837565b1515612eef576040805160e560020a62461bcd02815260206004820152602160248201527f796f7520617265206e6f7420616e2061646d696e206f6620746869732072657060448201527f6f00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60026000612efc846139d6565b81526020810191909152604001600020805490915060ff161515612f6a576040805160e560020a62461bcd02815260206004820152601860248201527f74686973207265706f20646f6573206e6f742065786973740000000000000000604482015290519081900360640190fd5b60026000612f77846139d6565b815260208101919091526040016000908120805460ff19168155906001820181612fa18282613c08565b5050600582016000612fb38282613c08565b5050600882016000612fc58282613c08565b5050600b82016000612fd78282613c08565b505050600e01805460ff191690556040518251839190819060208401908083835b602083106130175780518252601f199092019160209182019101612ff8565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad9160009150a35050565b3360009081526020818152604080832080548251601f6002600019610100600186161502019093169290920491820185900485028101850190935280835261310d938301828280156131025780601f106130d757610100808354040283529160200191613102565b820191906000526020600020905b8154815290600101906020018083116130e557829003601f168201915b505050505084612355565b1515613163576040805160e560020a62461bcd02815260206004820152601a60248201527f796f7520646f6e27742068617665207075736820616363657373000000000000604482015290519081900360640190fd5b60026000613170856139d6565b81526020810191909152604001600020805490915060ff1615156131cc576040805160e560020a62461bcd0281526020600482015260136024820152600080516020613d0a833981519152604482015290519081900360640190fd5b60408051600080516020613cca833981519152815260018301600482018181526024830193845285516044840152855173__../../eth/contracts/StringSetLib.sol__94634cab0b1594889392606490910190602085019080838360005b8381101561324457818101518382015260200161322c565b50505050905090810190601f1680156132715780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561328f57600080fd5b505af41580156132a3573d6000803e3d6000fd5b505050506040513d60208110156132b957600080fd5b50506004810160006132ca846139d6565b8152602081019190915260400160009081206132e591613c29565b816040518082805190602001908083835b602083106133155780518252601f1990920191602091820191016132f6565b51815160209384036101000a6000190180199092169116179052604051919093018190038120885190955088945090928392508401908083835b6020831061336e5780518252601f19909201916020918201910161334f565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507ff7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef05499160009150a4505050565b6000600260006133d6846139d6565b6000191660001916815260200190815260200160002060050173__../../eth/contracts/StringSetLib.sol__63411565559091856040518363ffffffff1660e060020a028152600401808381526020018060200182810382528381815181526020019150805190602001908083836000838110156123ef5781810151838201526020016123d7565b60008082511115156134e2576040805160e560020a62461bcd02815260206004820152602360248201527f617267756d656e742027757365726e616d65272063616e6e6f7420626520656d60448201527f7074790000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152602081905260409020546002600019610100600184161502019091160415613580576040805160e560020a62461bcd02815260206004820152602a60248201527f796f7572206164647265737320616c72656164792062656c6f6e677320746f2060448201527f6120757365726e616d6500000000000000000000000000000000000000000000606482015290519081900360840190fd5b613589826139d6565b600081815260016020526040902054909150600160a060020a0316156135f9576040805160e560020a62461bcd02815260206004820181905260248201527f7468697320757365726e616d6520697320616c726561647920636c61696d6564604482015290519081900360640190fd5b33600090815260208181526040909120835161361792850190613b8a565b50600081815260016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916331790559051835184928291908401908083835b602083106136765780518252601f199092019160209182019101613657565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507faffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d999160009150a35050565b6000806136da836139d6565b6000818152600260205260409020600e015490915060ff1615156137015760019150613806565b60008181526002602090815260408083208151600080516020613d4a8339815191528152600b909101600482018181526024830193845289516044840152895173__../../eth/contracts/StringSetLib.sol__9663411565559693958c959394909360640192908601918190849084905b8381101561378c578181015183820152602001613774565b50505050905090810190601f1680156137b95780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156137d757600080fd5b505af41580156137eb573d6000803e3d6000fd5b505050506040513d602081101561380157600080fd5b505191505b5092915050565b60006002600061381c846139d6565b815260208082019290925260409081016000208151600080516020613cea833981519152815260019091016004820152905173__../../eth/contracts/StringSetLib.sol__9263248613469260248082019391829003018186803b15801561388557600080fd5b505af4158015613899573d6000803e3d6000fd5b505050506040513d60208110156138af57600080fd5b505192915050565b60606000600260006138c8866139d6565b81526020810191909152604001600020805490915060ff161515613924576040805160e560020a62461bcd0281526020600482015260136024820152600080516020613d0a833981519152604482015290519081900360640190fd5b806004016000613933856139d6565b815260208082019290925260409081016000208054825160026000196001841615610100020190921691909104601f8101859004850282018501909352828152929091908301828280156139c85780601f1061399d576101008083540402835291602001916139c8565b820191906000526020600020905b8154815290600101906020018083116139ab57829003601f168201915b505050505091505092915050565b6000816040516020018082805190602001908083835b60208310613a0b5780518252601f1990920191602091820191016139ec565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310613a6e5780518252601f199092019160209182019101613a4f565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b8260005b6020811015613b0857818160208110613ab957fe5b1a60f860020a0284848301815181101515613ad057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101613aa4565b5050505050565b60005b8351811015613b84578381815181101515613b2957fe5b90602001015160f860020a900460f860020a0283838301815181101515613b4c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101613b12565b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613bcb57805160ff1916838001178555613bf8565b82800160010185558215613bf8579182015b82811115613bf8578251825591602001919060010190613bdd565b50613c04929150613c69565b5090565b5080546000825590600052602060002090810190613c269190613c86565b50565b50805460018160011615610100020316600290046000825580601f10613c4f5750613c26565b601f016020900490600052602060002090810190613c2691905b613c8391905b80821115613c045760008155600101613c6f565b90565b613c8391905b80821115613c04576000613ca08282613c29565b50600101613c8c560029b97ab6000000000000000000000000000000000000000000000000000000004cab0b150000000000000000000000000000000000000000000000000000000024861346000000000000000000000000000000000000000000000000000000007265706f20646f6573206e6f7420657869737400000000000000000000000000524e643b000000000000000000000000000000000000000000000000000000004115655500000000000000000000000000000000000000000000000000000000a165627a7a72305820b3e40c78e2d63f180f5e974fd82c95c8fcfad2eb2abc9424f3bf6deed34485490029`

// DeployProtocol deploys a new Ethereum contract, binding an instance of Protocol to it.
func DeployProtocol(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Protocol, error) {
	parsed, err := abi.JSON(strings.NewReader(ProtocolABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProtocolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Protocol{ProtocolCaller: ProtocolCaller{contract: contract}, ProtocolTransactor: ProtocolTransactor{contract: contract}, ProtocolFilterer: ProtocolFilterer{contract: contract}}, nil
}

// Protocol is an auto generated Go binding around an Ethereum contract.
type Protocol struct {
	ProtocolCaller     // Read-only binding to the contract
	ProtocolTransactor // Write-only binding to the contract
	ProtocolFilterer   // Log filterer for contract events
}

// ProtocolCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProtocolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProtocolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProtocolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProtocolSession struct {
	Contract     *Protocol         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProtocolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProtocolCallerSession struct {
	Contract *ProtocolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ProtocolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProtocolTransactorSession struct {
	Contract     *ProtocolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ProtocolRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProtocolRaw struct {
	Contract *Protocol // Generic contract binding to access the raw methods on
}

// ProtocolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProtocolCallerRaw struct {
	Contract *ProtocolCaller // Generic read-only contract binding to access the raw methods on
}

// ProtocolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProtocolTransactorRaw struct {
	Contract *ProtocolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProtocol creates a new instance of Protocol, bound to a specific deployed contract.
func NewProtocol(address common.Address, backend bind.ContractBackend) (*Protocol, error) {
	contract, err := bindProtocol(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Protocol{ProtocolCaller: ProtocolCaller{contract: contract}, ProtocolTransactor: ProtocolTransactor{contract: contract}, ProtocolFilterer: ProtocolFilterer{contract: contract}}, nil
}

// NewProtocolCaller creates a new read-only instance of Protocol, bound to a specific deployed contract.
func NewProtocolCaller(address common.Address, caller bind.ContractCaller) (*ProtocolCaller, error) {
	contract, err := bindProtocol(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProtocolCaller{contract: contract}, nil
}

// NewProtocolTransactor creates a new write-only instance of Protocol, bound to a specific deployed contract.
func NewProtocolTransactor(address common.Address, transactor bind.ContractTransactor) (*ProtocolTransactor, error) {
	contract, err := bindProtocol(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProtocolTransactor{contract: contract}, nil
}

// NewProtocolFilterer creates a new log filterer instance of Protocol, bound to a specific deployed contract.
func NewProtocolFilterer(address common.Address, filterer bind.ContractFilterer) (*ProtocolFilterer, error) {
	contract, err := bindProtocol(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProtocolFilterer{contract: contract}, nil
}

// bindProtocol binds a generic wrapper to an already deployed contract.
func bindProtocol(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProtocolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Protocol *ProtocolRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Protocol.Contract.ProtocolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Protocol *ProtocolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Protocol.Contract.ProtocolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Protocol *ProtocolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Protocol.Contract.ProtocolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Protocol *ProtocolCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Protocol.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Protocol *ProtocolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Protocol.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Protocol *ProtocolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Protocol.Contract.contract.Transact(opts, method, params...)
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressHasPullAccess(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressHasPullAccess", addr, repoID)
	return *ret0, err
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressHasPullAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPullAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressHasPullAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPullAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressHasPushAccess(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressHasPushAccess", addr, repoID)
	return *ret0, err
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressHasPushAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPushAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressHasPushAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPushAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressIsAdmin(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressIsAdmin", addr, repoID)
	return *ret0, err
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressIsAdmin(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressIsAdmin(&_Protocol.CallOpts, addr, repoID)
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressIsAdmin(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressIsAdmin(&_Protocol.CallOpts, addr, repoID)
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolCaller) AddressesByUsername(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressesByUsername", arg0)
	return *ret0, err
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolSession) AddressesByUsername(arg0 [32]byte) (common.Address, error) {
	return _Protocol.Contract.AddressesByUsername(&_Protocol.CallOpts, arg0)
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolCallerSession) AddressesByUsername(arg0 [32]byte) (common.Address, error) {
	return _Protocol.Contract.AddressesByUsername(&_Protocol.CallOpts, arg0)
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolCaller) GetAddressForUsername(opts *bind.CallOpts, username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "getAddressForUsername", username)
	return *ret0, err
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolSession) GetAddressForUsername(username string) (common.Address, error) {
	return _Protocol.Contract.GetAddressForUsername(&_Protocol.CallOpts, username)
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolCallerSession) GetAddressForUsername(username string) (common.Address, error) {
	return _Protocol.Contract.GetAddressForUsername(&_Protocol.CallOpts, username)
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(string)
func (_Protocol *ProtocolCaller) GetRef(opts *bind.CallOpts, repoID string, refName string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "getRef", repoID, refName)
	return *ret0, err
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(string)
func (_Protocol *ProtocolSession) GetRef(repoID string, refName string) (string, error) {
	return _Protocol.Contract.GetRef(&_Protocol.CallOpts, repoID, refName)
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(string)
func (_Protocol *ProtocolCallerSession) GetRef(repoID string, refName string) (string, error) {
	return _Protocol.Contract.GetRef(&_Protocol.CallOpts, repoID, refName)
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCaller) GetRefs(opts *bind.CallOpts, repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	ret := new(struct {
		Total *big.Int
		Data  []byte
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getRefs", repoID, pageSize, page)
	return *ret, err
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolSession) GetRefs(repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRefs(&_Protocol.CallOpts, repoID, pageSize, page)
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCallerSession) GetRefs(repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRefs(&_Protocol.CallOpts, repoID, pageSize, page)
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCaller) GetRepoUsers(opts *bind.CallOpts, repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	ret := new(struct {
		Total *big.Int
		Data  []byte
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getRepoUsers", repoID, whichUsers, pageSize, page)
	return *ret, err
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolSession) GetRepoUsers(repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRepoUsers(&_Protocol.CallOpts, repoID, whichUsers, pageSize, page)
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCallerSession) GetRepoUsers(repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRepoUsers(&_Protocol.CallOpts, repoID, whichUsers, pageSize, page)
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolCaller) GetUserPermissions(opts *bind.CallOpts, repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	ret := new(struct {
		Puller bool
		Pusher bool
		Admin  bool
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getUserPermissions", repoID, username)
	return *ret, err
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolSession) GetUserPermissions(repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	return _Protocol.Contract.GetUserPermissions(&_Protocol.CallOpts, repoID, username)
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolCallerSession) GetUserPermissions(repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	return _Protocol.Contract.GetUserPermissions(&_Protocol.CallOpts, repoID, username)
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolCaller) NumRefs(opts *bind.CallOpts, repoID string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "numRefs", repoID)
	return *ret0, err
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolSession) NumRefs(repoID string) (*big.Int, error) {
	return _Protocol.Contract.NumRefs(&_Protocol.CallOpts, repoID)
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolCallerSession) NumRefs(repoID string) (*big.Int, error) {
	return _Protocol.Contract.NumRefs(&_Protocol.CallOpts, repoID)
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) RepoExists(opts *bind.CallOpts, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "repoExists", repoID)
	return *ret0, err
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) RepoExists(repoID string) (bool, error) {
	return _Protocol.Contract.RepoExists(&_Protocol.CallOpts, repoID)
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) RepoExists(repoID string) (bool, error) {
	return _Protocol.Contract.RepoExists(&_Protocol.CallOpts, repoID)
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserHasPullAccess(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userHasPullAccess", username, repoID)
	return *ret0, err
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserHasPullAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPullAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserHasPullAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPullAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserHasPushAccess(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userHasPushAccess", username, repoID)
	return *ret0, err
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserHasPushAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPushAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserHasPushAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPushAccess(&_Protocol.CallOpts, username, repoID)
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserIsAdmin(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userIsAdmin", username, repoID)
	return *ret0, err
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserIsAdmin(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserIsAdmin(&_Protocol.CallOpts, username, repoID)
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserIsAdmin(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserIsAdmin(&_Protocol.CallOpts, username, repoID)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolCaller) UsernamesByAddress(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "usernamesByAddress", arg0)
	return *ret0, err
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolSession) UsernamesByAddress(arg0 common.Address) (string, error) {
	return _Protocol.Contract.UsernamesByAddress(&_Protocol.CallOpts, arg0)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolCallerSession) UsernamesByAddress(arg0 common.Address) (string, error) {
	return _Protocol.Contract.UsernamesByAddress(&_Protocol.CallOpts, arg0)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolTransactor) CreateRepo(opts *bind.TransactOpts, repoID string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "createRepo", repoID)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolSession) CreateRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.CreateRepo(&_Protocol.TransactOpts, repoID)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolTransactorSession) CreateRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.CreateRepo(&_Protocol.TransactOpts, repoID)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolTransactor) DeleteRef(opts *bind.TransactOpts, repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "deleteRef", repoID, refName)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolSession) DeleteRef(repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRef(&_Protocol.TransactOpts, repoID, refName)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolTransactorSession) DeleteRef(repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRef(&_Protocol.TransactOpts, repoID, refName)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolTransactor) DeleteRepo(opts *bind.TransactOpts, repoID string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "deleteRepo", repoID)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolSession) DeleteRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRepo(&_Protocol.TransactOpts, repoID)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolTransactorSession) DeleteRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRepo(&_Protocol.TransactOpts, repoID)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolTransactor) SetUserPermissions(opts *bind.TransactOpts, repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setUserPermissions", repoID, username, puller, pusher, admin)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolSession) SetUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetUserPermissions(&_Protocol.TransactOpts, repoID, username, puller, pusher, admin)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolTransactorSession) SetUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetUserPermissions(&_Protocol.TransactOpts, repoID, username, puller, pusher, admin)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolTransactor) SetUsername(opts *bind.TransactOpts, username string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setUsername", username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolSession) SetUsername(username string) (*types.Transaction, error) {
	return _Protocol.Contract.SetUsername(&_Protocol.TransactOpts, username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolTransactorSession) SetUsername(username string) (*types.Transaction, error) {
	return _Protocol.Contract.SetUsername(&_Protocol.TransactOpts, username)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x605a5dd8.
//
// Solidity: function updateRef(repoID string, refName string, commitHash string) returns()
func (_Protocol *ProtocolTransactor) UpdateRef(opts *bind.TransactOpts, repoID string, refName string, commitHash string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "updateRef", repoID, refName, commitHash)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x605a5dd8.
//
// Solidity: function updateRef(repoID string, refName string, commitHash string) returns()
func (_Protocol *ProtocolSession) UpdateRef(repoID string, refName string, commitHash string) (*types.Transaction, error) {
	return _Protocol.Contract.UpdateRef(&_Protocol.TransactOpts, repoID, refName, commitHash)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x605a5dd8.
//
// Solidity: function updateRef(repoID string, refName string, commitHash string) returns()
func (_Protocol *ProtocolTransactorSession) UpdateRef(repoID string, refName string, commitHash string) (*types.Transaction, error) {
	return _Protocol.Contract.UpdateRef(&_Protocol.TransactOpts, repoID, refName, commitHash)
}

// ProtocolLogCreateRepoIterator is returned from FilterLogCreateRepo and is used to iterate over the raw logs and unpacked data for LogCreateRepo events raised by the Protocol contract.
type ProtocolLogCreateRepoIterator struct {
	Event *ProtocolLogCreateRepo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogCreateRepoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogCreateRepo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogCreateRepo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogCreateRepoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogCreateRepoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogCreateRepo represents a LogCreateRepo event raised by the Protocol contract.
type ProtocolLogCreateRepo struct {
	User   common.Address
	RepoID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogCreateRepo is a free log retrieval operation binding the contract event 0x967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae8529.
//
// Solidity: e LogCreateRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) FilterLogCreateRepo(opts *bind.FilterOpts, user []common.Address, repoID []string) (*ProtocolLogCreateRepoIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogCreateRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogCreateRepoIterator{contract: _Protocol.contract, event: "LogCreateRepo", logs: logs, sub: sub}, nil
}

// WatchLogCreateRepo is a free log subscription operation binding the contract event 0x967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae8529.
//
// Solidity: e LogCreateRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) WatchLogCreateRepo(opts *bind.WatchOpts, sink chan<- *ProtocolLogCreateRepo, user []common.Address, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogCreateRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogCreateRepo)
				if err := _Protocol.contract.UnpackLog(event, "LogCreateRepo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogDeleteRefIterator is returned from FilterLogDeleteRef and is used to iterate over the raw logs and unpacked data for LogDeleteRef events raised by the Protocol contract.
type ProtocolLogDeleteRefIterator struct {
	Event *ProtocolLogDeleteRef // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogDeleteRefIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogDeleteRef)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogDeleteRef)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogDeleteRefIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogDeleteRefIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogDeleteRef represents a LogDeleteRef event raised by the Protocol contract.
type ProtocolLogDeleteRef struct {
	User    common.Address
	RepoID  common.Hash
	RefName common.Hash
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterLogDeleteRef is a free log retrieval operation binding the contract event 0xf7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef0549.
//
// Solidity: e LogDeleteRef(user indexed address, repoID indexed string, refName indexed string)
func (_Protocol *ProtocolFilterer) FilterLogDeleteRef(opts *bind.FilterOpts, user []common.Address, repoID []string, refName []string) (*ProtocolLogDeleteRefIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogDeleteRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogDeleteRefIterator{contract: _Protocol.contract, event: "LogDeleteRef", logs: logs, sub: sub}, nil
}

// WatchLogDeleteRef is a free log subscription operation binding the contract event 0xf7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef0549.
//
// Solidity: e LogDeleteRef(user indexed address, repoID indexed string, refName indexed string)
func (_Protocol *ProtocolFilterer) WatchLogDeleteRef(opts *bind.WatchOpts, sink chan<- *ProtocolLogDeleteRef, user []common.Address, repoID []string, refName []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogDeleteRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogDeleteRef)
				if err := _Protocol.contract.UnpackLog(event, "LogDeleteRef", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogDeleteRepoIterator is returned from FilterLogDeleteRepo and is used to iterate over the raw logs and unpacked data for LogDeleteRepo events raised by the Protocol contract.
type ProtocolLogDeleteRepoIterator struct {
	Event *ProtocolLogDeleteRepo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogDeleteRepoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogDeleteRepo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogDeleteRepo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogDeleteRepoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogDeleteRepoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogDeleteRepo represents a LogDeleteRepo event raised by the Protocol contract.
type ProtocolLogDeleteRepo struct {
	User   common.Address
	RepoID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogDeleteRepo is a free log retrieval operation binding the contract event 0x2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad.
//
// Solidity: e LogDeleteRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) FilterLogDeleteRepo(opts *bind.FilterOpts, user []common.Address, repoID []string) (*ProtocolLogDeleteRepoIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogDeleteRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogDeleteRepoIterator{contract: _Protocol.contract, event: "LogDeleteRepo", logs: logs, sub: sub}, nil
}

// WatchLogDeleteRepo is a free log subscription operation binding the contract event 0x2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad.
//
// Solidity: e LogDeleteRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) WatchLogDeleteRepo(opts *bind.WatchOpts, sink chan<- *ProtocolLogDeleteRepo, user []common.Address, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogDeleteRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogDeleteRepo)
				if err := _Protocol.contract.UnpackLog(event, "LogDeleteRepo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogSetUsernameIterator is returned from FilterLogSetUsername and is used to iterate over the raw logs and unpacked data for LogSetUsername events raised by the Protocol contract.
type ProtocolLogSetUsernameIterator struct {
	Event *ProtocolLogSetUsername // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogSetUsernameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogSetUsername)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogSetUsername)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogSetUsernameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogSetUsernameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogSetUsername represents a LogSetUsername event raised by the Protocol contract.
type ProtocolLogSetUsername struct {
	Addr     common.Address
	Username common.Hash
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogSetUsername is a free log retrieval operation binding the contract event 0xaffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d99.
//
// Solidity: e LogSetUsername(addr indexed address, username indexed string)
func (_Protocol *ProtocolFilterer) FilterLogSetUsername(opts *bind.FilterOpts, addr []common.Address, username []string) (*ProtocolLogSetUsernameIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogSetUsername", addrRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogSetUsernameIterator{contract: _Protocol.contract, event: "LogSetUsername", logs: logs, sub: sub}, nil
}

// WatchLogSetUsername is a free log subscription operation binding the contract event 0xaffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d99.
//
// Solidity: e LogSetUsername(addr indexed address, username indexed string)
func (_Protocol *ProtocolFilterer) WatchLogSetUsername(opts *bind.WatchOpts, sink chan<- *ProtocolLogSetUsername, addr []common.Address, username []string) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogSetUsername", addrRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogSetUsername)
				if err := _Protocol.contract.UnpackLog(event, "LogSetUsername", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogUpdateRefIterator is returned from FilterLogUpdateRef and is used to iterate over the raw logs and unpacked data for LogUpdateRef events raised by the Protocol contract.
type ProtocolLogUpdateRefIterator struct {
	Event *ProtocolLogUpdateRef // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogUpdateRefIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogUpdateRef)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogUpdateRef)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogUpdateRefIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogUpdateRefIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogUpdateRef represents a LogUpdateRef event raised by the Protocol contract.
type ProtocolLogUpdateRef struct {
	User       common.Address
	RepoID     common.Hash
	RefName    common.Hash
	CommitHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogUpdateRef is a free log retrieval operation binding the contract event 0xc77d795c5ada12e6e61f6ca6c04423828f0660699387fefc548700aad589669b.
//
// Solidity: e LogUpdateRef(user indexed address, repoID indexed string, refName indexed string, commitHash string)
func (_Protocol *ProtocolFilterer) FilterLogUpdateRef(opts *bind.FilterOpts, user []common.Address, repoID []string, refName []string) (*ProtocolLogUpdateRefIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogUpdateRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogUpdateRefIterator{contract: _Protocol.contract, event: "LogUpdateRef", logs: logs, sub: sub}, nil
}

// WatchLogUpdateRef is a free log subscription operation binding the contract event 0xc77d795c5ada12e6e61f6ca6c04423828f0660699387fefc548700aad589669b.
//
// Solidity: e LogUpdateRef(user indexed address, repoID indexed string, refName indexed string, commitHash string)
func (_Protocol *ProtocolFilterer) WatchLogUpdateRef(opts *bind.WatchOpts, sink chan<- *ProtocolLogUpdateRef, user []common.Address, repoID []string, refName []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogUpdateRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogUpdateRef)
				if err := _Protocol.contract.UnpackLog(event, "LogUpdateRef", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
