// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nodeeth

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// ProtocolABI is the input ABI used to generate the binding from.
const ProtocolABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getAddressForUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"whichUsers\",\"type\":\"uint8\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getRepoUsers\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressHasPushAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usernamesByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressHasPullAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"createRepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"repoExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"},{\"name\":\"commitHash\",\"type\":\"string\"}],\"name\":\"updateRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getRefs\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userHasPushAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addressesByUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"deleteRepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"deleteRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userHasPullAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"numRefs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"getRef\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"LogSetUsername\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"LogCreateRepo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"LogDeleteRepo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"refName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"commitHash\",\"type\":\"string\"}],\"name\":\"LogUpdateRef\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"LogDeleteRef\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"username\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"LogSetAdmin\",\"type\":\"event\"}]"

// ProtocolBin is the compiled bytecode used for deploying new contracts.
const ProtocolBin = `0x608060405234801561001057600080fd5b50613152806100206000396000f3006080604052600436106100f85763ffffffff60e060020a600035041663095a053581146100fd5780631ccd4912146101725780632b133be0146102595780632d53f6ea146102d457806342dfb6da1461036f5780634d6e93cb146104055780634fa94bea1461046c57806353dad777146104c7578063592c6a0f1461052e578063605a5dd8146105875780636735c5771461065c5780637bbaf159146106be578063a58e325c14610755578063d51c250c1461076d578063e07a896d146107c6578063ec6761891461085d578063ed59313a146108f4578063ede07dfe1461094d578063f2ebfa10146109e4578063f6ce75b314610a4f575b600080fd5b34801561010957600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610156943694929360249392840191908190840183828082843750949750610ae69650505050505050565b60408051600160a060020a039092168252519081900360200190f35b34801561017e57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101da9436949293602493928401919081908401838280828437509497505050833560ff1694505050602082013591604001359050610b15565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561021d578181015183820152602001610205565b50505050905090810190601f16801561024a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561026557600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102c0958335600160a060020a0316953695604494919390910191908190840183828082843750949750610fc49650505050505050565b604080519115158252519081900360200190f35b3480156102e057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102c094369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750505050913515159250611072915050565b34801561037b57600080fd5b50610390600160a060020a036004351661142e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103ca5781810151838201526020016103b2565b50505050905090810190601f1680156103f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041157600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102c0958335600160a060020a03169536956044949193909101919081908401838280828437509497506114c89650505050505050565b34801561047857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104c594369492936024939284019190819084018382808284375094975061156f9650505050505050565b005b3480156104d357600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102c0958335600160a060020a03169536956044949193909101919081908401838280828437509497506119bd9650505050505050565b34801561053a57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102c0943694929360249392840191908190840183828082843750949750611a649650505050505050565b34801561059357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104c594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750611a8d9650505050505050565b34801561066857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101da943694929360249392840191908190840183828082843750949750508435955050506020909201359150611de69050565b3480156106ca57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102c094369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506123d39650505050505050565b34801561076157600080fd5b506101566004356124eb565b34801561077957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104c59436949293602493928401919081908401838280828437509497506125069650505050505050565b3480156107d257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104c594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506126529650505050505050565b34801561086957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102c094369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506129389650505050505050565b34801561090057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104c59436949293602493928401919081908401838280828437509497506129d19650505050505050565b34801561095957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102c094369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612b129650505050505050565b3480156109f057600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610a3d943694929360249392840191908190840183828082843750949750612c639650505050505050565b60408051918252519081900360200190f35b348015610a5b57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261039094369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612d0d9650505050505050565b600060016000610af584612df3565b8152602081019190915260400160002054600160a060020a031692915050565b60006060600080606060008060008060026000610b318f612df3565b81526020810191909152604001600020805490975060ff161515610b5457600080fd5b60008c6002811115610b6257fe5b1415610b7357866005019550610bad565b60018c6002811115610b8157fe5b1415610b925786600b019550610bad565b60028c6002811115610ba057fe5b1415610bad578660080195505b600093508a8a029250600091505b8a82108015610c4a57508573__../../eth/contracts/StringSetLib.sol__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015610c1957600080fd5b505af4158015610c2d573d6000803e3d6000fd5b505050506040513d6020811015610c4357600080fd5b5051828401105b15610d4f57604080516000805160206130c78339815191528152600481018890528385016024820152905173__../../eth/contracts/StringSetLib.sol__916329b97ab6916044808301926000929190829003018186803b158015610cb057600080fd5b505af4158015610cc4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610ced57600080fd5b810190808051640100000000811115610d0557600080fd5b82016020810184811115610d1857600080fd5b8151640100000000811182820187101715610d3257600080fd5b505080519098509690960160200195505060019092019150610bbb565b836040519080825280601f01601f191660200182016040528015610d7d578160200160208202803883390190505b50975060009050600091505b8a82108015610e1857508573__../../eth/contracts/StringSetLib.sol__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015610de757600080fd5b505af4158015610dfb573d6000803e3d6000fd5b505050506040513d6020811015610e1157600080fd5b5051828401105b15610f3257604080516000805160206130c78339815191528152600481018890528385016024820152905173__../../eth/contracts/StringSetLib.sol__916329b97ab6916044808301926000929190829003018186803b158015610e7e57600080fd5b505af4158015610e92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610ebb57600080fd5b810190808051640100000000811115610ed357600080fd5b82016020810184811115610ee657600080fd5b8151640100000000811182820187101715610f0057600080fd5b50509291905050509450610f1685518983612ebd565b602001610f24858983612f2c565b845160019092019101610d89565b8573__../../eth/contracts/StringSetLib.sol__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015610f8657600080fd5b505af4158015610f9a573d6000803e3d6000fd5b505050506040513d6020811015610fb057600080fd5b505198505050505050505094509492505050565b600160a060020a03821660009081526020818152604080832080548251601f6002600019610100600186161502019093169290920491820185900485028101850190935280835261106b938301828280156110605780601f1061103557610100808354040283529160200191611060565b820191906000526020600020905b81548152906001019060200180831161104357829003601f168201915b5050505050836123d3565b9392505050565b336000908152602081815260408083208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152849386151593611116939183018282801561110b5780601f106110e05761010080835404028352916020019161110b565b820191906000526020600020905b8154815290600101906020018083116110ee57829003601f168201915b505050505086612938565b1515141561112357600080fd5b6002600061113086612df3565b815260208101919091526040016000209050821561123d5760408051600080516020613107833981519152815260058301600482018181526024830193845288516044840152885173__../../eth/contracts/StringSetLib.sol__9463524e643b948b9392606490910190602085019080838360005b838110156111c05781810151838201526020016111a8565b50505050905090810190601f1680156111ed5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561120b57600080fd5b505af415801561121f573d6000803e3d6000fd5b505050506040513d602081101561123557600080fd5b5061133f9050565b604080517f4cab0b1500000000000000000000000000000000000000000000000000000000815260058301600482018181526024830193845288516044840152885173__../../eth/contracts/StringSetLib.sol__94634cab0b15948b9392606490910190602085019080838360005b838110156112c75781810151838201526020016112af565b50505050905090810190601f1680156112f45780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561131257600080fd5b505af4158015611326573d6000803e3d6000fd5b505050506040513d602081101561133c57600080fd5b50505b836040518082805190602001908083835b6020831061136f5780518252601f199092019160209182019101611350565b51815160209384036101000a60001901801990921691161790526040519190930181900381208a519095508a945090928392508401908083835b602083106113c85780518252601f1990920191602091820191016113a9565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208a1515835293519395503394507f9bd62abf5ed528f5bd9749cc45fe78c5a51e3912dc5a750899d5cb3555df0f079391829003019150a4509392505050565b600060208181529181526040908190208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156114c05780601f10611495576101008083540402835291602001916114c0565b820191906000526020600020905b8154815290600101906020018083116114a357829003601f168201915b505050505081565b600160a060020a03821660009081526020818152604080832080548251601f6002600019610100600186161502019093169290920491820185900485028101850190935280835261106b938301828280156115645780601f1061153957610100808354040283529160200191611564565b820191906000526020600020905b81548152906001019060200180831161154757829003601f168201915b505050505083612b12565b6060600080835111151561158257600080fd5b336000908152602081815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156116145780601f106115e957610100808354040283529160200191611614565b820191906000526020600020905b8154815290600101906020018083116115f757829003601f168201915b505050505091506000825111151561162b57600080fd5b6002600061163885612df3565b81526020810191909152604001600020805490915060ff161561165a57600080fd5b805460ff1916600117815560408051600080516020613107833981519152815260088301600482018181526024830193845285516044840152855173__../../eth/contracts/StringSetLib.sol__9463524e643b94889392606490910190602085019080838360005b838110156116dd5781810151838201526020016116c5565b50505050905090810190601f16801561170a5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561172857600080fd5b505af415801561173c573d6000803e3d6000fd5b505050506040513d602081101561175257600080fd5b505060408051600080516020613107833981519152815260058301600482018181526024830193845285516044840152855173__../../eth/contracts/StringSetLib.sol__9463524e643b94889392606490910190602085019080838360005b838110156117cc5781810151838201526020016117b4565b50505050905090810190601f1680156117f95780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561181757600080fd5b505af415801561182b573d6000803e3d6000fd5b505050506040513d602081101561184157600080fd5b5050604080516000805160206131078339815191528152600b8301600482018181526024830193845285516044840152855173__../../eth/contracts/StringSetLib.sol__9463524e643b94889392606490910190602085019080838360005b838110156118bb5781810151838201526020016118a3565b50505050905090810190601f1680156118e85780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561190657600080fd5b505af415801561191a573d6000803e3d6000fd5b505050506040513d602081101561193057600080fd5b50506040518351849190819060208401908083835b602083106119645780518252601f199092019160209182019101611945565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae85299160009150a3505050565b600160a060020a03821660009081526020818152604080832080548251601f6002600019610100600186161502019093169290920491820185900485028101850190935280835261106b93830182828015611a595780601f10611a2e57610100808354040283529160200191611a59565b820191906000526020600020905b815481529060010190602001808311611a3c57829003601f168201915b505050505083612938565b600060026000611a7384612df3565b815260208101919091526040016000205460ff1692915050565b3360009081526020818152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611b2b93830182828015611b205780601f10611af557610100808354040283529160200191611b20565b820191906000526020600020905b815481529060010190602001808311611b0357829003601f168201915b5050505050856123d3565b1515611b3657600080fd5b8151602814611b4457600080fd5b60026000611b5186612df3565b81526020810191909152604001600020805490915060ff161515611b7457600080fd5b60408051600080516020613107833981519152815260018301600482018181526024830193845286516044840152865173__../../eth/contracts/StringSetLib.sol__9463524e643b94899392606490910190602085019080838360005b83811015611bec578181015183820152602001611bd4565b50505050905090810190601f168015611c195780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611c3757600080fd5b505af4158015611c4b573d6000803e3d6000fd5b505050506040513d6020811015611c6157600080fd5b50829050600482016000611c7486612df3565b81526020808201929092526040016000208251611c979391929190910190612fa7565b50826040518082805190602001908083835b60208310611cc85780518252601f199092019160209182019101611ca9565b51815160209384036101000a6000190180199092169116179052604051919093018190038120895190955089945090928392508401908083835b60208310611d215780518252601f199092019160209182019101611d02565b51815160209384036101000a60001901801990921691161790526040805192909401829003822081835289518383015289519096503395507fc77d795c5ada12e6e61f6ca6c04423828f0660699387fefc548700aad589669b948a94508392908301919085019080838360005b83811015611da6578181015183820152602001611d8e565b50505050905090810190601f168015611dd35780820380516001836020036101000a031916815260200191505b509250505060405180910390a450505050565b60006060600060608060008060008060026000611e028e612df3565b81526020810191909152604001600020805490975060ff161515611e2557600080fd5b600093508a8a029250600091505b8a82108015611ec95750604080516000805160206130e78339815191528152600189016004820152905173__../../eth/contracts/StringSetLib.sol__916324861346916024808301926020929190829003018186803b158015611e9857600080fd5b505af4158015611eac573d6000803e3d6000fd5b505050506040513d6020811015611ec257600080fd5b5051828401105b1561208457604080516000805160206130c783398151915281526001890160048201528385016024820152905173__../../eth/contracts/StringSetLib.sol__916329b97ab6916044808301926000929190829003018186803b158015611f3157600080fd5b505af4158015611f45573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611f6e57600080fd5b810190808051640100000000811115611f8657600080fd5b82016020810184811115611f9957600080fd5b8151640100000000811182820187101715611fb357600080fd5b50509291905050509550866004016000611fcc88612df3565b815260208082019290925260409081016000208054825160026000196001841615610100020190921691909104601f8101859004850282018501909352828152929091908301828280156120615780601f1061203657610100808354040283529160200191612061565b820191906000526020600020905b81548152906001019060200180831161204457829003601f168201915b505050505094508451865160200160200101840193508180600101925050611e33565b836040519080825280601f01601f1916602001820160405280156120b2578160200160208202803883390190505b50975060009050600091505b8a821080156121545750604080516000805160206130e78339815191528152600189016004820152905173__../../eth/contracts/StringSetLib.sol__916324861346916024808301926020929190829003018186803b15801561212357600080fd5b505af4158015612137573d6000803e3d6000fd5b505050506040513d602081101561214d57600080fd5b5051828401105b1561233b57604080516000805160206130c783398151915281526001890160048201528385016024820152905173__../../eth/contracts/StringSetLib.sol__916329b97ab6916044808301926000929190829003018186803b1580156121bc57600080fd5b505af41580156121d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156121f957600080fd5b81019080805164010000000081111561221157600080fd5b8201602081018481111561222457600080fd5b815164010000000081118282018710171561223e57600080fd5b5050929190505050955086600401600061225788612df3565b815260208082019290925260409081016000208054825160026000196001841615610100020190921691909104601f8101859004850282018501909352828152929091908301828280156122ec5780601f106122c1576101008083540402835291602001916122ec565b820191906000526020600020905b8154815290600101906020018083116122cf57829003601f168201915b505050505094506122ff86518983612ebd565b60200161230d868983612f2c565b85518101905061231f85518983612ebd565b60200161232d858983612f2c565b8451600190920191016120be565b604080516000805160206130e78339815191528152600189016004820152905173__../../eth/contracts/StringSetLib.sol__916324861346916024808301926020929190829003018186803b15801561239657600080fd5b505af41580156123aa573d6000803e3d6000fd5b505050506040513d60208110156123c057600080fd5b5051985050505050505050935093915050565b6000600260006123e284612df3565b6000191660001916815260200190815260200160002060080173__../../eth/contracts/StringSetLib.sol__63411565559091856040518363ffffffff1660e060020a0281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561246d578181015183820152602001612455565b50505050905090810190601f16801561249a5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156124b857600080fd5b505af41580156124cc573d6000803e3d6000fd5b505050506040513d60208110156124e257600080fd5b50519392505050565b600160205260009081526040902054600160a060020a031681565b600061251233836119bd565b151561251d57600080fd5b6002600061252a84612df3565b81526020810191909152604001600020805490915060ff16151561254d57600080fd5b6002600061255a84612df3565b815260208101919091526040016000908120805460ff191681559060018201816125848282613025565b50506005820160006125968282613025565b50506008820160006125a88282613025565b5050600b820160006125ba8282613025565b505050600e01805460ff191690556040518251839190819060208401908083835b602083106125fa5780518252601f1990920191602091820191016125db565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad9160009150a35050565b3360009081526020818152604080832080548251601f600260001961010060018616150201909316929092049182018590048502810185019093528083526126f0938301828280156126e55780601f106126ba576101008083540402835291602001916126e5565b820191906000526020600020905b8154815290600101906020018083116126c857829003601f168201915b5050505050846123d3565b15156126fb57600080fd5b6002600061270885612df3565b81526020810191909152604001600020805490915060ff16151561272b57600080fd5b604080517f4cab0b1500000000000000000000000000000000000000000000000000000000815260018301600482018181526024830193845285516044840152855173__../../eth/contracts/StringSetLib.sol__94634cab0b1594889392606490910190602085019080838360005b838110156127b557818101518382015260200161279d565b50505050905090810190601f1680156127e25780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561280057600080fd5b505af4158015612814573d6000803e3d6000fd5b505050506040513d602081101561282a57600080fd5b505060048101600061283b84612df3565b81526020810191909152604001600090812061285691613046565b816040518082805190602001908083835b602083106128865780518252601f199092019160209182019101612867565b51815160209384036101000a6000190180199092169116179052604051919093018190038120885190955088945090928392508401908083835b602083106128df5780518252601f1990920191602091820191016128c0565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507ff7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef05499160009150a4505050565b60006002600061294784612df3565b6000191660001916815260200190815260200160002060050173__../../eth/contracts/StringSetLib.sol__63411565559091856040518363ffffffff1660e060020a0281526004018083815260200180602001828103825283818151815260200191508051906020019080838360008381101561246d578181015183820152602001612455565b60008082511115156129e257600080fd5b336000908152602081905260409020546002600019610100600184161502019091160415612a0f57600080fd5b612a1882612df3565b600081815260016020526040902054909150600160a060020a031615612a3d57600080fd5b336000908152602081815260409091208351612a5b92850190612fa7565b50600081815260016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916331790559051835184928291908401908083835b60208310612aba5780518252601f199092019160209182019101612a9b565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507faffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d999160009150a35050565b600080612b1e83612df3565b6000818152600260205260409020600e015490915060ff161515612b455760019150612c5c565b600081815260026020908152604080832081517f41156555000000000000000000000000000000000000000000000000000000008152600b909101600482018181526024830193845289516044840152895173__../../eth/contracts/StringSetLib.sol__9663411565559693958c959394909360640192908601918190849084905b83811015612be2578181015183820152602001612bca565b50505050905090810190601f168015612c0f5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612c2d57600080fd5b505af4158015612c41573d6000803e3d6000fd5b505050506040513d6020811015612c5757600080fd5b505191505b5092915050565b600060026000612c7284612df3565b8152602080820192909252604090810160002081516000805160206130e7833981519152815260019091016004820152905173__../../eth/contracts/StringSetLib.sol__9263248613469260248082019391829003018186803b158015612cdb57600080fd5b505af4158015612cef573d6000803e3d6000fd5b505050506040513d6020811015612d0557600080fd5b505192915050565b6060600060026000612d1e86612df3565b81526020810191909152604001600020805490915060ff161515612d4157600080fd5b806004016000612d5085612df3565b815260208082019290925260409081016000208054825160026000196001841615610100020190921691909104601f810185900485028201850190935282815292909190830182828015612de55780601f10612dba57610100808354040283529160200191612de5565b820191906000526020600020905b815481529060010190602001808311612dc857829003601f168201915b505050505091505092915050565b6000816040516020018082805190602001908083835b60208310612e285780518252601f199092019160209182019101612e09565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310612e8b5780518252601f199092019160209182019101612e6c565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b8260005b6020811015612f2557818160208110612ed657fe5b1a60f860020a0284848301815181101515612eed57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101612ec1565b5050505050565b60005b8351811015612fa1578381815181101515612f4657fe5b90602001015160f860020a900460f860020a0283838301815181101515612f6957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101612f2f565b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612fe857805160ff1916838001178555613015565b82800160010185558215613015579182015b82811115613015578251825591602001919060010190612ffa565b50613021929150613086565b5090565b508054600082559060005260206000209081019061304391906130a3565b50565b50805460018160011615610100020316600290046000825580601f1061306c5750613043565b601f01602090049060005260206000209081019061304391905b6130a091905b80821115613021576000815560010161308c565b90565b6130a091905b808211156130215760006130bd8282613046565b506001016130a9560029b97ab6000000000000000000000000000000000000000000000000000000002486134600000000000000000000000000000000000000000000000000000000524e643b00000000000000000000000000000000000000000000000000000000a165627a7a723058203500597e04b10154502e567a561cb288a826f995b1e0ce12c70765b9dd1aff900029`

// DeployProtocol deploys a new Ethereum contract, binding an instance of Protocol to it.
func DeployProtocol(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Protocol, error) {
	parsed, err := abi.JSON(strings.NewReader(ProtocolABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProtocolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Protocol{ProtocolCaller: ProtocolCaller{contract: contract}, ProtocolTransactor: ProtocolTransactor{contract: contract}, ProtocolFilterer: ProtocolFilterer{contract: contract}}, nil
}

// Protocol is an auto generated Go binding around an Ethereum contract.
type Protocol struct {
	ProtocolCaller     // Read-only binding to the contract
	ProtocolTransactor // Write-only binding to the contract
	ProtocolFilterer   // Log filterer for contract events
}

// ProtocolCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProtocolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProtocolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProtocolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProtocolSession struct {
	Contract     *Protocol         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProtocolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProtocolCallerSession struct {
	Contract *ProtocolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ProtocolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProtocolTransactorSession struct {
	Contract     *ProtocolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ProtocolRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProtocolRaw struct {
	Contract *Protocol // Generic contract binding to access the raw methods on
}

// ProtocolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProtocolCallerRaw struct {
	Contract *ProtocolCaller // Generic read-only contract binding to access the raw methods on
}

// ProtocolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProtocolTransactorRaw struct {
	Contract *ProtocolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProtocol creates a new instance of Protocol, bound to a specific deployed contract.
func NewProtocol(address common.Address, backend bind.ContractBackend) (*Protocol, error) {
	contract, err := bindProtocol(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Protocol{ProtocolCaller: ProtocolCaller{contract: contract}, ProtocolTransactor: ProtocolTransactor{contract: contract}, ProtocolFilterer: ProtocolFilterer{contract: contract}}, nil
}

// NewProtocolCaller creates a new read-only instance of Protocol, bound to a specific deployed contract.
func NewProtocolCaller(address common.Address, caller bind.ContractCaller) (*ProtocolCaller, error) {
	contract, err := bindProtocol(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProtocolCaller{contract: contract}, nil
}

// NewProtocolTransactor creates a new write-only instance of Protocol, bound to a specific deployed contract.
func NewProtocolTransactor(address common.Address, transactor bind.ContractTransactor) (*ProtocolTransactor, error) {
	contract, err := bindProtocol(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProtocolTransactor{contract: contract}, nil
}

// NewProtocolFilterer creates a new log filterer instance of Protocol, bound to a specific deployed contract.
func NewProtocolFilterer(address common.Address, filterer bind.ContractFilterer) (*ProtocolFilterer, error) {
	contract, err := bindProtocol(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProtocolFilterer{contract: contract}, nil
}

// bindProtocol binds a generic wrapper to an already deployed contract.
func bindProtocol(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProtocolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Protocol *ProtocolRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Protocol.Contract.ProtocolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Protocol *ProtocolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Protocol.Contract.ProtocolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Protocol *ProtocolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Protocol.Contract.ProtocolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Protocol *ProtocolCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Protocol.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Protocol *ProtocolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Protocol.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Protocol *ProtocolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Protocol.Contract.contract.Transact(opts, method, params...)
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressHasPullAccess(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressHasPullAccess", addr, repoID)
	return *ret0, err
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressHasPullAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPullAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressHasPullAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPullAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressHasPushAccess(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressHasPushAccess", addr, repoID)
	return *ret0, err
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressHasPushAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPushAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressHasPushAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPushAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressIsAdmin(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressIsAdmin", addr, repoID)
	return *ret0, err
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressIsAdmin(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressIsAdmin(&_Protocol.CallOpts, addr, repoID)
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressIsAdmin(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressIsAdmin(&_Protocol.CallOpts, addr, repoID)
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolCaller) AddressesByUsername(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressesByUsername", arg0)
	return *ret0, err
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolSession) AddressesByUsername(arg0 [32]byte) (common.Address, error) {
	return _Protocol.Contract.AddressesByUsername(&_Protocol.CallOpts, arg0)
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolCallerSession) AddressesByUsername(arg0 [32]byte) (common.Address, error) {
	return _Protocol.Contract.AddressesByUsername(&_Protocol.CallOpts, arg0)
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolCaller) GetAddressForUsername(opts *bind.CallOpts, username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "getAddressForUsername", username)
	return *ret0, err
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolSession) GetAddressForUsername(username string) (common.Address, error) {
	return _Protocol.Contract.GetAddressForUsername(&_Protocol.CallOpts, username)
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolCallerSession) GetAddressForUsername(username string) (common.Address, error) {
	return _Protocol.Contract.GetAddressForUsername(&_Protocol.CallOpts, username)
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(string)
func (_Protocol *ProtocolCaller) GetRef(opts *bind.CallOpts, repoID string, refName string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "getRef", repoID, refName)
	return *ret0, err
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(string)
func (_Protocol *ProtocolSession) GetRef(repoID string, refName string) (string, error) {
	return _Protocol.Contract.GetRef(&_Protocol.CallOpts, repoID, refName)
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(string)
func (_Protocol *ProtocolCallerSession) GetRef(repoID string, refName string) (string, error) {
	return _Protocol.Contract.GetRef(&_Protocol.CallOpts, repoID, refName)
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCaller) GetRefs(opts *bind.CallOpts, repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	ret := new(struct {
		Total *big.Int
		Data  []byte
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getRefs", repoID, pageSize, page)
	return *ret, err
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolSession) GetRefs(repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRefs(&_Protocol.CallOpts, repoID, pageSize, page)
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCallerSession) GetRefs(repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRefs(&_Protocol.CallOpts, repoID, pageSize, page)
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCaller) GetRepoUsers(opts *bind.CallOpts, repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	ret := new(struct {
		Total *big.Int
		Data  []byte
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getRepoUsers", repoID, whichUsers, pageSize, page)
	return *ret, err
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolSession) GetRepoUsers(repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRepoUsers(&_Protocol.CallOpts, repoID, whichUsers, pageSize, page)
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCallerSession) GetRepoUsers(repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRepoUsers(&_Protocol.CallOpts, repoID, whichUsers, pageSize, page)
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolCaller) NumRefs(opts *bind.CallOpts, repoID string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "numRefs", repoID)
	return *ret0, err
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolSession) NumRefs(repoID string) (*big.Int, error) {
	return _Protocol.Contract.NumRefs(&_Protocol.CallOpts, repoID)
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolCallerSession) NumRefs(repoID string) (*big.Int, error) {
	return _Protocol.Contract.NumRefs(&_Protocol.CallOpts, repoID)
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) RepoExists(opts *bind.CallOpts, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "repoExists", repoID)
	return *ret0, err
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) RepoExists(repoID string) (bool, error) {
	return _Protocol.Contract.RepoExists(&_Protocol.CallOpts, repoID)
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) RepoExists(repoID string) (bool, error) {
	return _Protocol.Contract.RepoExists(&_Protocol.CallOpts, repoID)
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserHasPullAccess(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userHasPullAccess", username, repoID)
	return *ret0, err
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserHasPullAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPullAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserHasPullAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPullAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserHasPushAccess(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userHasPushAccess", username, repoID)
	return *ret0, err
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserHasPushAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPushAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserHasPushAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPushAccess(&_Protocol.CallOpts, username, repoID)
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserIsAdmin(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userIsAdmin", username, repoID)
	return *ret0, err
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserIsAdmin(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserIsAdmin(&_Protocol.CallOpts, username, repoID)
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserIsAdmin(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserIsAdmin(&_Protocol.CallOpts, username, repoID)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolCaller) UsernamesByAddress(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "usernamesByAddress", arg0)
	return *ret0, err
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolSession) UsernamesByAddress(arg0 common.Address) (string, error) {
	return _Protocol.Contract.UsernamesByAddress(&_Protocol.CallOpts, arg0)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolCallerSession) UsernamesByAddress(arg0 common.Address) (string, error) {
	return _Protocol.Contract.UsernamesByAddress(&_Protocol.CallOpts, arg0)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolTransactor) CreateRepo(opts *bind.TransactOpts, repoID string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "createRepo", repoID)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolSession) CreateRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.CreateRepo(&_Protocol.TransactOpts, repoID)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolTransactorSession) CreateRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.CreateRepo(&_Protocol.TransactOpts, repoID)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolTransactor) DeleteRef(opts *bind.TransactOpts, repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "deleteRef", repoID, refName)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolSession) DeleteRef(repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRef(&_Protocol.TransactOpts, repoID, refName)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolTransactorSession) DeleteRef(repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRef(&_Protocol.TransactOpts, repoID, refName)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolTransactor) DeleteRepo(opts *bind.TransactOpts, repoID string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "deleteRepo", repoID)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolSession) DeleteRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRepo(&_Protocol.TransactOpts, repoID)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolTransactorSession) DeleteRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRepo(&_Protocol.TransactOpts, repoID)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x2d53f6ea.
//
// Solidity: function setAdmin(username string, repoID string, isAdmin bool) returns(bool)
func (_Protocol *ProtocolTransactor) SetAdmin(opts *bind.TransactOpts, username string, repoID string, isAdmin bool) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setAdmin", username, repoID, isAdmin)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x2d53f6ea.
//
// Solidity: function setAdmin(username string, repoID string, isAdmin bool) returns(bool)
func (_Protocol *ProtocolSession) SetAdmin(username string, repoID string, isAdmin bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetAdmin(&_Protocol.TransactOpts, username, repoID, isAdmin)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x2d53f6ea.
//
// Solidity: function setAdmin(username string, repoID string, isAdmin bool) returns(bool)
func (_Protocol *ProtocolTransactorSession) SetAdmin(username string, repoID string, isAdmin bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetAdmin(&_Protocol.TransactOpts, username, repoID, isAdmin)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolTransactor) SetUsername(opts *bind.TransactOpts, username string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setUsername", username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolSession) SetUsername(username string) (*types.Transaction, error) {
	return _Protocol.Contract.SetUsername(&_Protocol.TransactOpts, username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolTransactorSession) SetUsername(username string) (*types.Transaction, error) {
	return _Protocol.Contract.SetUsername(&_Protocol.TransactOpts, username)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x605a5dd8.
//
// Solidity: function updateRef(repoID string, refName string, commitHash string) returns()
func (_Protocol *ProtocolTransactor) UpdateRef(opts *bind.TransactOpts, repoID string, refName string, commitHash string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "updateRef", repoID, refName, commitHash)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x605a5dd8.
//
// Solidity: function updateRef(repoID string, refName string, commitHash string) returns()
func (_Protocol *ProtocolSession) UpdateRef(repoID string, refName string, commitHash string) (*types.Transaction, error) {
	return _Protocol.Contract.UpdateRef(&_Protocol.TransactOpts, repoID, refName, commitHash)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x605a5dd8.
//
// Solidity: function updateRef(repoID string, refName string, commitHash string) returns()
func (_Protocol *ProtocolTransactorSession) UpdateRef(repoID string, refName string, commitHash string) (*types.Transaction, error) {
	return _Protocol.Contract.UpdateRef(&_Protocol.TransactOpts, repoID, refName, commitHash)
}

// ProtocolLogCreateRepoIterator is returned from FilterLogCreateRepo and is used to iterate over the raw logs and unpacked data for LogCreateRepo events raised by the Protocol contract.
type ProtocolLogCreateRepoIterator struct {
	Event *ProtocolLogCreateRepo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogCreateRepoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogCreateRepo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogCreateRepo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogCreateRepoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogCreateRepoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogCreateRepo represents a LogCreateRepo event raised by the Protocol contract.
type ProtocolLogCreateRepo struct {
	User   common.Address
	RepoID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogCreateRepo is a free log retrieval operation binding the contract event 0x967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae8529.
//
// Solidity: e LogCreateRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) FilterLogCreateRepo(opts *bind.FilterOpts, user []common.Address, repoID []string) (*ProtocolLogCreateRepoIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogCreateRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogCreateRepoIterator{contract: _Protocol.contract, event: "LogCreateRepo", logs: logs, sub: sub}, nil
}

// WatchLogCreateRepo is a free log subscription operation binding the contract event 0x967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae8529.
//
// Solidity: e LogCreateRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) WatchLogCreateRepo(opts *bind.WatchOpts, sink chan<- *ProtocolLogCreateRepo, user []common.Address, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogCreateRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogCreateRepo)
				if err := _Protocol.contract.UnpackLog(event, "LogCreateRepo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogDeleteRefIterator is returned from FilterLogDeleteRef and is used to iterate over the raw logs and unpacked data for LogDeleteRef events raised by the Protocol contract.
type ProtocolLogDeleteRefIterator struct {
	Event *ProtocolLogDeleteRef // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogDeleteRefIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogDeleteRef)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogDeleteRef)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogDeleteRefIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogDeleteRefIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogDeleteRef represents a LogDeleteRef event raised by the Protocol contract.
type ProtocolLogDeleteRef struct {
	User    common.Address
	RepoID  common.Hash
	RefName common.Hash
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterLogDeleteRef is a free log retrieval operation binding the contract event 0xf7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef0549.
//
// Solidity: e LogDeleteRef(user indexed address, repoID indexed string, refName indexed string)
func (_Protocol *ProtocolFilterer) FilterLogDeleteRef(opts *bind.FilterOpts, user []common.Address, repoID []string, refName []string) (*ProtocolLogDeleteRefIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogDeleteRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogDeleteRefIterator{contract: _Protocol.contract, event: "LogDeleteRef", logs: logs, sub: sub}, nil
}

// WatchLogDeleteRef is a free log subscription operation binding the contract event 0xf7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef0549.
//
// Solidity: e LogDeleteRef(user indexed address, repoID indexed string, refName indexed string)
func (_Protocol *ProtocolFilterer) WatchLogDeleteRef(opts *bind.WatchOpts, sink chan<- *ProtocolLogDeleteRef, user []common.Address, repoID []string, refName []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogDeleteRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogDeleteRef)
				if err := _Protocol.contract.UnpackLog(event, "LogDeleteRef", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogDeleteRepoIterator is returned from FilterLogDeleteRepo and is used to iterate over the raw logs and unpacked data for LogDeleteRepo events raised by the Protocol contract.
type ProtocolLogDeleteRepoIterator struct {
	Event *ProtocolLogDeleteRepo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogDeleteRepoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogDeleteRepo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogDeleteRepo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogDeleteRepoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogDeleteRepoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogDeleteRepo represents a LogDeleteRepo event raised by the Protocol contract.
type ProtocolLogDeleteRepo struct {
	User   common.Address
	RepoID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogDeleteRepo is a free log retrieval operation binding the contract event 0x2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad.
//
// Solidity: e LogDeleteRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) FilterLogDeleteRepo(opts *bind.FilterOpts, user []common.Address, repoID []string) (*ProtocolLogDeleteRepoIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogDeleteRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogDeleteRepoIterator{contract: _Protocol.contract, event: "LogDeleteRepo", logs: logs, sub: sub}, nil
}

// WatchLogDeleteRepo is a free log subscription operation binding the contract event 0x2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad.
//
// Solidity: e LogDeleteRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) WatchLogDeleteRepo(opts *bind.WatchOpts, sink chan<- *ProtocolLogDeleteRepo, user []common.Address, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogDeleteRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogDeleteRepo)
				if err := _Protocol.contract.UnpackLog(event, "LogDeleteRepo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogSetAdminIterator is returned from FilterLogSetAdmin and is used to iterate over the raw logs and unpacked data for LogSetAdmin events raised by the Protocol contract.
type ProtocolLogSetAdminIterator struct {
	Event *ProtocolLogSetAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogSetAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogSetAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogSetAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogSetAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogSetAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogSetAdmin represents a LogSetAdmin event raised by the Protocol contract.
type ProtocolLogSetAdmin struct {
	User     common.Address
	Username common.Hash
	RepoID   common.Hash
	IsAdmin  bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogSetAdmin is a free log retrieval operation binding the contract event 0x9bd62abf5ed528f5bd9749cc45fe78c5a51e3912dc5a750899d5cb3555df0f07.
//
// Solidity: e LogSetAdmin(user indexed address, username indexed string, repoID indexed string, isAdmin bool)
func (_Protocol *ProtocolFilterer) FilterLogSetAdmin(opts *bind.FilterOpts, user []common.Address, username []string, repoID []string) (*ProtocolLogSetAdminIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogSetAdmin", userRule, usernameRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogSetAdminIterator{contract: _Protocol.contract, event: "LogSetAdmin", logs: logs, sub: sub}, nil
}

// WatchLogSetAdmin is a free log subscription operation binding the contract event 0x9bd62abf5ed528f5bd9749cc45fe78c5a51e3912dc5a750899d5cb3555df0f07.
//
// Solidity: e LogSetAdmin(user indexed address, username indexed string, repoID indexed string, isAdmin bool)
func (_Protocol *ProtocolFilterer) WatchLogSetAdmin(opts *bind.WatchOpts, sink chan<- *ProtocolLogSetAdmin, user []common.Address, username []string, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogSetAdmin", userRule, usernameRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogSetAdmin)
				if err := _Protocol.contract.UnpackLog(event, "LogSetAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogSetUsernameIterator is returned from FilterLogSetUsername and is used to iterate over the raw logs and unpacked data for LogSetUsername events raised by the Protocol contract.
type ProtocolLogSetUsernameIterator struct {
	Event *ProtocolLogSetUsername // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogSetUsernameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogSetUsername)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogSetUsername)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogSetUsernameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogSetUsernameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogSetUsername represents a LogSetUsername event raised by the Protocol contract.
type ProtocolLogSetUsername struct {
	Addr     common.Address
	Username common.Hash
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogSetUsername is a free log retrieval operation binding the contract event 0xaffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d99.
//
// Solidity: e LogSetUsername(addr indexed address, username indexed string)
func (_Protocol *ProtocolFilterer) FilterLogSetUsername(opts *bind.FilterOpts, addr []common.Address, username []string) (*ProtocolLogSetUsernameIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogSetUsername", addrRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogSetUsernameIterator{contract: _Protocol.contract, event: "LogSetUsername", logs: logs, sub: sub}, nil
}

// WatchLogSetUsername is a free log subscription operation binding the contract event 0xaffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d99.
//
// Solidity: e LogSetUsername(addr indexed address, username indexed string)
func (_Protocol *ProtocolFilterer) WatchLogSetUsername(opts *bind.WatchOpts, sink chan<- *ProtocolLogSetUsername, addr []common.Address, username []string) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogSetUsername", addrRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogSetUsername)
				if err := _Protocol.contract.UnpackLog(event, "LogSetUsername", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogUpdateRefIterator is returned from FilterLogUpdateRef and is used to iterate over the raw logs and unpacked data for LogUpdateRef events raised by the Protocol contract.
type ProtocolLogUpdateRefIterator struct {
	Event *ProtocolLogUpdateRef // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogUpdateRefIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogUpdateRef)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogUpdateRef)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogUpdateRefIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogUpdateRefIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogUpdateRef represents a LogUpdateRef event raised by the Protocol contract.
type ProtocolLogUpdateRef struct {
	User       common.Address
	RepoID     common.Hash
	RefName    common.Hash
	CommitHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogUpdateRef is a free log retrieval operation binding the contract event 0xc77d795c5ada12e6e61f6ca6c04423828f0660699387fefc548700aad589669b.
//
// Solidity: e LogUpdateRef(user indexed address, repoID indexed string, refName indexed string, commitHash string)
func (_Protocol *ProtocolFilterer) FilterLogUpdateRef(opts *bind.FilterOpts, user []common.Address, repoID []string, refName []string) (*ProtocolLogUpdateRefIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogUpdateRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogUpdateRefIterator{contract: _Protocol.contract, event: "LogUpdateRef", logs: logs, sub: sub}, nil
}

// WatchLogUpdateRef is a free log subscription operation binding the contract event 0xc77d795c5ada12e6e61f6ca6c04423828f0660699387fefc548700aad589669b.
//
// Solidity: e LogUpdateRef(user indexed address, repoID indexed string, refName indexed string, commitHash string)
func (_Protocol *ProtocolFilterer) WatchLogUpdateRef(opts *bind.WatchOpts, sink chan<- *ProtocolLogUpdateRef, user []common.Address, repoID []string, refName []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogUpdateRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogUpdateRef)
				if err := _Protocol.contract.UnpackLog(event, "LogUpdateRef", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
