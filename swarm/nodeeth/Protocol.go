// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nodeeth

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProtocolABI is the input ABI used to generate the binding from.
const ProtocolABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"},{\"name\":\"oldCommitHash\",\"type\":\"bytes20\"},{\"name\":\"newCommitHash\",\"type\":\"bytes20\"}],\"name\":\"updateRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"whichUsers\",\"type\":\"uint8\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getRepoUsers\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressHasPushAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"usernamesByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"setPublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressHasPullAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"createRepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"repoExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"isRepoPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getRefs\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userHasPushAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getUserPermissions\",\"outputs\":[{\"name\":\"puller\",\"type\":\"bool\"},{\"name\":\"pusher\",\"type\":\"bool\"},{\"name\":\"admin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userRegistry\",\"type\":\"address\"}],\"name\":\"setUserRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"puller\",\"type\":\"bool\"},{\"name\":\"pusher\",\"type\":\"bool\"},{\"name\":\"admin\",\"type\":\"bool\"}],\"name\":\"setUserPermissions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"deleteRepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"deleteRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userHasPullAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"numRefs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"getRef\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes20\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"LogSetUsername\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"LogCreateRepo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"LogDeleteRepo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"LogSetPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"refName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"commitHash\",\"type\":\"bytes20\"}],\"name\":\"LogUpdateRef\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"LogDeleteRef\",\"type\":\"event\"}]"

// ProtocolBin is the compiled bytecode used for deploying new contracts.
const ProtocolBin = `0x608060405234801561001057600080fd5b5060018054600160a060020a031916331790556145b1806100326000396000f3fe608060405234801561001057600080fd5b506004361061015c5760003560e060020a900480637bbaf159116100c7578063e07a896d11610080578063e07a896d14610e83578063ec67618914610fac578063ed59313a146110d5578063ede07dfe14611179578063f2ebfa10146112a2578063f6ce75b3146113585761015c565b80637bbaf15914610a035780638da5cb5b14610b2c578063abd9649c14610b34578063b0d5451b14610c7f578063d4fa6a8f14610ca5578063d51c250c14610ddf5761015c565b80634fa94bea116101195780634fa94bea1461069657806353dad7771461073a578063592c6a0f146107ee5780635c7460d6146108925780636653a812146108b65780636735c5771461095a5761015c565b8063154b1d1f146101615780631ccd4912146102a85780632b133be0146103d957806342dfb6da146104a1578063484af6581461053c5780634d6e93cb146105e2575b600080fd5b6102a66004803603608081101561017757600080fd5b810190602081018135602060020a81111561019157600080fd5b8201836020820111156101a357600080fd5b803590602001918460018302840111602060020a831117156101c457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050602060020a81111561021657600080fd5b82018360208201111561022857600080fd5b803590602001918460018302840111602060020a8311171561024957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506bffffffffffffffffffffffff1983358116945060209093013590921691506114a39050565b005b61035a600480360360808110156102be57600080fd5b810190602081018135602060020a8111156102d857600080fd5b8201836020820111156102ea57600080fd5b803590602001918460018302840111602060020a8311171561030b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505060ff83351693505050602081013590604001356118f2565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561039d578181015183820152602001610385565b50505050905090810190601f1680156103ca5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61048d600480360360408110156103ef57600080fd5b600160a060020a038235169190810190604081016020820135602060020a81111561041957600080fd5b82018360208201111561042b57600080fd5b803590602001918460018302840111602060020a8311171561044c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611dba945050505050565b604080519115158252519081900360200190f35b6104c7600480360360208110156104b757600080fd5b5035600160a060020a0316611ea4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156105015781810151838201526020016104e9565b50505050905090810190601f16801561052e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102a66004803603604081101561055257600080fd5b810190602081018135602060020a81111561056c57600080fd5b82018360208201111561057e57600080fd5b803590602001918460018302840111602060020a8311171561059f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050503515159050611f84565b61048d600480360360408110156105f857600080fd5b600160a060020a038235169190810190604081016020820135602060020a81111561062257600080fd5b82018360208201111561063457600080fd5b803590602001918460018302840111602060020a8311171561065557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612108945050505050565b6102a6600480360360208110156106ac57600080fd5b810190602081018135602060020a8111156106c657600080fd5b8201836020820111156106d857600080fd5b803590602001918460018302840111602060020a831117156106f957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506121e9945050505050565b61048d6004803603604081101561075057600080fd5b600160a060020a038235169190810190604081016020820135602060020a81111561077a57600080fd5b82018360208201111561078c57600080fd5b803590602001918460018302840111602060020a831117156107ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612719945050505050565b61048d6004803603602081101561080457600080fd5b810190602081018135602060020a81111561081e57600080fd5b82018360208201111561083057600080fd5b803590602001918460018302840111602060020a8311171561085157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506127fa945050505050565b61089a612822565b60408051600160a060020a039092168252519081900360200190f35b61048d600480360360208110156108cc57600080fd5b810190602081018135602060020a8111156108e657600080fd5b8201836020820111156108f857600080fd5b803590602001918460018302840111602060020a8311171561091957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612831945050505050565b61035a6004803603606081101561097057600080fd5b810190602081018135602060020a81111561098a57600080fd5b82018360208201111561099c57600080fd5b803590602001918460018302840111602060020a831117156109bd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020013561285c565b61048d60048036036040811015610a1957600080fd5b810190602081018135602060020a811115610a3357600080fd5b820183602082011115610a4557600080fd5b803590602001918460018302840111602060020a83111715610a6657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050602060020a811115610ab857600080fd5b820183602082011115610aca57600080fd5b803590602001918460018302840111602060020a83111715610aeb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612da5945050505050565b61089a612eb4565b610c5d60048036036040811015610b4a57600080fd5b810190602081018135602060020a811115610b6457600080fd5b820183602082011115610b7657600080fd5b803590602001918460018302840111602060020a83111715610b9757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050602060020a811115610be957600080fd5b820183602082011115610bfb57600080fd5b803590602001918460018302840111602060020a83111715610c1c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612ec3945050505050565b6040805193151584529115156020840152151582820152519081900360600190f35b6102a660048036036020811015610c9557600080fd5b5035600160a060020a0316613243565b6102a6600480360360a0811015610cbb57600080fd5b810190602081018135602060020a811115610cd557600080fd5b820183602082011115610ce757600080fd5b803590602001918460018302840111602060020a83111715610d0857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050602060020a811115610d5a57600080fd5b820183602082011115610d6c57600080fd5b803590602001918460018302840111602060020a83111715610d8d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050508035151591506020810135151590604001351515613289565b6102a660048036036020811015610df557600080fd5b810190602081018135602060020a811115610e0f57600080fd5b820183602082011115610e2157600080fd5b803590602001918460018302840111602060020a83111715610e4257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613904945050505050565b6102a660048036036040811015610e9957600080fd5b810190602081018135602060020a811115610eb357600080fd5b820183602082011115610ec557600080fd5b803590602001918460018302840111602060020a83111715610ee657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050602060020a811115610f3857600080fd5b820183602082011115610f4a57600080fd5b803590602001918460018302840111602060020a83111715610f6b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613ace945050505050565b61048d60048036036040811015610fc257600080fd5b810190602081018135602060020a811115610fdc57600080fd5b820183602082011115610fee57600080fd5b803590602001918460018302840111602060020a8311171561100f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050602060020a81111561106157600080fd5b82018360208201111561107357600080fd5b803590602001918460018302840111602060020a8311171561109457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613de5945050505050565b6102a6600480360360208110156110eb57600080fd5b810190602081018135602060020a81111561110557600080fd5b82018360208201111561111757600080fd5b803590602001918460018302840111602060020a8311171561113857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613e75945050505050565b61048d6004803603604081101561118f57600080fd5b810190602081018135602060020a8111156111a957600080fd5b8201836020820111156111bb57600080fd5b803590602001918460018302840111602060020a831117156111dc57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050602060020a81111561122e57600080fd5b82018360208201111561124057600080fd5b803590602001918460018302840111602060020a8311171561126157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613fe3945050505050565b611346600480360360208110156112b857600080fd5b810190602081018135602060020a8111156112d257600080fd5b8201836020820111156112e457600080fd5b803590602001918460018302840111602060020a8311171561130557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550614121945050505050565b60408051918252519081900360200190f35b6114816004803603604081101561136e57600080fd5b810190602081018135602060020a81111561138857600080fd5b82018360208201111561139a57600080fd5b803590602001918460018302840111602060020a831117156113bb57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050602060020a81111561140d57600080fd5b82018360208201111561141f57600080fd5b803590602001918460018302840111602060020a8311171561144057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506141c5945050505050565b604080516bffffffffffffffffffffffff199092168252519081900360200190f35b6002546040805160e160020a63216fdb6d028152336004820152905161158092600160a060020a0316916342dfb6da916024808301926000929190829003018186803b1580156114f257600080fd5b505afa158015611506573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561152f57600080fd5b810190808051602060020a81111561154657600080fd5b8201602081018481111561155957600080fd5b8151602060020a81118282018710171561157257600080fd5b505092919050505085612da5565b15156115d6576040805160e560020a62461bcd02815260206004820152601a60248201527f796f7520646f6e27742068617665207075736820616363657373000000000000604482015290519081900360640190fd5b60008060006115e487614267565b81526020810191909152604001600020805490915060ff161515611640576040805160e560020a62461bcd028152602060048201526013602482015260008051602061451e833981519152604482015290519081900360640190fd5b80600401600061164f86614267565b81526020810191909152604001600020546bffffffffffffffffffffffff198481166c0100000000000000000000000090920216146116c25760405160e560020a62461bcd02815260040180806020018281038252602781526020018061455f6027913960400191505060405180910390fd5b6040805160e060020a63524e643b02815260018301600482018181526024830193845287516044840152875173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948a9392606490910190602085019080838360005b8381101561173657818101518382015260200161171e565b50505050905090810190601f1680156117635780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561178157600080fd5b505af4158015611795573d6000803e3d6000fd5b505050506040513d60208110156117ab57600080fd5b508290506004820160006117be87614267565b815260200190815260200160002060006101000a815481600160a060020a0302191690836c0100000000000000000000000090040217905550836040518082805190602001908083835b602083106118275780518252601f199092019160209182019101611808565b51815160209384036101000a60001901801990921691161790526040519190930181900381208a519095508a945090928392508401908083835b602083106118805780518252601f199092019160209182019101611861565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206bffffffffffffffffffffffff198a16835293519395503394507f53cefa826f4c8a285b2b5d751be6efe1a535e332d21fc085341fb21162ace30b9391829003019150a45050505050565b60006060600080600061190489614267565b81526020810191909152604001600020805490915060ff161515611960576040805160e560020a62461bcd028152602060048201526013602482015260008051602061451e833981519152604482015290519081900360640190fd5b60058101600087600281111561197257fe5b14156119825750600581016119ba565b600187600281111561199057fe5b14156119a05750600b81016119ba565b60028760028111156119ae57fe5b14156119ba5750600881015b60606000868802815b8981108015611a5257508473__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015611a2157600080fd5b505af4158015611a35573d6000803e3d6000fd5b505050506040513d6020811015611a4b57600080fd5b5051818301105b15611b4e576040805160e160020a6314dcbd5b028152600481018790528284016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b158015611ab457600080fd5b505af4158015611ac8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611af157600080fd5b810190808051602060020a811115611b0857600080fd5b82016020810184811115611b1b57600080fd5b8151602060020a811182820187101715611b3457600080fd5b5050805190975095909501602001945050506001016119c3565b50816040519080825280601f01601f191660200182016040528015611b7a576020820181803883390190505b5095506000805b8a81108015611c1057508573__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015611bdf57600080fd5b505af4158015611bf3573d6000803e3d6000fd5b505050506040513d6020811015611c0957600080fd5b5051818401105b15611d28576040805160e160020a6314dcbd5b028152600481018890528285016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b158015611c7257600080fd5b505af4158015611c86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611caf57600080fd5b810190808051602060020a811115611cc657600080fd5b82016020810184811115611cd957600080fd5b8151602060020a811182820187101715611cf257600080fd5b50509291905050509450611d08855189846142de565b602082019150611d1985898461434d565b84519190910190600101611b81565b508473__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015611d7d57600080fd5b505af4158015611d91573d6000803e3d6000fd5b505050506040513d6020811015611da757600080fd5b5051975050505050505094509492505050565b6002546040805160e160020a63216fdb6d028152600160a060020a0385811660048301529151600093611e9b9316916342dfb6da9160248083019287929190829003018186803b158015611e0d57600080fd5b505afa158015611e21573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611e4a57600080fd5b810190808051602060020a811115611e6157600080fd5b82016020810184811115611e7457600080fd5b8151602060020a811182820187101715611e8d57600080fd5b505092919050505083612da5565b90505b92915050565b6002546040805160e160020a63216fdb6d028152600160a060020a038481166004830152915160609392909216916342dfb6da91602480820192600092909190829003018186803b158015611ef857600080fd5b505afa158015611f0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611f3557600080fd5b810190808051602060020a811115611f4c57600080fd5b82016020810184811115611f5f57600080fd5b8151602060020a811182820187101715611f7857600080fd5b50909695505050505050565b611f8e3383612719565b1515611fce5760405160e560020a62461bcd02815260040180806020018281038252602181526020018061453e6021913960400191505060405180910390fd5b6000806000611fdc85614267565b81526020810191909152604001600020805490915060ff16151561204a576040805160e560020a62461bcd02815260206004820152601860248201527f74686973207265706f20646f6573206e6f742065786973740000000000000000604482015290519081900360640190fd5b600e8101805460ff191683151590811790915560408051602080820193909352818152855191810191909152845133927fafd3374d7b80a84573da7094729fa7e4a8a87165437b49e55a448db5b9df704c92879287928291606083019186019080838360005b838110156120c85781810151838201526020016120b0565b50505050905090810190601f1680156120f55780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2505050565b6002546040805160e160020a63216fdb6d028152600160a060020a0385811660048301529151600093611e9b9316916342dfb6da9160248083019287929190829003018186803b15801561215b57600080fd5b505afa15801561216f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561219857600080fd5b810190808051602060020a8111156121af57600080fd5b820160208101848111156121c257600080fd5b8151602060020a8111828201871017156121db57600080fd5b505092919050505083613fe3565b805160001061222c5760405160e560020a62461bcd0281526004018080602001828103825260218152602001806144d96021913960400191505060405180910390fd5b6002546040805160e160020a63216fdb6d0281523360048201529051606092600160a060020a0316916342dfb6da916024808301926000929190829003018186803b15801561227a57600080fd5b505afa15801561228e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156122b757600080fd5b810190808051602060020a8111156122ce57600080fd5b820160208101848111156122e157600080fd5b8151602060020a8111828201871017156122fa57600080fd5b50508051909450600010925061235d915050576040805160e560020a62461bcd02815260206004820152601f60248201527f796f752068617665206e6f7420636c61696d6564206120757365726e616d6500604482015290519081900360640190fd5b600080600061236b85614267565b81526020810191909152604001600020805490915060ff16156123c25760405160e560020a62461bcd0281526004018080602001828103825260248152602001806144fa6024913960400191505060405180910390fd5b805460ff191660011781556040805160e060020a63524e643b02815260088301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b94889392606490910190602085019080838360005b83811015612441578181015183820152602001612429565b50505050905090810190601f16801561246e5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561248c57600080fd5b505af41580156124a0573d6000803e3d6000fd5b505050506040513d60208110156124b657600080fd5b50506040805160e060020a63524e643b02815260058301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b94889392606490910190602085019080838360005b8381101561252c578181015183820152602001612514565b50505050905090810190601f1680156125595780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561257757600080fd5b505af415801561258b573d6000803e3d6000fd5b505050506040513d60208110156125a157600080fd5b50506040805160e060020a63524e643b028152600b8301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b94889392606490910190602085019080838360005b838110156126175781810151838201526020016125ff565b50505050905090810190601f1680156126445780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561266257600080fd5b505af4158015612676573d6000803e3d6000fd5b505050506040513d602081101561268c57600080fd5b50506040518351849190819060208401908083835b602083106126c05780518252601f1990920191602091820191016126a1565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae85299160009150a3505050565b6002546040805160e160020a63216fdb6d028152600160a060020a0385811660048301529151600093611e9b9316916342dfb6da9160248083019287929190829003018186803b15801561276c57600080fd5b505afa158015612780573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156127a957600080fd5b810190808051602060020a8111156127c057600080fd5b820160208101848111156127d357600080fd5b8151602060020a8111828201871017156127ec57600080fd5b505092919050505083613de5565b600080600061280884614267565b815260208101919091526040016000205460ff1692915050565b600254600160a060020a031681565b600080600061283f84614267565b81526020810191909152604001600020600e015460ff1692915050565b60006060600080600061286e88614267565b81526020810191909152604001600020805490915060ff1615156128ca576040805160e560020a62461bcd028152602060048201526013602482015260008051602061451e833981519152604482015290519081900360640190fd5b6060600080868802815b898110801561297c5750604080517f24861346000000000000000000000000000000000000000000000000000000008152600188016004820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916324861346916024808301926020929190829003018186803b15801561294b57600080fd5b505af415801561295f573d6000803e3d6000fd5b505050506040513d602081101561297557600080fd5b5051818301105b15612aaf576040805160e160020a6314dcbd5b0281526001880160048201528284016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b1580156129e057600080fd5b505af41580156129f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612a1d57600080fd5b810190808051602060020a811115612a3457600080fd5b82016020810184811115612a4757600080fd5b8151602060020a811182820187101715612a6057600080fd5b50509291905050509450856004016000612a7987614267565b815260208101919091526040016000205485516c01000000000000000000000000909102945092909201605401916001016128d4565b50816040519080825280601f01601f191660200182016040528015612adb576020820181803883390190505b5095506000805b8a81108015612b8a5750604080517f24861346000000000000000000000000000000000000000000000000000000008152600189016004820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916324861346916024808301926020929190829003018186803b158015612b5957600080fd5b505af4158015612b6d573d6000803e3d6000fd5b505050506040513d6020811015612b8357600080fd5b5051818401105b15612cfb576040805160e160020a6314dcbd5b0281526001890160048201528285016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b158015612bee57600080fd5b505af4158015612c02573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612c2b57600080fd5b810190808051602060020a811115612c4257600080fd5b82016020810184811115612c5557600080fd5b8151602060020a811182820187101715612c6e57600080fd5b50509291905050509550866004016000612c8788614267565b815260208101919091526040016000205486516c010000000000000000000000009091029550612cb89089846142de565b602082019150612cc986898461434d565b855182019150612cdb601489846142de565b602082019150612cec8589846143c8565b60149190910190600101612ae2565b50604080517f24861346000000000000000000000000000000000000000000000000000000008152600188016004820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916324861346916024808301926020929190829003018186803b158015612d6957600080fd5b505af4158015612d7d573d6000803e3d6000fd5b505050506040513d6020811015612d9357600080fd5b50519750505050505050935093915050565b6000806000612db384614267565b815260200190815260200160002060080173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__63411565559091856040518363ffffffff1660e060020a0281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612e36578181015183820152602001612e1e565b50505050905090810190601f168015612e635780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612e8157600080fd5b505af4158015612e95573d6000803e3d6000fd5b505050506040513d6020811015612eab57600080fd5b50519392505050565b600154600160a060020a031681565b600080600080600080612ed588614267565b81526020810191909152604001600020805490915060ff161515612f31576040805160e560020a62461bcd028152602060048201526013602482015260008051602061451e833981519152604482015290519081900360640190fd5b604080517f41156555000000000000000000000000000000000000000000000000000000008152600b8301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__946341156555948b9392606490910190602085019080838360005b83811015612fbb578181015183820152602001612fa3565b50505050905090810190601f168015612fe85780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561300657600080fd5b505af415801561301a573d6000803e3d6000fd5b505050506040513d602081101561303057600080fd5b5051604080517f4115655500000000000000000000000000000000000000000000000000000000815260088401600482018181526024830193845289516044840152895173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__946341156555948c9392606490910190602085019080838360005b838110156130bc5781810151838201526020016130a4565b50505050905090810190601f1680156130e95780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561310757600080fd5b505af415801561311b573d6000803e3d6000fd5b505050506040513d602081101561313157600080fd5b5051604080517f411565550000000000000000000000000000000000000000000000000000000081526005850160048201818152602483019384528a5160448401528a5173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__946341156555948d9392606490910190602085019080838360005b838110156131bd5781810151838201526020016131a5565b50505050905090810190601f1680156131ea5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561320857600080fd5b505af415801561321c573d6000803e3d6000fd5b505050506040513d602081101561323257600080fd5b505191955093509150509250925092565b600154600160a060020a0316331461325a57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6132933386612719565b15156132e9576040805160e560020a62461bcd02815260206004820152601460248201527f796f7520617265206e6f7420616e2061646d696e000000000000000000000000604482015290519081900360640190fd5b60008060006132f788614267565b81526020810191909152604001600020805490915060ff161515613353576040805160e560020a62461bcd028152602060048201526013602482015260008051602061451e833981519152604482015290519081900360640190fd5b831561344a576040805160e060020a63524e643b028152600b8301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948b9392606490910190602085019080838360005b838110156133cd5781810151838201526020016133b5565b50505050905090810190601f1680156133fa5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561341857600080fd5b505af415801561342c573d6000803e3d6000fd5b505050506040513d602081101561344257600080fd5b506135369050565b6040805160e060020a634cab0b15028152600b8301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b15948b9392606490910190602085019080838360005b838110156134be5781810151838201526020016134a6565b50505050905090810190601f1680156134eb5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561350957600080fd5b505af415801561351d573d6000803e3d6000fd5b505050506040513d602081101561353357600080fd5b50505b821561362d576040805160e060020a63524e643b02815260088301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948b9392606490910190602085019080838360005b838110156135b0578181015183820152602001613598565b50505050905090810190601f1680156135dd5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156135fb57600080fd5b505af415801561360f573d6000803e3d6000fd5b505050506040513d602081101561362557600080fd5b506137199050565b6040805160e060020a634cab0b1502815260088301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b15948b9392606490910190602085019080838360005b838110156136a1578181015183820152602001613689565b50505050905090810190601f1680156136ce5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156136ec57600080fd5b505af4158015613700573d6000803e3d6000fd5b505050506040513d602081101561371657600080fd5b50505b8115613810576040805160e060020a63524e643b02815260058301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948b9392606490910190602085019080838360005b8381101561379357818101518382015260200161377b565b50505050905090810190601f1680156137c05780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156137de57600080fd5b505af41580156137f2573d6000803e3d6000fd5b505050506040513d602081101561380857600080fd5b506138fc9050565b6040805160e060020a634cab0b1502815260058301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b15948b9392606490910190602085019080838360005b8381101561388457818101518382015260200161386c565b50505050905090810190601f1680156138b15780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156138cf57600080fd5b505af41580156138e3573d6000803e3d6000fd5b505050506040513d60208110156138f957600080fd5b50505b505050505050565b61390e3382612719565b151561394e5760405160e560020a62461bcd02815260040180806020018281038252602181526020018061453e6021913960400191505060405180910390fd5b600080600061395c84614267565b81526020810191909152604001600020805490915060ff1615156139ca576040805160e560020a62461bcd02815260206004820152601860248201527f74686973207265706f20646f6573206e6f742065786973740000000000000000604482015290519081900360640190fd5b6000806139d684614267565b815260208101919091526040016000908120805460ff19168155906001820181613a008282614438565b5050600582016000613a128282614438565b5050600882016000613a248282614438565b5050600b82016000613a368282614438565b505050600e01805460ff191690556040518251839190819060208401908083835b60208310613a765780518252601f199092019160209182019101613a57565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad9160009150a35050565b6002546040805160e160020a63216fdb6d0281523360048201529051613b1d92600160a060020a0316916342dfb6da916024808301926000929190829003018186803b158015611e0d57600080fd5b1515613b73576040805160e560020a62461bcd02815260206004820152601a60248201527f796f7520646f6e27742068617665207075736820616363657373000000000000604482015290519081900360640190fd5b6000806000613b8185614267565b81526020810191909152604001600020805490915060ff161515613bdd576040805160e560020a62461bcd028152602060048201526013602482015260008051602061451e833981519152604482015290519081900360640190fd5b6040805160e060020a634cab0b1502815260018301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b1594889392606490910190602085019080838360005b83811015613c51578181015183820152602001613c39565b50505050905090810190601f168015613c7e5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015613c9c57600080fd5b505af4158015613cb0573d6000803e3d6000fd5b505050506040513d6020811015613cc657600080fd5b5050600481016000613cd784614267565b81526020808201929092526040908101600020805473ffffffffffffffffffffffffffffffffffffffff1916905551835184928291908401908083835b60208310613d335780518252601f199092019160209182019101613d14565b51815160209384036101000a6000190180199092169116179052604051919093018190038120885190955088945090928392508401908083835b60208310613d8c5780518252601f199092019160209182019101613d6d565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507ff7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef05499160009150a4505050565b6000806000613df384614267565b815260200190815260200160002060050173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__63411565559091856040518363ffffffff1660e060020a02815260040180838152602001806020018281038252838181518152602001915080519060200190808383600083811015612e36578181015183820152602001612e1e565b600254604080517fe2045452000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452855160448401528551600160a060020a039095169463e2045452949293879391606490910190602085019080838360005b83811015613ef7578181015183820152602001613edf565b50505050905090810190601f168015613f245780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015613f4457600080fd5b505af1158015613f58573d6000803e3d6000fd5b50505050806040518082805190602001908083835b60208310613f8c5780518252601f199092019160209182019101613f6d565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507faffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d999160009150a350565b600080613fef83614267565b6000818152602081905260409020600e015490915060ff1615156001141561401b576001915050611e9e565b600080828152602001908152602001600020600b0173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__63411565559091866040518363ffffffff1660e060020a0281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156140a257818101518382015260200161408a565b50505050905090810190601f1680156140cf5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156140ed57600080fd5b505af4158015614101573d6000803e3d6000fd5b505050506040513d602081101561411757600080fd5b5051949350505050565b600080600061412f84614267565b815260200190815260200160002060010173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b15801561419357600080fd5b505af41580156141a7573d6000803e3d6000fd5b505050506040513d60208110156141bd57600080fd5b505192915050565b6000806000806141d486614267565b81526020810191909152604001600020805490915060ff161515614230576040805160e560020a62461bcd028152602060048201526013602482015260008051602061451e833981519152604482015290519081900360640190fd5b80600401600061423f85614267565b81526020810191909152604001600020546c0100000000000000000000000002949350505050565b6000816040516020018082805190602001908083835b6020831061429c5780518252601f19909201916020918201910161427d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b8260005b6020811015614346578181602081106142f757fe5b1a60f860020a028484830181518110151561430e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001016142e2565b5050505050565b60005b83518110156143c257838181518110151561436757fe5b90602001015160f860020a900460f860020a028383830181518110151561438a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101614350565b50505050565b60005b60148160ff1610156143c2578360ff8216601481106143e657fe5b1a60f860020a0283838360ff160181518110151561440057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001016143cb565b50805460008255906000526020600020908101906144569190614459565b50565b61448091905b8082111561447c5760006144738282614483565b5060010161445f565b5090565b90565b50805460018160011615610100020316600290046000825580601f106144a95750614456565b60009182526020918290206144569261448092601f01048101905b8082111561447c57600081556001016144c456fe617267756d656e7420277265706f4944272063616e6e6f7420626520656d70747974686973207265706f49442068617320616c7265616479206265656e20636c61696d65647265706f20646f6573206e6f7420657869737400000000000000000000000000796f7520617265206e6f7420616e2061646d696e206f662074686973207265706f7468652070726f7669646564206f6c64436f6d6d69744861736820697320696e636f7272656374a165627a7a72305820ed8fd8b904b217e1679b69002b52ac8f4d2a805941b3d639619b2bacefd018ab0029`

// DeployProtocol deploys a new Ethereum contract, binding an instance of Protocol to it.
func DeployProtocol(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Protocol, error) {
	parsed, err := abi.JSON(strings.NewReader(ProtocolABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProtocolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Protocol{ProtocolCaller: ProtocolCaller{contract: contract}, ProtocolTransactor: ProtocolTransactor{contract: contract}, ProtocolFilterer: ProtocolFilterer{contract: contract}}, nil
}

// Protocol is an auto generated Go binding around an Ethereum contract.
type Protocol struct {
	ProtocolCaller     // Read-only binding to the contract
	ProtocolTransactor // Write-only binding to the contract
	ProtocolFilterer   // Log filterer for contract events
}

// ProtocolCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProtocolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProtocolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProtocolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProtocolSession struct {
	Contract     *Protocol         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProtocolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProtocolCallerSession struct {
	Contract *ProtocolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ProtocolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProtocolTransactorSession struct {
	Contract     *ProtocolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ProtocolRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProtocolRaw struct {
	Contract *Protocol // Generic contract binding to access the raw methods on
}

// ProtocolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProtocolCallerRaw struct {
	Contract *ProtocolCaller // Generic read-only contract binding to access the raw methods on
}

// ProtocolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProtocolTransactorRaw struct {
	Contract *ProtocolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProtocol creates a new instance of Protocol, bound to a specific deployed contract.
func NewProtocol(address common.Address, backend bind.ContractBackend) (*Protocol, error) {
	contract, err := bindProtocol(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Protocol{ProtocolCaller: ProtocolCaller{contract: contract}, ProtocolTransactor: ProtocolTransactor{contract: contract}, ProtocolFilterer: ProtocolFilterer{contract: contract}}, nil
}

// NewProtocolCaller creates a new read-only instance of Protocol, bound to a specific deployed contract.
func NewProtocolCaller(address common.Address, caller bind.ContractCaller) (*ProtocolCaller, error) {
	contract, err := bindProtocol(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProtocolCaller{contract: contract}, nil
}

// NewProtocolTransactor creates a new write-only instance of Protocol, bound to a specific deployed contract.
func NewProtocolTransactor(address common.Address, transactor bind.ContractTransactor) (*ProtocolTransactor, error) {
	contract, err := bindProtocol(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProtocolTransactor{contract: contract}, nil
}

// NewProtocolFilterer creates a new log filterer instance of Protocol, bound to a specific deployed contract.
func NewProtocolFilterer(address common.Address, filterer bind.ContractFilterer) (*ProtocolFilterer, error) {
	contract, err := bindProtocol(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProtocolFilterer{contract: contract}, nil
}

// bindProtocol binds a generic wrapper to an already deployed contract.
func bindProtocol(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProtocolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Protocol *ProtocolRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Protocol.Contract.ProtocolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Protocol *ProtocolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Protocol.Contract.ProtocolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Protocol *ProtocolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Protocol.Contract.ProtocolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Protocol *ProtocolCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Protocol.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Protocol *ProtocolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Protocol.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Protocol *ProtocolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Protocol.Contract.contract.Transact(opts, method, params...)
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressHasPullAccess(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressHasPullAccess", addr, repoID)
	return *ret0, err
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressHasPullAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPullAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressHasPullAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPullAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressHasPushAccess(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressHasPushAccess", addr, repoID)
	return *ret0, err
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressHasPushAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPushAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressHasPushAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPushAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressIsAdmin(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressIsAdmin", addr, repoID)
	return *ret0, err
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressIsAdmin(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressIsAdmin(&_Protocol.CallOpts, addr, repoID)
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressIsAdmin(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressIsAdmin(&_Protocol.CallOpts, addr, repoID)
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(bytes20)
func (_Protocol *ProtocolCaller) GetRef(opts *bind.CallOpts, repoID string, refName string) ([20]byte, error) {
	var (
		ret0 = new([20]byte)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "getRef", repoID, refName)
	return *ret0, err
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(bytes20)
func (_Protocol *ProtocolSession) GetRef(repoID string, refName string) ([20]byte, error) {
	return _Protocol.Contract.GetRef(&_Protocol.CallOpts, repoID, refName)
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(bytes20)
func (_Protocol *ProtocolCallerSession) GetRef(repoID string, refName string) ([20]byte, error) {
	return _Protocol.Contract.GetRef(&_Protocol.CallOpts, repoID, refName)
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCaller) GetRefs(opts *bind.CallOpts, repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	ret := new(struct {
		Total *big.Int
		Data  []byte
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getRefs", repoID, pageSize, page)
	return *ret, err
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolSession) GetRefs(repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRefs(&_Protocol.CallOpts, repoID, pageSize, page)
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCallerSession) GetRefs(repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRefs(&_Protocol.CallOpts, repoID, pageSize, page)
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCaller) GetRepoUsers(opts *bind.CallOpts, repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	ret := new(struct {
		Total *big.Int
		Data  []byte
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getRepoUsers", repoID, whichUsers, pageSize, page)
	return *ret, err
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolSession) GetRepoUsers(repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRepoUsers(&_Protocol.CallOpts, repoID, whichUsers, pageSize, page)
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCallerSession) GetRepoUsers(repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRepoUsers(&_Protocol.CallOpts, repoID, whichUsers, pageSize, page)
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolCaller) GetUserPermissions(opts *bind.CallOpts, repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	ret := new(struct {
		Puller bool
		Pusher bool
		Admin  bool
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getUserPermissions", repoID, username)
	return *ret, err
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolSession) GetUserPermissions(repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	return _Protocol.Contract.GetUserPermissions(&_Protocol.CallOpts, repoID, username)
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolCallerSession) GetUserPermissions(repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	return _Protocol.Contract.GetUserPermissions(&_Protocol.CallOpts, repoID, username)
}

// IsRepoPublic is a free data retrieval call binding the contract method 0x6653a812.
//
// Solidity: function isRepoPublic(repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) IsRepoPublic(opts *bind.CallOpts, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "isRepoPublic", repoID)
	return *ret0, err
}

// IsRepoPublic is a free data retrieval call binding the contract method 0x6653a812.
//
// Solidity: function isRepoPublic(repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) IsRepoPublic(repoID string) (bool, error) {
	return _Protocol.Contract.IsRepoPublic(&_Protocol.CallOpts, repoID)
}

// IsRepoPublic is a free data retrieval call binding the contract method 0x6653a812.
//
// Solidity: function isRepoPublic(repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) IsRepoPublic(repoID string) (bool, error) {
	return _Protocol.Contract.IsRepoPublic(&_Protocol.CallOpts, repoID)
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolCaller) NumRefs(opts *bind.CallOpts, repoID string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "numRefs", repoID)
	return *ret0, err
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolSession) NumRefs(repoID string) (*big.Int, error) {
	return _Protocol.Contract.NumRefs(&_Protocol.CallOpts, repoID)
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolCallerSession) NumRefs(repoID string) (*big.Int, error) {
	return _Protocol.Contract.NumRefs(&_Protocol.CallOpts, repoID)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Protocol *ProtocolCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Protocol *ProtocolSession) Owner() (common.Address, error) {
	return _Protocol.Contract.Owner(&_Protocol.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Protocol *ProtocolCallerSession) Owner() (common.Address, error) {
	return _Protocol.Contract.Owner(&_Protocol.CallOpts)
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) RepoExists(opts *bind.CallOpts, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "repoExists", repoID)
	return *ret0, err
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) RepoExists(repoID string) (bool, error) {
	return _Protocol.Contract.RepoExists(&_Protocol.CallOpts, repoID)
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) RepoExists(repoID string) (bool, error) {
	return _Protocol.Contract.RepoExists(&_Protocol.CallOpts, repoID)
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserHasPullAccess(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userHasPullAccess", username, repoID)
	return *ret0, err
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserHasPullAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPullAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserHasPullAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPullAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserHasPushAccess(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userHasPushAccess", username, repoID)
	return *ret0, err
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserHasPushAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPushAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserHasPushAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPushAccess(&_Protocol.CallOpts, username, repoID)
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserIsAdmin(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userIsAdmin", username, repoID)
	return *ret0, err
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserIsAdmin(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserIsAdmin(&_Protocol.CallOpts, username, repoID)
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserIsAdmin(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserIsAdmin(&_Protocol.CallOpts, username, repoID)
}

// UserRegistry is a free data retrieval call binding the contract method 0x5c7460d6.
//
// Solidity: function userRegistry() constant returns(address)
func (_Protocol *ProtocolCaller) UserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userRegistry")
	return *ret0, err
}

// UserRegistry is a free data retrieval call binding the contract method 0x5c7460d6.
//
// Solidity: function userRegistry() constant returns(address)
func (_Protocol *ProtocolSession) UserRegistry() (common.Address, error) {
	return _Protocol.Contract.UserRegistry(&_Protocol.CallOpts)
}

// UserRegistry is a free data retrieval call binding the contract method 0x5c7460d6.
//
// Solidity: function userRegistry() constant returns(address)
func (_Protocol *ProtocolCallerSession) UserRegistry() (common.Address, error) {
	return _Protocol.Contract.UserRegistry(&_Protocol.CallOpts)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress(addr address) constant returns(string)
func (_Protocol *ProtocolCaller) UsernamesByAddress(opts *bind.CallOpts, addr common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "usernamesByAddress", addr)
	return *ret0, err
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress(addr address) constant returns(string)
func (_Protocol *ProtocolSession) UsernamesByAddress(addr common.Address) (string, error) {
	return _Protocol.Contract.UsernamesByAddress(&_Protocol.CallOpts, addr)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress(addr address) constant returns(string)
func (_Protocol *ProtocolCallerSession) UsernamesByAddress(addr common.Address) (string, error) {
	return _Protocol.Contract.UsernamesByAddress(&_Protocol.CallOpts, addr)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolTransactor) CreateRepo(opts *bind.TransactOpts, repoID string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "createRepo", repoID)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolSession) CreateRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.CreateRepo(&_Protocol.TransactOpts, repoID)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolTransactorSession) CreateRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.CreateRepo(&_Protocol.TransactOpts, repoID)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolTransactor) DeleteRef(opts *bind.TransactOpts, repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "deleteRef", repoID, refName)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolSession) DeleteRef(repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRef(&_Protocol.TransactOpts, repoID, refName)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolTransactorSession) DeleteRef(repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRef(&_Protocol.TransactOpts, repoID, refName)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolTransactor) DeleteRepo(opts *bind.TransactOpts, repoID string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "deleteRepo", repoID)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolSession) DeleteRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRepo(&_Protocol.TransactOpts, repoID)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolTransactorSession) DeleteRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRepo(&_Protocol.TransactOpts, repoID)
}

// SetPublic is a paid mutator transaction binding the contract method 0x484af658.
//
// Solidity: function setPublic(repoID string, isPublic bool) returns()
func (_Protocol *ProtocolTransactor) SetPublic(opts *bind.TransactOpts, repoID string, isPublic bool) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setPublic", repoID, isPublic)
}

// SetPublic is a paid mutator transaction binding the contract method 0x484af658.
//
// Solidity: function setPublic(repoID string, isPublic bool) returns()
func (_Protocol *ProtocolSession) SetPublic(repoID string, isPublic bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetPublic(&_Protocol.TransactOpts, repoID, isPublic)
}

// SetPublic is a paid mutator transaction binding the contract method 0x484af658.
//
// Solidity: function setPublic(repoID string, isPublic bool) returns()
func (_Protocol *ProtocolTransactorSession) SetPublic(repoID string, isPublic bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetPublic(&_Protocol.TransactOpts, repoID, isPublic)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolTransactor) SetUserPermissions(opts *bind.TransactOpts, repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setUserPermissions", repoID, username, puller, pusher, admin)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolSession) SetUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetUserPermissions(&_Protocol.TransactOpts, repoID, username, puller, pusher, admin)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolTransactorSession) SetUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetUserPermissions(&_Protocol.TransactOpts, repoID, username, puller, pusher, admin)
}

// SetUserRegistry is a paid mutator transaction binding the contract method 0xb0d5451b.
//
// Solidity: function setUserRegistry(_userRegistry address) returns()
func (_Protocol *ProtocolTransactor) SetUserRegistry(opts *bind.TransactOpts, _userRegistry common.Address) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setUserRegistry", _userRegistry)
}

// SetUserRegistry is a paid mutator transaction binding the contract method 0xb0d5451b.
//
// Solidity: function setUserRegistry(_userRegistry address) returns()
func (_Protocol *ProtocolSession) SetUserRegistry(_userRegistry common.Address) (*types.Transaction, error) {
	return _Protocol.Contract.SetUserRegistry(&_Protocol.TransactOpts, _userRegistry)
}

// SetUserRegistry is a paid mutator transaction binding the contract method 0xb0d5451b.
//
// Solidity: function setUserRegistry(_userRegistry address) returns()
func (_Protocol *ProtocolTransactorSession) SetUserRegistry(_userRegistry common.Address) (*types.Transaction, error) {
	return _Protocol.Contract.SetUserRegistry(&_Protocol.TransactOpts, _userRegistry)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolTransactor) SetUsername(opts *bind.TransactOpts, username string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setUsername", username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolSession) SetUsername(username string) (*types.Transaction, error) {
	return _Protocol.Contract.SetUsername(&_Protocol.TransactOpts, username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolTransactorSession) SetUsername(username string) (*types.Transaction, error) {
	return _Protocol.Contract.SetUsername(&_Protocol.TransactOpts, username)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x154b1d1f.
//
// Solidity: function updateRef(repoID string, refName string, oldCommitHash bytes20, newCommitHash bytes20) returns()
func (_Protocol *ProtocolTransactor) UpdateRef(opts *bind.TransactOpts, repoID string, refName string, oldCommitHash [20]byte, newCommitHash [20]byte) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "updateRef", repoID, refName, oldCommitHash, newCommitHash)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x154b1d1f.
//
// Solidity: function updateRef(repoID string, refName string, oldCommitHash bytes20, newCommitHash bytes20) returns()
func (_Protocol *ProtocolSession) UpdateRef(repoID string, refName string, oldCommitHash [20]byte, newCommitHash [20]byte) (*types.Transaction, error) {
	return _Protocol.Contract.UpdateRef(&_Protocol.TransactOpts, repoID, refName, oldCommitHash, newCommitHash)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x154b1d1f.
//
// Solidity: function updateRef(repoID string, refName string, oldCommitHash bytes20, newCommitHash bytes20) returns()
func (_Protocol *ProtocolTransactorSession) UpdateRef(repoID string, refName string, oldCommitHash [20]byte, newCommitHash [20]byte) (*types.Transaction, error) {
	return _Protocol.Contract.UpdateRef(&_Protocol.TransactOpts, repoID, refName, oldCommitHash, newCommitHash)
}

// ProtocolLogCreateRepoIterator is returned from FilterLogCreateRepo and is used to iterate over the raw logs and unpacked data for LogCreateRepo events raised by the Protocol contract.
type ProtocolLogCreateRepoIterator struct {
	Event *ProtocolLogCreateRepo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogCreateRepoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogCreateRepo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogCreateRepo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogCreateRepoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogCreateRepoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogCreateRepo represents a LogCreateRepo event raised by the Protocol contract.
type ProtocolLogCreateRepo struct {
	User   common.Address
	RepoID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogCreateRepo is a free log retrieval operation binding the contract event 0x967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae8529.
//
// Solidity: e LogCreateRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) FilterLogCreateRepo(opts *bind.FilterOpts, user []common.Address, repoID []string) (*ProtocolLogCreateRepoIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogCreateRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogCreateRepoIterator{contract: _Protocol.contract, event: "LogCreateRepo", logs: logs, sub: sub}, nil
}

// WatchLogCreateRepo is a free log subscription operation binding the contract event 0x967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae8529.
//
// Solidity: e LogCreateRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) WatchLogCreateRepo(opts *bind.WatchOpts, sink chan<- *ProtocolLogCreateRepo, user []common.Address, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogCreateRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogCreateRepo)
				if err := _Protocol.contract.UnpackLog(event, "LogCreateRepo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogDeleteRefIterator is returned from FilterLogDeleteRef and is used to iterate over the raw logs and unpacked data for LogDeleteRef events raised by the Protocol contract.
type ProtocolLogDeleteRefIterator struct {
	Event *ProtocolLogDeleteRef // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogDeleteRefIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogDeleteRef)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogDeleteRef)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogDeleteRefIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogDeleteRefIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogDeleteRef represents a LogDeleteRef event raised by the Protocol contract.
type ProtocolLogDeleteRef struct {
	User    common.Address
	RepoID  common.Hash
	RefName common.Hash
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterLogDeleteRef is a free log retrieval operation binding the contract event 0xf7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef0549.
//
// Solidity: e LogDeleteRef(user indexed address, repoID indexed string, refName indexed string)
func (_Protocol *ProtocolFilterer) FilterLogDeleteRef(opts *bind.FilterOpts, user []common.Address, repoID []string, refName []string) (*ProtocolLogDeleteRefIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogDeleteRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogDeleteRefIterator{contract: _Protocol.contract, event: "LogDeleteRef", logs: logs, sub: sub}, nil
}

// WatchLogDeleteRef is a free log subscription operation binding the contract event 0xf7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef0549.
//
// Solidity: e LogDeleteRef(user indexed address, repoID indexed string, refName indexed string)
func (_Protocol *ProtocolFilterer) WatchLogDeleteRef(opts *bind.WatchOpts, sink chan<- *ProtocolLogDeleteRef, user []common.Address, repoID []string, refName []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogDeleteRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogDeleteRef)
				if err := _Protocol.contract.UnpackLog(event, "LogDeleteRef", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogDeleteRepoIterator is returned from FilterLogDeleteRepo and is used to iterate over the raw logs and unpacked data for LogDeleteRepo events raised by the Protocol contract.
type ProtocolLogDeleteRepoIterator struct {
	Event *ProtocolLogDeleteRepo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogDeleteRepoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogDeleteRepo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogDeleteRepo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogDeleteRepoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogDeleteRepoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogDeleteRepo represents a LogDeleteRepo event raised by the Protocol contract.
type ProtocolLogDeleteRepo struct {
	User   common.Address
	RepoID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogDeleteRepo is a free log retrieval operation binding the contract event 0x2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad.
//
// Solidity: e LogDeleteRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) FilterLogDeleteRepo(opts *bind.FilterOpts, user []common.Address, repoID []string) (*ProtocolLogDeleteRepoIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogDeleteRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogDeleteRepoIterator{contract: _Protocol.contract, event: "LogDeleteRepo", logs: logs, sub: sub}, nil
}

// WatchLogDeleteRepo is a free log subscription operation binding the contract event 0x2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad.
//
// Solidity: e LogDeleteRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) WatchLogDeleteRepo(opts *bind.WatchOpts, sink chan<- *ProtocolLogDeleteRepo, user []common.Address, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogDeleteRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogDeleteRepo)
				if err := _Protocol.contract.UnpackLog(event, "LogDeleteRepo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogSetPublicIterator is returned from FilterLogSetPublic and is used to iterate over the raw logs and unpacked data for LogSetPublic events raised by the Protocol contract.
type ProtocolLogSetPublicIterator struct {
	Event *ProtocolLogSetPublic // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogSetPublicIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogSetPublic)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogSetPublic)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogSetPublicIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogSetPublicIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogSetPublic represents a LogSetPublic event raised by the Protocol contract.
type ProtocolLogSetPublic struct {
	User     common.Address
	RepoID   string
	IsPublic bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogSetPublic is a free log retrieval operation binding the contract event 0xafd3374d7b80a84573da7094729fa7e4a8a87165437b49e55a448db5b9df704c.
//
// Solidity: e LogSetPublic(user indexed address, repoID string, isPublic bool)
func (_Protocol *ProtocolFilterer) FilterLogSetPublic(opts *bind.FilterOpts, user []common.Address) (*ProtocolLogSetPublicIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogSetPublic", userRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogSetPublicIterator{contract: _Protocol.contract, event: "LogSetPublic", logs: logs, sub: sub}, nil
}

// WatchLogSetPublic is a free log subscription operation binding the contract event 0xafd3374d7b80a84573da7094729fa7e4a8a87165437b49e55a448db5b9df704c.
//
// Solidity: e LogSetPublic(user indexed address, repoID string, isPublic bool)
func (_Protocol *ProtocolFilterer) WatchLogSetPublic(opts *bind.WatchOpts, sink chan<- *ProtocolLogSetPublic, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogSetPublic", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogSetPublic)
				if err := _Protocol.contract.UnpackLog(event, "LogSetPublic", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogSetUsernameIterator is returned from FilterLogSetUsername and is used to iterate over the raw logs and unpacked data for LogSetUsername events raised by the Protocol contract.
type ProtocolLogSetUsernameIterator struct {
	Event *ProtocolLogSetUsername // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogSetUsernameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogSetUsername)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogSetUsername)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogSetUsernameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogSetUsernameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogSetUsername represents a LogSetUsername event raised by the Protocol contract.
type ProtocolLogSetUsername struct {
	Addr     common.Address
	Username common.Hash
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogSetUsername is a free log retrieval operation binding the contract event 0xaffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d99.
//
// Solidity: e LogSetUsername(addr indexed address, username indexed string)
func (_Protocol *ProtocolFilterer) FilterLogSetUsername(opts *bind.FilterOpts, addr []common.Address, username []string) (*ProtocolLogSetUsernameIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogSetUsername", addrRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogSetUsernameIterator{contract: _Protocol.contract, event: "LogSetUsername", logs: logs, sub: sub}, nil
}

// WatchLogSetUsername is a free log subscription operation binding the contract event 0xaffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d99.
//
// Solidity: e LogSetUsername(addr indexed address, username indexed string)
func (_Protocol *ProtocolFilterer) WatchLogSetUsername(opts *bind.WatchOpts, sink chan<- *ProtocolLogSetUsername, addr []common.Address, username []string) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogSetUsername", addrRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogSetUsername)
				if err := _Protocol.contract.UnpackLog(event, "LogSetUsername", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogUpdateRefIterator is returned from FilterLogUpdateRef and is used to iterate over the raw logs and unpacked data for LogUpdateRef events raised by the Protocol contract.
type ProtocolLogUpdateRefIterator struct {
	Event *ProtocolLogUpdateRef // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogUpdateRefIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogUpdateRef)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogUpdateRef)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogUpdateRefIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogUpdateRefIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogUpdateRef represents a LogUpdateRef event raised by the Protocol contract.
type ProtocolLogUpdateRef struct {
	User       common.Address
	RepoID     common.Hash
	RefName    common.Hash
	CommitHash [20]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogUpdateRef is a free log retrieval operation binding the contract event 0x53cefa826f4c8a285b2b5d751be6efe1a535e332d21fc085341fb21162ace30b.
//
// Solidity: e LogUpdateRef(user indexed address, repoID indexed string, refName indexed string, commitHash bytes20)
func (_Protocol *ProtocolFilterer) FilterLogUpdateRef(opts *bind.FilterOpts, user []common.Address, repoID []string, refName []string) (*ProtocolLogUpdateRefIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogUpdateRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogUpdateRefIterator{contract: _Protocol.contract, event: "LogUpdateRef", logs: logs, sub: sub}, nil
}

// WatchLogUpdateRef is a free log subscription operation binding the contract event 0x53cefa826f4c8a285b2b5d751be6efe1a535e332d21fc085341fb21162ace30b.
//
// Solidity: e LogUpdateRef(user indexed address, repoID indexed string, refName indexed string, commitHash bytes20)
func (_Protocol *ProtocolFilterer) WatchLogUpdateRef(opts *bind.WatchOpts, sink chan<- *ProtocolLogUpdateRef, user []common.Address, repoID []string, refName []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogUpdateRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogUpdateRef)
				if err := _Protocol.contract.UnpackLog(event, "LogUpdateRef", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// UserRegistryABI is the input ABI used to generate the binding from.
const UserRegistryABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getAddressForUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usernamesByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addressesByUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"

// UserRegistryBin is the compiled bytecode used for deploying new contracts.
const UserRegistryBin = `0x608060405234801561001057600080fd5b506106e1806100206000396000f3fe608060405234801561001057600080fd5b5060043610610068577c01000000000000000000000000000000000000000000000000000000006000350463095a0535811461006d57806342dfb6da1461012f578063a58e325c146101ca578063e2045452146101e7575b600080fd5b6101136004803603602081101561008357600080fd5b81019060208101813564010000000081111561009e57600080fd5b8201836020820111156100b057600080fd5b803590602001918460018302840111640100000000831117156100d257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061029f945050505050565b60408051600160a060020a039092168252519081900360200190f35b6101556004803603602081101561014557600080fd5b5035600160a060020a03166102ce565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018f578181015183820152602001610177565b50505050905090810190601f1680156101bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610113600480360360208110156101e057600080fd5b5035610368565b61029d600480360360408110156101fd57600080fd5b600160a060020a03823516919081019060408101602082013564010000000081111561022857600080fd5b82018360208201111561023a57600080fd5b8035906020019184600183028401116401000000008311171561025c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610383945050505050565b005b6000600160006102ae84610556565b8152602081019190915260400160002054600160a060020a031692915050565b600060208181529181526040908190208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156103605780601f1061033557610100808354040283529160200191610360565b820191906000526020600020905b81548152906001019060200180831161034357829003601f168201915b505050505081565b600160205260009081526040902054600160a060020a031681565b80516000106103dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806106936023913960400191505060405180910390fd5b600160a060020a038216600090815260208190526040902054600260001961010060018416150201909116041561045f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180610669602a913960400191505060405180910390fd5b600061046a82610556565b600081815260016020526040902054909150600160a060020a0316156104f157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f7468697320757365726e616d6520697320616c726561647920636c61696d6564604482015290519081900360640190fd5b600160a060020a0383166000908152602081815260409091208351610518928501906105cd565b506000908152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03939093169290921790915550565b6000816040516020018082805190602001908083835b6020831061058b5780518252601f19909201916020918201910161056c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061060e57805160ff191683800117855561063b565b8280016001018555821561063b579182015b8281111561063b578251825591602001919060010190610620565b5061064792915061064b565b5090565b61066591905b808211156106475760008155600101610651565b9056fe796f7572206164647265737320616c72656164792062656c6f6e677320746f206120757365726e616d65617267756d656e742027757365726e616d65272063616e6e6f7420626520656d707479a165627a7a723058205f5652fd2952ff43577d55f1bd30641a971fc87037a8dca4ad829f9fef5f95460029`

// DeployUserRegistry deploys a new Ethereum contract, binding an instance of UserRegistry to it.
func DeployUserRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserRegistry, error) {
	parsed, err := abi.JSON(strings.NewReader(UserRegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UserRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserRegistry{UserRegistryCaller: UserRegistryCaller{contract: contract}, UserRegistryTransactor: UserRegistryTransactor{contract: contract}, UserRegistryFilterer: UserRegistryFilterer{contract: contract}}, nil
}

// UserRegistry is an auto generated Go binding around an Ethereum contract.
type UserRegistry struct {
	UserRegistryCaller     // Read-only binding to the contract
	UserRegistryTransactor // Write-only binding to the contract
	UserRegistryFilterer   // Log filterer for contract events
}

// UserRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UserRegistrySession struct {
	Contract     *UserRegistry     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UserRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UserRegistryCallerSession struct {
	Contract *UserRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// UserRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UserRegistryTransactorSession struct {
	Contract     *UserRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// UserRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type UserRegistryRaw struct {
	Contract *UserRegistry // Generic contract binding to access the raw methods on
}

// UserRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UserRegistryCallerRaw struct {
	Contract *UserRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// UserRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UserRegistryTransactorRaw struct {
	Contract *UserRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUserRegistry creates a new instance of UserRegistry, bound to a specific deployed contract.
func NewUserRegistry(address common.Address, backend bind.ContractBackend) (*UserRegistry, error) {
	contract, err := bindUserRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserRegistry{UserRegistryCaller: UserRegistryCaller{contract: contract}, UserRegistryTransactor: UserRegistryTransactor{contract: contract}, UserRegistryFilterer: UserRegistryFilterer{contract: contract}}, nil
}

// NewUserRegistryCaller creates a new read-only instance of UserRegistry, bound to a specific deployed contract.
func NewUserRegistryCaller(address common.Address, caller bind.ContractCaller) (*UserRegistryCaller, error) {
	contract, err := bindUserRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserRegistryCaller{contract: contract}, nil
}

// NewUserRegistryTransactor creates a new write-only instance of UserRegistry, bound to a specific deployed contract.
func NewUserRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*UserRegistryTransactor, error) {
	contract, err := bindUserRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserRegistryTransactor{contract: contract}, nil
}

// NewUserRegistryFilterer creates a new log filterer instance of UserRegistry, bound to a specific deployed contract.
func NewUserRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*UserRegistryFilterer, error) {
	contract, err := bindUserRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserRegistryFilterer{contract: contract}, nil
}

// bindUserRegistry binds a generic wrapper to an already deployed contract.
func bindUserRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UserRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserRegistry *UserRegistryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UserRegistry.Contract.UserRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserRegistry *UserRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserRegistry.Contract.UserRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserRegistry *UserRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserRegistry.Contract.UserRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserRegistry *UserRegistryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UserRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserRegistry *UserRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserRegistry *UserRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserRegistry.Contract.contract.Transact(opts, method, params...)
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_UserRegistry *UserRegistryCaller) AddressesByUsername(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _UserRegistry.contract.Call(opts, out, "addressesByUsername", arg0)
	return *ret0, err
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_UserRegistry *UserRegistrySession) AddressesByUsername(arg0 [32]byte) (common.Address, error) {
	return _UserRegistry.Contract.AddressesByUsername(&_UserRegistry.CallOpts, arg0)
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_UserRegistry *UserRegistryCallerSession) AddressesByUsername(arg0 [32]byte) (common.Address, error) {
	return _UserRegistry.Contract.AddressesByUsername(&_UserRegistry.CallOpts, arg0)
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_UserRegistry *UserRegistryCaller) GetAddressForUsername(opts *bind.CallOpts, username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _UserRegistry.contract.Call(opts, out, "getAddressForUsername", username)
	return *ret0, err
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_UserRegistry *UserRegistrySession) GetAddressForUsername(username string) (common.Address, error) {
	return _UserRegistry.Contract.GetAddressForUsername(&_UserRegistry.CallOpts, username)
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_UserRegistry *UserRegistryCallerSession) GetAddressForUsername(username string) (common.Address, error) {
	return _UserRegistry.Contract.GetAddressForUsername(&_UserRegistry.CallOpts, username)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_UserRegistry *UserRegistryCaller) UsernamesByAddress(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _UserRegistry.contract.Call(opts, out, "usernamesByAddress", arg0)
	return *ret0, err
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_UserRegistry *UserRegistrySession) UsernamesByAddress(arg0 common.Address) (string, error) {
	return _UserRegistry.Contract.UsernamesByAddress(&_UserRegistry.CallOpts, arg0)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_UserRegistry *UserRegistryCallerSession) UsernamesByAddress(arg0 common.Address) (string, error) {
	return _UserRegistry.Contract.UsernamesByAddress(&_UserRegistry.CallOpts, arg0)
}

// SetUsername is a paid mutator transaction binding the contract method 0xe2045452.
//
// Solidity: function setUsername(addr address, username string) returns()
func (_UserRegistry *UserRegistryTransactor) SetUsername(opts *bind.TransactOpts, addr common.Address, username string) (*types.Transaction, error) {
	return _UserRegistry.contract.Transact(opts, "setUsername", addr, username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xe2045452.
//
// Solidity: function setUsername(addr address, username string) returns()
func (_UserRegistry *UserRegistrySession) SetUsername(addr common.Address, username string) (*types.Transaction, error) {
	return _UserRegistry.Contract.SetUsername(&_UserRegistry.TransactOpts, addr, username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xe2045452.
//
// Solidity: function setUsername(addr address, username string) returns()
func (_UserRegistry *UserRegistryTransactorSession) SetUsername(addr common.Address, username string) (*types.Transaction, error) {
	return _UserRegistry.Contract.SetUsername(&_UserRegistry.TransactOpts, addr, username)
}
