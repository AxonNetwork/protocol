// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nodeeth

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProtocolABI is the input ABI used to generate the binding from.
const ProtocolABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getAddressForUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"whichUsers\",\"type\":\"uint8\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getRepoUsers\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressHasPushAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usernamesByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"setPublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressHasPullAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"createRepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"addressIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"repoExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"},{\"name\":\"commitHash\",\"type\":\"string\"}],\"name\":\"updateRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"isRepoPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getRefs\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userHasPushAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addressesByUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"getUserPermissions\",\"outputs\":[{\"name\":\"puller\",\"type\":\"bool\"},{\"name\":\"pusher\",\"type\":\"bool\"},{\"name\":\"admin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"puller\",\"type\":\"bool\"},{\"name\":\"pusher\",\"type\":\"bool\"},{\"name\":\"admin\",\"type\":\"bool\"}],\"name\":\"setUserPermissions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"deleteRepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"deleteRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userIsAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"userHasPullAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"numRefs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"repoID\",\"type\":\"string\"},{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"getRef\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"LogSetUsername\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"LogCreateRepo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"}],\"name\":\"LogDeleteRepo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"LogSetPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"refName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"commitHash\",\"type\":\"string\"}],\"name\":\"LogUpdateRef\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"repoID\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"LogDeleteRef\",\"type\":\"event\"}]"

// ProtocolBin is the compiled bytecode used for deploying new contracts.
const ProtocolBin = `$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b15801561170557600080fd5b505af4158015611719573d6000803e3d6000fd5b505050506040513d602081101561172f57600080fd5b5051818301105b15611834576040805160e160020a6314dcbd5b028152600481018790528284016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b15801561179857600080fd5b505af41580156117ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156117d557600080fd5b8101908080516401000000008111156117ed57600080fd5b8201602081018481111561180057600080fd5b815164010000000081118282018710171561181a57600080fd5b5050805190975095909501602001945050506001016116a7565b50816040519080825280601f01601f191660200182016040528015611860576020820181803883390190505b5095506000805b8a811080156118f657508573__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b1580156118c557600080fd5b505af41580156118d9573d6000803e3d6000fd5b505050506040513d60208110156118ef57600080fd5b5051818401105b15611a10576040805160e160020a6314dcbd5b028152600481018890528285016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b15801561195857600080fd5b505af415801561196c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561199557600080fd5b8101908080516401000000008111156119ad57600080fd5b820160208101848111156119c057600080fd5b81516401000000008111828201871017156119da57600080fd5b505092919050505094506119f08551898461448c565b602082019150611a018589846144fb565b84519190910190600101611867565b508473__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b158015611a6557600080fd5b505af4158015611a79573d6000803e3d6000fd5b505050506040513d6020811015611a8f57600080fd5b5051975050505050505094509492505050565b600160a060020a03821660009081526020818152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611b4993830182828015611b3e5780601f10611b1357610100808354040283529160200191611b3e565b820191906000526020600020905b815481529060010190602001808311611b2157829003601f168201915b505050505083612e77565b90505b92915050565b600060208181529181526040908190208054825160026001831615610100026000190190921691909104601f810185900485028201850190935282815292909190830182828015611be45780601f10611bb957610100808354040283529160200191611be4565b820191906000526020600020905b815481529060010190602001808311611bc757829003601f168201915b505050505081565b611bf6338361230e565b1515611c365760405160e560020a62461bcd0281526004018080602001828103825260218152602001806147256021913960400191505060405180910390fd5b600060026000611c4585614415565b81526020810191909152604001600020805490915060ff161515611cb3576040805160e560020a62461bcd02815260206004820152601860248201527f74686973207265706f20646f6573206e6f742065786973740000000000000000604482015290519081900360640190fd5b600e8101805460ff191683151590811790915560408051602080820193909352818152855191810191909152845133927fafd3374d7b80a84573da7094729fa7e4a8a87165437b49e55a448db5b9df704c92879287928291606083019186019080838360005b83811015611d31578181015183820152602001611d19565b50505050905090810190601f168015611d5e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2505050565b600160a060020a03821660009081526020818152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611b4993830182828015611e0d5780601f10611de257610100808354040283529160200191611e0d565b820191906000526020600020905b815481529060010190602001808311611df057829003601f168201915b505050505083614112565b8051600010611e5b5760405160e560020a62461bcd0281526004018080602001828103825260218152602001806146c06021913960400191505060405180910390fd5b336000908152602081815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609392830182828015611eef5780601f10611ec457610100808354040283529160200191611eef565b820191906000526020600020905b815481529060010190602001808311611ed257829003601f168201915b5050505050905060008151111515611f51576040805160e560020a62461bcd02815260206004820152601f60248201527f796f752068617665206e6f7420636c61696d6564206120757365726e616d6500604482015290519081900360640190fd5b600060026000611f6085614415565b81526020810191909152604001600020805490915060ff1615611fb75760405160e560020a62461bcd0281526004018080602001828103825260248152602001806146e16024913960400191505060405180910390fd5b805460ff191660011781556040805160e060020a63524e643b02815260088301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b94889392606490910190602085019080838360005b8381101561203657818101518382015260200161201e565b50505050905090810190601f1680156120635780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561208157600080fd5b505af4158015612095573d6000803e3d6000fd5b505050506040513d60208110156120ab57600080fd5b50506040805160e060020a63524e643b02815260058301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b94889392606490910190602085019080838360005b83811015612121578181015183820152602001612109565b50505050905090810190601f16801561214e5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561216c57600080fd5b505af4158015612180573d6000803e3d6000fd5b505050506040513d602081101561219657600080fd5b50506040805160e060020a63524e643b028152600b8301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b94889392606490910190602085019080838360005b8381101561220c5781810151838201526020016121f4565b50505050905090810190601f1680156122395780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561225757600080fd5b505af415801561226b573d6000803e3d6000fd5b505050506040513d602081101561228157600080fd5b50506040518351849190819060208401908083835b602083106122b55780518252601f199092019160209182019101612296565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae85299160009150a3505050565b600160a060020a03821660009081526020818152604080832080548251601f60026000196101006001861615020190931692909204918201859004850281018501909352808352611b49938301828280156123aa5780601f1061237f576101008083540402835291602001916123aa565b820191906000526020600020905b81548152906001019060200180831161238d57829003601f168201915b505050505083613e8c565b6000600260006123c484614415565b815260208101919091526040016000205460ff1692915050565b336000908152602081815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845261247e93928301828280156124735780601f1061244857610100808354040283529160200191612473565b820191906000526020600020905b81548152906001019060200180831161245657829003601f168201915b505050505084612e77565b15156124d4576040805160e560020a62461bcd02815260206004820152601a60248201527f796f7520646f6e27742068617665207075736820616363657373000000000000604482015290519081900360640190fd5b805160281461252d576040805160e560020a62461bcd02815260206004820152600f60248201527f62616420636f6d6d697420686173680000000000000000000000000000000000604482015290519081900360640190fd5b60006002600061253c86614415565b81526020810191909152604001600020805490915060ff161515612598576040805160e560020a62461bcd0281526020600482015260136024820152600080516020614705833981519152604482015290519081900360640190fd5b6040805160e060020a63524e643b02815260018301600482018181526024830193845286516044840152865173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b94899392606490910190602085019080838360005b8381101561260c5781810151838201526020016125f4565b50505050905090810190601f1680156126395780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561265757600080fd5b505af415801561266b573d6000803e3d6000fd5b505050506040513d602081101561268157600080fd5b5082905060048201600061269486614415565b815260200190815260200160002090805190602001906126b5929190614576565b50826040518082805190602001908083835b602083106126e65780518252601f1990920191602091820191016126c7565b51815160209384036101000a6000190180199092169116179052604051919093018190038120895190955089945090928392508401908083835b6020831061273f5780518252601f199092019160209182019101612720565b51815160209384036101000a60001901801990921691161790526040805192909401829003822081835289518383015289519096503395507fc77d795c5ada12e6e61f6ca6c04423828f0660699387fefc548700aad589669b948a94508392908301919085019080838360005b838110156127c45781810151838201526020016127ac565b50505050905090810190601f1680156127f15780820380516001836020036101000a031916815260200191505b509250505060405180910390a450505050565b60006002600061281384614415565b81526020810191909152604001600020600e015460ff1692915050565b6000606060006002600061284388614415565b81526020810191909152604001600020805490915060ff16151561289f576040805160e560020a62461bcd0281526020600482015260136024820152600080516020614705833981519152604482015290519081900360640190fd5b6060806000868802815b89811080156129515750604080517f24861346000000000000000000000000000000000000000000000000000000008152600188016004820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916324861346916024808301926020929190829003018186803b15801561292057600080fd5b505af4158015612934573d6000803e3d6000fd5b505050506040513d602081101561294a57600080fd5b5051818301105b15612b08576040805160e160020a6314dcbd5b0281526001880160048201528284016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b1580156129b557600080fd5b505af41580156129c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156129f257600080fd5b810190808051640100000000811115612a0a57600080fd5b82016020810184811115612a1d57600080fd5b8151640100000000811182820187101715612a3757600080fd5b50509291905050509450856004016000612a5087614415565b815260208082019290925260409081016000208054825160026001831615610100026000190190921691909104601f810185900485028201850190935282815292909190830182828015612ae55780601f10612aba57610100808354040283529160200191612ae5565b820191906000526020600020905b815481529060010190602001808311612ac857829003601f168201915b5050505050935083518551602001602001018301925080806001019150506128a9565b50816040519080825280601f01601f191660200182016040528015612b34576020820181803883390190505b5095506000805b8a81108015612be35750604080517f24861346000000000000000000000000000000000000000000000000000000008152600189016004820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916324861346916024808301926020929190829003018186803b158015612bb257600080fd5b505af4158015612bc6573d6000803e3d6000fd5b505050506040513d6020811015612bdc57600080fd5b5051818401105b15612dcd576040805160e160020a6314dcbd5b0281526001890160048201528285016024820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916329b97ab6916044808301926000929190829003018186803b158015612c4757600080fd5b505af4158015612c5b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612c8457600080fd5b810190808051640100000000811115612c9c57600080fd5b82016020810184811115612caf57600080fd5b8151640100000000811182820187101715612cc957600080fd5b50509291905050509550866004016000612ce288614415565b815260208082019290925260409081016000208054825160026001831615610100026000190190921691909104601f810185900485028201850190935282815292909190830182828015612d775780601f10612d4c57610100808354040283529160200191612d77565b820191906000526020600020905b815481529060010190602001808311612d5a57829003601f168201915b50505050509450612d8a8651898461448c565b602082019150612d9b8689846144fb565b855182019150612dad8551898461448c565b602082019150612dbe8589846144fb565b84519190910190600101612b3b565b50604080517f24861346000000000000000000000000000000000000000000000000000000008152600188016004820152905173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__916324861346916024808301926020929190829003018186803b158015612e3b57600080fd5b505af4158015612e4f573d6000803e3d6000fd5b505050506040513d6020811015612e6557600080fd5b50519750505050505050935093915050565b600060026000612e8684614415565b815260200190815260200160002060080173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__63411565559091856040518363ffffffff1660e060020a0281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612f09578181015183820152602001612ef1565b50505050905090810190601f168015612f365780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015612f5457600080fd5b505af4158015612f68573d6000803e3d6000fd5b505050506040513d6020811015612f7e57600080fd5b50519392505050565b600160205260009081526040902054600160a060020a031681565b60008060008060026000612fb588614415565b81526020810191909152604001600020805490915060ff161515613011576040805160e560020a62461bcd0281526020600482015260136024820152600080516020614705833981519152604482015290519081900360640190fd5b604080517f41156555000000000000000000000000000000000000000000000000000000008152600b8301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__946341156555948b9392606490910190602085019080838360005b8381101561309b578181015183820152602001613083565b50505050905090810190601f1680156130c85780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156130e657600080fd5b505af41580156130fa573d6000803e3d6000fd5b505050506040513d602081101561311057600080fd5b5051604080517f4115655500000000000000000000000000000000000000000000000000000000815260088401600482018181526024830193845289516044840152895173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__946341156555948c9392606490910190602085019080838360005b8381101561319c578181015183820152602001613184565b50505050905090810190601f1680156131c95780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156131e757600080fd5b505af41580156131fb573d6000803e3d6000fd5b505050506040513d602081101561321157600080fd5b5051604080517f411565550000000000000000000000000000000000000000000000000000000081526005850160048201818152602483019384528a5160448401528a5173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__946341156555948d9392606490910190602085019080838360005b8381101561329d578181015183820152602001613285565b50505050905090810190601f1680156132ca5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156132e857600080fd5b505af41580156132fc573d6000803e3d6000fd5b505050506040513d602081101561331257600080fd5b505191955093509150509250925092565b61332d338661230e565b1515613383576040805160e560020a62461bcd02815260206004820152601460248201527f796f7520617265206e6f7420616e2061646d696e000000000000000000000000604482015290519081900360640190fd5b60006002600061339288614415565b81526020810191909152604001600020805490915060ff1615156133ee576040805160e560020a62461bcd0281526020600482015260136024820152600080516020614705833981519152604482015290519081900360640190fd5b83156134e5576040805160e060020a63524e643b028152600b8301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948b9392606490910190602085019080838360005b83811015613468578181015183820152602001613450565b50505050905090810190601f1680156134955780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156134b357600080fd5b505af41580156134c7573d6000803e3d6000fd5b505050506040513d60208110156134dd57600080fd5b506135d19050565b6040805160e060020a634cab0b15028152600b8301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b15948b9392606490910190602085019080838360005b83811015613559578181015183820152602001613541565b50505050905090810190601f1680156135865780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156135a457600080fd5b505af41580156135b8573d6000803e3d6000fd5b505050506040513d60208110156135ce57600080fd5b50505b82156136c8576040805160e060020a63524e643b02815260088301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948b9392606490910190602085019080838360005b8381101561364b578181015183820152602001613633565b50505050905090810190601f1680156136785780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561369657600080fd5b505af41580156136aa573d6000803e3d6000fd5b505050506040513d60208110156136c057600080fd5b506137b49050565b6040805160e060020a634cab0b1502815260088301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b15948b9392606490910190602085019080838360005b8381101561373c578181015183820152602001613724565b50505050905090810190601f1680156137695780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561378757600080fd5b505af415801561379b573d6000803e3d6000fd5b505050506040513d60208110156137b157600080fd5b50505b81156138ab576040805160e060020a63524e643b02815260058301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__9463524e643b948b9392606490910190602085019080838360005b8381101561382e578181015183820152602001613816565b50505050905090810190601f16801561385b5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561387957600080fd5b505af415801561388d573d6000803e3d6000fd5b505050506040513d60208110156138a357600080fd5b506139979050565b6040805160e060020a634cab0b1502815260058301600482018181526024830193845288516044840152885173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b15948b9392606490910190602085019080838360005b8381101561391f578181015183820152602001613907565b50505050905090810190601f16801561394c5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561396a57600080fd5b505af415801561397e573d6000803e3d6000fd5b505050506040513d602081101561399457600080fd5b50505b505050505050565b6139a9338261230e565b15156139e95760405160e560020a62461bcd0281526004018080602001828103825260218152602001806147256021913960400191505060405180910390fd5b6000600260006139f884614415565b81526020810191909152604001600020805490915060ff161515613a66576040805160e560020a62461bcd02815260206004820152601860248201527f74686973207265706f20646f6573206e6f742065786973740000000000000000604482015290519081900360640190fd5b60026000613a7384614415565b815260208101919091526040016000908120805460ff19168155906001820181613a9d82826145f4565b5050600582016000613aaf82826145f4565b5050600882016000613ac182826145f4565b5050600b82016000613ad382826145f4565b505050600e01805460ff191690556040518251839190819060208401908083835b60208310613b135780518252601f199092019160209182019101613af4565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507f2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad9160009150a35050565b336000908152602081815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452613bd59392830182828015611b3e5780601f10611b1357610100808354040283529160200191611b3e565b1515613c2b576040805160e560020a62461bcd02815260206004820152601a60248201527f796f7520646f6e27742068617665207075736820616363657373000000000000604482015290519081900360640190fd5b600060026000613c3a85614415565b81526020810191909152604001600020805490915060ff161515613c96576040805160e560020a62461bcd0281526020600482015260136024820152600080516020614705833981519152604482015290519081900360640190fd5b6040805160e060020a634cab0b1502815260018301600482018181526024830193845285516044840152855173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__94634cab0b1594889392606490910190602085019080838360005b83811015613d0a578181015183820152602001613cf2565b50505050905090810190601f168015613d375780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015613d5557600080fd5b505af4158015613d69573d6000803e3d6000fd5b505050506040513d6020811015613d7f57600080fd5b5050600481016000613d9084614415565b81526020019081526020016000206000613daa9190614615565b816040518082805190602001908083835b60208310613dda5780518252601f199092019160209182019101613dbb565b51815160209384036101000a6000190180199092169116179052604051919093018190038120885190955088945090928392508401908083835b60208310613e335780518252601f199092019160209182019101613e14565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507ff7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef05499160009150a4505050565b600060026000613e9b84614415565b815260200190815260200160002060050173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__63411565559091856040518363ffffffff1660e060020a02815260040180838152602001806020018281038252838181518152602001915080519060200190808383600083811015612f09578181015183820152602001612ef1565b8051600010613f605760405160e560020a62461bcd0281526004018080602001828103825260238152602001806147466023913960400191505060405180910390fd5b336000908152602081905260409020546002600019610100600184161502019091160415613fc25760405160e560020a62461bcd02815260040180806020018281038252602a815260200180614696602a913960400191505060405180910390fd5b6000613fcd82614415565b600081815260016020526040902054909150600160a060020a03161561403d576040805160e560020a62461bcd02815260206004820181905260248201527f7468697320757365726e616d6520697320616c726561647920636c61696d6564604482015290519081900360640190fd5b33600090815260208181526040909120835161405b92850190614576565b50600081815260016020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff1916331790559051835184928291908401908083835b602083106140ba5780518252601f19909201916020918201910161409b565b5181516020939093036101000a60001901801990911692169190911790526040519201829003822093503392507faffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d999160009150a35050565b60008061411e83614415565b6000818152600260205260409020600e015490915060ff1615156001141561414a576001915050611b4c565b60026000828152602001908152602001600020600b0173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__63411565559091866040518363ffffffff1660e060020a0281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156141d25781810151838201526020016141ba565b50505050905090810190601f1680156141ff5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561421d57600080fd5b505af4158015614231573d6000803e3d6000fd5b505050506040513d602081101561424757600080fd5b5051949350505050565b60006002600061426084614415565b815260200190815260200160002060010173__$79a9b1c2d3afd97f1a0ea30df2eabca8ee$__632486134690916040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b1580156142c457600080fd5b505af41580156142d8573d6000803e3d6000fd5b505050506040513d60208110156142ee57600080fd5b505192915050565b606060006002600061430786614415565b81526020810191909152604001600020805490915060ff161515614363576040805160e560020a62461bcd0281526020600482015260136024820152600080516020614705833981519152604482015290519081900360640190fd5b80600401600061437285614415565b815260208082019290925260409081016000208054825160026001831615610100026000190190921691909104601f8101859004850282018501909352828152929091908301828280156144075780601f106143dc57610100808354040283529160200191614407565b820191906000526020600020905b8154815290600101906020018083116143ea57829003601f168201915b505050505091505092915050565b6000816040516020018082805190602001908083835b6020831061444a5780518252601f19909201916020918201910161442b565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b8260005b60208110156144f4578181602081106144a557fe5b1a60f860020a02848483018151811015156144bc57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101614490565b5050505050565b60005b835181101561457057838181518110151561451557fe5b90602001015160f860020a900460f860020a028383830181518110151561453857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001016144fe565b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106145b757805160ff19168380011785556145e4565b828001600101855582156145e4579182015b828111156145e45782518255916020019190600101906145c9565b506145f0929150614655565b5090565b50805460008255906000526020600020908101906146129190614672565b50565b50805460018160011615610100020316600290046000825580601f1061463b5750614612565b601f01602090049060005260206000209081019061461291905b61466f91905b808211156145f0576000815560010161465b565b90565b61466f91905b808211156145f057600061468c8282614615565b5060010161467856fe796f7572206164647265737320616c72656164792062656c6f6e677320746f206120757365726e616d65617267756d656e7420277265706f4944272063616e6e6f7420626520656d70747974686973207265706f49442068617320616c7265616479206265656e20636c61696d65647265706f20646f6573206e6f7420657869737400000000000000000000000000796f7520617265206e6f7420616e2061646d696e206f662074686973207265706f617267756d656e742027757365726e616d65272063616e6e6f7420626520656d707479a165627a7a723058202176cfb38ebbabc931feb5ed6eba82695bd40482eedd43c3391e976b1a0111de0029`

// DeployProtocol deploys a new Ethereum contract, binding an instance of Protocol to it.
func DeployProtocol(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Protocol, error) {
	parsed, err := abi.JSON(strings.NewReader(ProtocolABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ProtocolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Protocol{ProtocolCaller: ProtocolCaller{contract: contract}, ProtocolTransactor: ProtocolTransactor{contract: contract}, ProtocolFilterer: ProtocolFilterer{contract: contract}}, nil
}

// Protocol is an auto generated Go binding around an Ethereum contract.
type Protocol struct {
	ProtocolCaller     // Read-only binding to the contract
	ProtocolTransactor // Write-only binding to the contract
	ProtocolFilterer   // Log filterer for contract events
}

// ProtocolCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProtocolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProtocolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProtocolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProtocolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProtocolSession struct {
	Contract     *Protocol         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProtocolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProtocolCallerSession struct {
	Contract *ProtocolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ProtocolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProtocolTransactorSession struct {
	Contract     *ProtocolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ProtocolRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProtocolRaw struct {
	Contract *Protocol // Generic contract binding to access the raw methods on
}

// ProtocolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProtocolCallerRaw struct {
	Contract *ProtocolCaller // Generic read-only contract binding to access the raw methods on
}

// ProtocolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProtocolTransactorRaw struct {
	Contract *ProtocolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProtocol creates a new instance of Protocol, bound to a specific deployed contract.
func NewProtocol(address common.Address, backend bind.ContractBackend) (*Protocol, error) {
	contract, err := bindProtocol(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Protocol{ProtocolCaller: ProtocolCaller{contract: contract}, ProtocolTransactor: ProtocolTransactor{contract: contract}, ProtocolFilterer: ProtocolFilterer{contract: contract}}, nil
}

// NewProtocolCaller creates a new read-only instance of Protocol, bound to a specific deployed contract.
func NewProtocolCaller(address common.Address, caller bind.ContractCaller) (*ProtocolCaller, error) {
	contract, err := bindProtocol(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProtocolCaller{contract: contract}, nil
}

// NewProtocolTransactor creates a new write-only instance of Protocol, bound to a specific deployed contract.
func NewProtocolTransactor(address common.Address, transactor bind.ContractTransactor) (*ProtocolTransactor, error) {
	contract, err := bindProtocol(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProtocolTransactor{contract: contract}, nil
}

// NewProtocolFilterer creates a new log filterer instance of Protocol, bound to a specific deployed contract.
func NewProtocolFilterer(address common.Address, filterer bind.ContractFilterer) (*ProtocolFilterer, error) {
	contract, err := bindProtocol(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProtocolFilterer{contract: contract}, nil
}

// bindProtocol binds a generic wrapper to an already deployed contract.
func bindProtocol(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProtocolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Protocol *ProtocolRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Protocol.Contract.ProtocolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Protocol *ProtocolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Protocol.Contract.ProtocolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Protocol *ProtocolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Protocol.Contract.ProtocolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Protocol *ProtocolCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Protocol.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Protocol *ProtocolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Protocol.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Protocol *ProtocolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Protocol.Contract.contract.Transact(opts, method, params...)
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressHasPullAccess(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressHasPullAccess", addr, repoID)
	return *ret0, err
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressHasPullAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPullAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPullAccess is a free data retrieval call binding the contract method 0x4d6e93cb.
//
// Solidity: function addressHasPullAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressHasPullAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPullAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressHasPushAccess(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressHasPushAccess", addr, repoID)
	return *ret0, err
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressHasPushAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPushAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressHasPushAccess is a free data retrieval call binding the contract method 0x2b133be0.
//
// Solidity: function addressHasPushAccess(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressHasPushAccess(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressHasPushAccess(&_Protocol.CallOpts, addr, repoID)
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) AddressIsAdmin(opts *bind.CallOpts, addr common.Address, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressIsAdmin", addr, repoID)
	return *ret0, err
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) AddressIsAdmin(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressIsAdmin(&_Protocol.CallOpts, addr, repoID)
}

// AddressIsAdmin is a free data retrieval call binding the contract method 0x53dad777.
//
// Solidity: function addressIsAdmin(addr address, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) AddressIsAdmin(addr common.Address, repoID string) (bool, error) {
	return _Protocol.Contract.AddressIsAdmin(&_Protocol.CallOpts, addr, repoID)
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolCaller) AddressesByUsername(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "addressesByUsername", arg0)
	return *ret0, err
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolSession) AddressesByUsername(arg0 [32]byte) (common.Address, error) {
	return _Protocol.Contract.AddressesByUsername(&_Protocol.CallOpts, arg0)
}

// AddressesByUsername is a free data retrieval call binding the contract method 0xa58e325c.
//
// Solidity: function addressesByUsername( bytes32) constant returns(address)
func (_Protocol *ProtocolCallerSession) AddressesByUsername(arg0 [32]byte) (common.Address, error) {
	return _Protocol.Contract.AddressesByUsername(&_Protocol.CallOpts, arg0)
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolCaller) GetAddressForUsername(opts *bind.CallOpts, username string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "getAddressForUsername", username)
	return *ret0, err
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolSession) GetAddressForUsername(username string) (common.Address, error) {
	return _Protocol.Contract.GetAddressForUsername(&_Protocol.CallOpts, username)
}

// GetAddressForUsername is a free data retrieval call binding the contract method 0x095a0535.
//
// Solidity: function getAddressForUsername(username string) constant returns(address)
func (_Protocol *ProtocolCallerSession) GetAddressForUsername(username string) (common.Address, error) {
	return _Protocol.Contract.GetAddressForUsername(&_Protocol.CallOpts, username)
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(string)
func (_Protocol *ProtocolCaller) GetRef(opts *bind.CallOpts, repoID string, refName string) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "getRef", repoID, refName)
	return *ret0, err
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(string)
func (_Protocol *ProtocolSession) GetRef(repoID string, refName string) (string, error) {
	return _Protocol.Contract.GetRef(&_Protocol.CallOpts, repoID, refName)
}

// GetRef is a free data retrieval call binding the contract method 0xf6ce75b3.
//
// Solidity: function getRef(repoID string, refName string) constant returns(string)
func (_Protocol *ProtocolCallerSession) GetRef(repoID string, refName string) (string, error) {
	return _Protocol.Contract.GetRef(&_Protocol.CallOpts, repoID, refName)
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCaller) GetRefs(opts *bind.CallOpts, repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	ret := new(struct {
		Total *big.Int
		Data  []byte
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getRefs", repoID, pageSize, page)
	return *ret, err
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolSession) GetRefs(repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRefs(&_Protocol.CallOpts, repoID, pageSize, page)
}

// GetRefs is a free data retrieval call binding the contract method 0x6735c577.
//
// Solidity: function getRefs(repoID string, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCallerSession) GetRefs(repoID string, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRefs(&_Protocol.CallOpts, repoID, pageSize, page)
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCaller) GetRepoUsers(opts *bind.CallOpts, repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	ret := new(struct {
		Total *big.Int
		Data  []byte
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getRepoUsers", repoID, whichUsers, pageSize, page)
	return *ret, err
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolSession) GetRepoUsers(repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRepoUsers(&_Protocol.CallOpts, repoID, whichUsers, pageSize, page)
}

// GetRepoUsers is a free data retrieval call binding the contract method 0x1ccd4912.
//
// Solidity: function getRepoUsers(repoID string, whichUsers uint8, pageSize uint256, page uint256) constant returns(total uint256, data bytes)
func (_Protocol *ProtocolCallerSession) GetRepoUsers(repoID string, whichUsers uint8, pageSize *big.Int, page *big.Int) (struct {
	Total *big.Int
	Data  []byte
}, error) {
	return _Protocol.Contract.GetRepoUsers(&_Protocol.CallOpts, repoID, whichUsers, pageSize, page)
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolCaller) GetUserPermissions(opts *bind.CallOpts, repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	ret := new(struct {
		Puller bool
		Pusher bool
		Admin  bool
	})
	out := ret
	err := _Protocol.contract.Call(opts, out, "getUserPermissions", repoID, username)
	return *ret, err
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolSession) GetUserPermissions(repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	return _Protocol.Contract.GetUserPermissions(&_Protocol.CallOpts, repoID, username)
}

// GetUserPermissions is a free data retrieval call binding the contract method 0xabd9649c.
//
// Solidity: function getUserPermissions(repoID string, username string) constant returns(puller bool, pusher bool, admin bool)
func (_Protocol *ProtocolCallerSession) GetUserPermissions(repoID string, username string) (struct {
	Puller bool
	Pusher bool
	Admin  bool
}, error) {
	return _Protocol.Contract.GetUserPermissions(&_Protocol.CallOpts, repoID, username)
}

// IsRepoPublic is a free data retrieval call binding the contract method 0x6653a812.
//
// Solidity: function isRepoPublic(repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) IsRepoPublic(opts *bind.CallOpts, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "isRepoPublic", repoID)
	return *ret0, err
}

// IsRepoPublic is a free data retrieval call binding the contract method 0x6653a812.
//
// Solidity: function isRepoPublic(repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) IsRepoPublic(repoID string) (bool, error) {
	return _Protocol.Contract.IsRepoPublic(&_Protocol.CallOpts, repoID)
}

// IsRepoPublic is a free data retrieval call binding the contract method 0x6653a812.
//
// Solidity: function isRepoPublic(repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) IsRepoPublic(repoID string) (bool, error) {
	return _Protocol.Contract.IsRepoPublic(&_Protocol.CallOpts, repoID)
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolCaller) NumRefs(opts *bind.CallOpts, repoID string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "numRefs", repoID)
	return *ret0, err
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolSession) NumRefs(repoID string) (*big.Int, error) {
	return _Protocol.Contract.NumRefs(&_Protocol.CallOpts, repoID)
}

// NumRefs is a free data retrieval call binding the contract method 0xf2ebfa10.
//
// Solidity: function numRefs(repoID string) constant returns(uint256)
func (_Protocol *ProtocolCallerSession) NumRefs(repoID string) (*big.Int, error) {
	return _Protocol.Contract.NumRefs(&_Protocol.CallOpts, repoID)
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) RepoExists(opts *bind.CallOpts, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "repoExists", repoID)
	return *ret0, err
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) RepoExists(repoID string) (bool, error) {
	return _Protocol.Contract.RepoExists(&_Protocol.CallOpts, repoID)
}

// RepoExists is a free data retrieval call binding the contract method 0x592c6a0f.
//
// Solidity: function repoExists(repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) RepoExists(repoID string) (bool, error) {
	return _Protocol.Contract.RepoExists(&_Protocol.CallOpts, repoID)
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserHasPullAccess(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userHasPullAccess", username, repoID)
	return *ret0, err
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserHasPullAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPullAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPullAccess is a free data retrieval call binding the contract method 0xede07dfe.
//
// Solidity: function userHasPullAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserHasPullAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPullAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserHasPushAccess(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userHasPushAccess", username, repoID)
	return *ret0, err
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserHasPushAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPushAccess(&_Protocol.CallOpts, username, repoID)
}

// UserHasPushAccess is a free data retrieval call binding the contract method 0x7bbaf159.
//
// Solidity: function userHasPushAccess(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserHasPushAccess(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserHasPushAccess(&_Protocol.CallOpts, username, repoID)
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCaller) UserIsAdmin(opts *bind.CallOpts, username string, repoID string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "userIsAdmin", username, repoID)
	return *ret0, err
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolSession) UserIsAdmin(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserIsAdmin(&_Protocol.CallOpts, username, repoID)
}

// UserIsAdmin is a free data retrieval call binding the contract method 0xec676189.
//
// Solidity: function userIsAdmin(username string, repoID string) constant returns(bool)
func (_Protocol *ProtocolCallerSession) UserIsAdmin(username string, repoID string) (bool, error) {
	return _Protocol.Contract.UserIsAdmin(&_Protocol.CallOpts, username, repoID)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolCaller) UsernamesByAddress(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Protocol.contract.Call(opts, out, "usernamesByAddress", arg0)
	return *ret0, err
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolSession) UsernamesByAddress(arg0 common.Address) (string, error) {
	return _Protocol.Contract.UsernamesByAddress(&_Protocol.CallOpts, arg0)
}

// UsernamesByAddress is a free data retrieval call binding the contract method 0x42dfb6da.
//
// Solidity: function usernamesByAddress( address) constant returns(string)
func (_Protocol *ProtocolCallerSession) UsernamesByAddress(arg0 common.Address) (string, error) {
	return _Protocol.Contract.UsernamesByAddress(&_Protocol.CallOpts, arg0)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolTransactor) CreateRepo(opts *bind.TransactOpts, repoID string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "createRepo", repoID)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolSession) CreateRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.CreateRepo(&_Protocol.TransactOpts, repoID)
}

// CreateRepo is a paid mutator transaction binding the contract method 0x4fa94bea.
//
// Solidity: function createRepo(repoID string) returns()
func (_Protocol *ProtocolTransactorSession) CreateRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.CreateRepo(&_Protocol.TransactOpts, repoID)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolTransactor) DeleteRef(opts *bind.TransactOpts, repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "deleteRef", repoID, refName)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolSession) DeleteRef(repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRef(&_Protocol.TransactOpts, repoID, refName)
}

// DeleteRef is a paid mutator transaction binding the contract method 0xe07a896d.
//
// Solidity: function deleteRef(repoID string, refName string) returns()
func (_Protocol *ProtocolTransactorSession) DeleteRef(repoID string, refName string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRef(&_Protocol.TransactOpts, repoID, refName)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolTransactor) DeleteRepo(opts *bind.TransactOpts, repoID string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "deleteRepo", repoID)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolSession) DeleteRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRepo(&_Protocol.TransactOpts, repoID)
}

// DeleteRepo is a paid mutator transaction binding the contract method 0xd51c250c.
//
// Solidity: function deleteRepo(repoID string) returns()
func (_Protocol *ProtocolTransactorSession) DeleteRepo(repoID string) (*types.Transaction, error) {
	return _Protocol.Contract.DeleteRepo(&_Protocol.TransactOpts, repoID)
}

// SetPublic is a paid mutator transaction binding the contract method 0x484af658.
//
// Solidity: function setPublic(repoID string, isPublic bool) returns()
func (_Protocol *ProtocolTransactor) SetPublic(opts *bind.TransactOpts, repoID string, isPublic bool) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setPublic", repoID, isPublic)
}

// SetPublic is a paid mutator transaction binding the contract method 0x484af658.
//
// Solidity: function setPublic(repoID string, isPublic bool) returns()
func (_Protocol *ProtocolSession) SetPublic(repoID string, isPublic bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetPublic(&_Protocol.TransactOpts, repoID, isPublic)
}

// SetPublic is a paid mutator transaction binding the contract method 0x484af658.
//
// Solidity: function setPublic(repoID string, isPublic bool) returns()
func (_Protocol *ProtocolTransactorSession) SetPublic(repoID string, isPublic bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetPublic(&_Protocol.TransactOpts, repoID, isPublic)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolTransactor) SetUserPermissions(opts *bind.TransactOpts, repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setUserPermissions", repoID, username, puller, pusher, admin)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolSession) SetUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetUserPermissions(&_Protocol.TransactOpts, repoID, username, puller, pusher, admin)
}

// SetUserPermissions is a paid mutator transaction binding the contract method 0xd4fa6a8f.
//
// Solidity: function setUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) returns()
func (_Protocol *ProtocolTransactorSession) SetUserPermissions(repoID string, username string, puller bool, pusher bool, admin bool) (*types.Transaction, error) {
	return _Protocol.Contract.SetUserPermissions(&_Protocol.TransactOpts, repoID, username, puller, pusher, admin)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolTransactor) SetUsername(opts *bind.TransactOpts, username string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "setUsername", username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolSession) SetUsername(username string) (*types.Transaction, error) {
	return _Protocol.Contract.SetUsername(&_Protocol.TransactOpts, username)
}

// SetUsername is a paid mutator transaction binding the contract method 0xed59313a.
//
// Solidity: function setUsername(username string) returns()
func (_Protocol *ProtocolTransactorSession) SetUsername(username string) (*types.Transaction, error) {
	return _Protocol.Contract.SetUsername(&_Protocol.TransactOpts, username)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x605a5dd8.
//
// Solidity: function updateRef(repoID string, refName string, commitHash string) returns()
func (_Protocol *ProtocolTransactor) UpdateRef(opts *bind.TransactOpts, repoID string, refName string, commitHash string) (*types.Transaction, error) {
	return _Protocol.contract.Transact(opts, "updateRef", repoID, refName, commitHash)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x605a5dd8.
//
// Solidity: function updateRef(repoID string, refName string, commitHash string) returns()
func (_Protocol *ProtocolSession) UpdateRef(repoID string, refName string, commitHash string) (*types.Transaction, error) {
	return _Protocol.Contract.UpdateRef(&_Protocol.TransactOpts, repoID, refName, commitHash)
}

// UpdateRef is a paid mutator transaction binding the contract method 0x605a5dd8.
//
// Solidity: function updateRef(repoID string, refName string, commitHash string) returns()
func (_Protocol *ProtocolTransactorSession) UpdateRef(repoID string, refName string, commitHash string) (*types.Transaction, error) {
	return _Protocol.Contract.UpdateRef(&_Protocol.TransactOpts, repoID, refName, commitHash)
}

// ProtocolLogCreateRepoIterator is returned from FilterLogCreateRepo and is used to iterate over the raw logs and unpacked data for LogCreateRepo events raised by the Protocol contract.
type ProtocolLogCreateRepoIterator struct {
	Event *ProtocolLogCreateRepo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogCreateRepoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogCreateRepo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogCreateRepo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogCreateRepoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogCreateRepoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogCreateRepo represents a LogCreateRepo event raised by the Protocol contract.
type ProtocolLogCreateRepo struct {
	User   common.Address
	RepoID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogCreateRepo is a free log retrieval operation binding the contract event 0x967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae8529.
//
// Solidity: e LogCreateRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) FilterLogCreateRepo(opts *bind.FilterOpts, user []common.Address, repoID []string) (*ProtocolLogCreateRepoIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogCreateRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogCreateRepoIterator{contract: _Protocol.contract, event: "LogCreateRepo", logs: logs, sub: sub}, nil
}

// WatchLogCreateRepo is a free log subscription operation binding the contract event 0x967edc3deaf8913ee580d1a499f00c093253f50ae9a868be5b29618047ae8529.
//
// Solidity: e LogCreateRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) WatchLogCreateRepo(opts *bind.WatchOpts, sink chan<- *ProtocolLogCreateRepo, user []common.Address, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogCreateRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogCreateRepo)
				if err := _Protocol.contract.UnpackLog(event, "LogCreateRepo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogDeleteRefIterator is returned from FilterLogDeleteRef and is used to iterate over the raw logs and unpacked data for LogDeleteRef events raised by the Protocol contract.
type ProtocolLogDeleteRefIterator struct {
	Event *ProtocolLogDeleteRef // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogDeleteRefIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogDeleteRef)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogDeleteRef)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogDeleteRefIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogDeleteRefIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogDeleteRef represents a LogDeleteRef event raised by the Protocol contract.
type ProtocolLogDeleteRef struct {
	User    common.Address
	RepoID  common.Hash
	RefName common.Hash
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterLogDeleteRef is a free log retrieval operation binding the contract event 0xf7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef0549.
//
// Solidity: e LogDeleteRef(user indexed address, repoID indexed string, refName indexed string)
func (_Protocol *ProtocolFilterer) FilterLogDeleteRef(opts *bind.FilterOpts, user []common.Address, repoID []string, refName []string) (*ProtocolLogDeleteRefIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogDeleteRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogDeleteRefIterator{contract: _Protocol.contract, event: "LogDeleteRef", logs: logs, sub: sub}, nil
}

// WatchLogDeleteRef is a free log subscription operation binding the contract event 0xf7f3c15b2efffd8e8e7ba0e47f0d1240c4e8d027aca67641f9863d3c52ef0549.
//
// Solidity: e LogDeleteRef(user indexed address, repoID indexed string, refName indexed string)
func (_Protocol *ProtocolFilterer) WatchLogDeleteRef(opts *bind.WatchOpts, sink chan<- *ProtocolLogDeleteRef, user []common.Address, repoID []string, refName []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogDeleteRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogDeleteRef)
				if err := _Protocol.contract.UnpackLog(event, "LogDeleteRef", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogDeleteRepoIterator is returned from FilterLogDeleteRepo and is used to iterate over the raw logs and unpacked data for LogDeleteRepo events raised by the Protocol contract.
type ProtocolLogDeleteRepoIterator struct {
	Event *ProtocolLogDeleteRepo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogDeleteRepoIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogDeleteRepo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogDeleteRepo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogDeleteRepoIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogDeleteRepoIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogDeleteRepo represents a LogDeleteRepo event raised by the Protocol contract.
type ProtocolLogDeleteRepo struct {
	User   common.Address
	RepoID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogDeleteRepo is a free log retrieval operation binding the contract event 0x2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad.
//
// Solidity: e LogDeleteRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) FilterLogDeleteRepo(opts *bind.FilterOpts, user []common.Address, repoID []string) (*ProtocolLogDeleteRepoIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogDeleteRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogDeleteRepoIterator{contract: _Protocol.contract, event: "LogDeleteRepo", logs: logs, sub: sub}, nil
}

// WatchLogDeleteRepo is a free log subscription operation binding the contract event 0x2a125302c359bb06e95f884b73ed06c2a9247328d0e13d474bb1c94a02d2baad.
//
// Solidity: e LogDeleteRepo(user indexed address, repoID indexed string)
func (_Protocol *ProtocolFilterer) WatchLogDeleteRepo(opts *bind.WatchOpts, sink chan<- *ProtocolLogDeleteRepo, user []common.Address, repoID []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogDeleteRepo", userRule, repoIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogDeleteRepo)
				if err := _Protocol.contract.UnpackLog(event, "LogDeleteRepo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogSetPublicIterator is returned from FilterLogSetPublic and is used to iterate over the raw logs and unpacked data for LogSetPublic events raised by the Protocol contract.
type ProtocolLogSetPublicIterator struct {
	Event *ProtocolLogSetPublic // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogSetPublicIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogSetPublic)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogSetPublic)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogSetPublicIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogSetPublicIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogSetPublic represents a LogSetPublic event raised by the Protocol contract.
type ProtocolLogSetPublic struct {
	User     common.Address
	RepoID   string
	IsPublic bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogSetPublic is a free log retrieval operation binding the contract event 0xafd3374d7b80a84573da7094729fa7e4a8a87165437b49e55a448db5b9df704c.
//
// Solidity: e LogSetPublic(user indexed address, repoID string, isPublic bool)
func (_Protocol *ProtocolFilterer) FilterLogSetPublic(opts *bind.FilterOpts, user []common.Address) (*ProtocolLogSetPublicIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogSetPublic", userRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogSetPublicIterator{contract: _Protocol.contract, event: "LogSetPublic", logs: logs, sub: sub}, nil
}

// WatchLogSetPublic is a free log subscription operation binding the contract event 0xafd3374d7b80a84573da7094729fa7e4a8a87165437b49e55a448db5b9df704c.
//
// Solidity: e LogSetPublic(user indexed address, repoID string, isPublic bool)
func (_Protocol *ProtocolFilterer) WatchLogSetPublic(opts *bind.WatchOpts, sink chan<- *ProtocolLogSetPublic, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogSetPublic", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogSetPublic)
				if err := _Protocol.contract.UnpackLog(event, "LogSetPublic", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogSetUsernameIterator is returned from FilterLogSetUsername and is used to iterate over the raw logs and unpacked data for LogSetUsername events raised by the Protocol contract.
type ProtocolLogSetUsernameIterator struct {
	Event *ProtocolLogSetUsername // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogSetUsernameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogSetUsername)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogSetUsername)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogSetUsernameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogSetUsernameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogSetUsername represents a LogSetUsername event raised by the Protocol contract.
type ProtocolLogSetUsername struct {
	Addr     common.Address
	Username common.Hash
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogSetUsername is a free log retrieval operation binding the contract event 0xaffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d99.
//
// Solidity: e LogSetUsername(addr indexed address, username indexed string)
func (_Protocol *ProtocolFilterer) FilterLogSetUsername(opts *bind.FilterOpts, addr []common.Address, username []string) (*ProtocolLogSetUsernameIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogSetUsername", addrRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogSetUsernameIterator{contract: _Protocol.contract, event: "LogSetUsername", logs: logs, sub: sub}, nil
}

// WatchLogSetUsername is a free log subscription operation binding the contract event 0xaffa6dd92f7ba89dd7b4fdd8809b8e8d38b6431d8f41674fae86cfa06fc66d99.
//
// Solidity: e LogSetUsername(addr indexed address, username indexed string)
func (_Protocol *ProtocolFilterer) WatchLogSetUsername(opts *bind.WatchOpts, sink chan<- *ProtocolLogSetUsername, addr []common.Address, username []string) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}
	var usernameRule []interface{}
	for _, usernameItem := range username {
		usernameRule = append(usernameRule, usernameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogSetUsername", addrRule, usernameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogSetUsername)
				if err := _Protocol.contract.UnpackLog(event, "LogSetUsername", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ProtocolLogUpdateRefIterator is returned from FilterLogUpdateRef and is used to iterate over the raw logs and unpacked data for LogUpdateRef events raised by the Protocol contract.
type ProtocolLogUpdateRefIterator struct {
	Event *ProtocolLogUpdateRef // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProtocolLogUpdateRefIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProtocolLogUpdateRef)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProtocolLogUpdateRef)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProtocolLogUpdateRefIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProtocolLogUpdateRefIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProtocolLogUpdateRef represents a LogUpdateRef event raised by the Protocol contract.
type ProtocolLogUpdateRef struct {
	User       common.Address
	RepoID     common.Hash
	RefName    common.Hash
	CommitHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLogUpdateRef is a free log retrieval operation binding the contract event 0xc77d795c5ada12e6e61f6ca6c04423828f0660699387fefc548700aad589669b.
//
// Solidity: e LogUpdateRef(user indexed address, repoID indexed string, refName indexed string, commitHash string)
func (_Protocol *ProtocolFilterer) FilterLogUpdateRef(opts *bind.FilterOpts, user []common.Address, repoID []string, refName []string) (*ProtocolLogUpdateRefIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.FilterLogs(opts, "LogUpdateRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return &ProtocolLogUpdateRefIterator{contract: _Protocol.contract, event: "LogUpdateRef", logs: logs, sub: sub}, nil
}

// WatchLogUpdateRef is a free log subscription operation binding the contract event 0xc77d795c5ada12e6e61f6ca6c04423828f0660699387fefc548700aad589669b.
//
// Solidity: e LogUpdateRef(user indexed address, repoID indexed string, refName indexed string, commitHash string)
func (_Protocol *ProtocolFilterer) WatchLogUpdateRef(opts *bind.WatchOpts, sink chan<- *ProtocolLogUpdateRef, user []common.Address, repoID []string, refName []string) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var repoIDRule []interface{}
	for _, repoIDItem := range repoID {
		repoIDRule = append(repoIDRule, repoIDItem)
	}
	var refNameRule []interface{}
	for _, refNameItem := range refName {
		refNameRule = append(refNameRule, refNameItem)
	}

	logs, sub, err := _Protocol.contract.WatchLogs(opts, "LogUpdateRef", userRule, repoIDRule, refNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProtocolLogUpdateRef)
				if err := _Protocol.contract.UnpackLog(event, "LogUpdateRef", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
