// Code generated by protoc-gen-go. DO NOT EDIT.
// source: noderpc.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	noderpc.proto

It has these top-level messages:
	SetUsernameRequest
	SetUsernameResponse
	GetUsernameRequest
	GetUsernameResponse
	InitRepoRequest
	InitRepoResponse
	CheckpointRepoRequest
	CheckpointRepoResponse
	PullRepoRequest
	PullRepoResponsePacket
	CloneRepoRequest
	CloneRepoResponsePacket
	FetchFromCommitRequest
	FetchFromCommitResponse
	RegisterRepoIDRequest
	FetchChunksRequest
	FetchChunksResponse
	RegisterRepoIDResponse
	TrackLocalRepoRequest
	TrackLocalRepoResponse
	GetLocalReposRequest
	GetLocalReposResponsePacket
	SetReplicationPolicyRequest
	SetReplicationPolicyResponse
	AnnounceRepoContentRequest
	AnnounceRepoContentResponse
	Ref
	GetLocalRefsRequest
	GetLocalRefsResponse
	GetRemoteRefsRequest
	GetRemoteRefsResponse
	IsBehindRemoteRequest
	IsBehindRemoteResponse
	UpdateRefRequest
	UpdateRefResponse
	ReplicationRequest
	ReplicationResponsePacket
	SetRepoPublicRequest
	SetRepoPublicResponse
	IsRepoPublicRequest
	IsRepoPublicResponse
	GetRepoUsersRequest
	GetRepoUsersResponse
	SetUserPermissionsRequest
	SetUserPermissionsResponse
	GetRepoHistoryRequest
	Commit
	GetRepoHistoryResponse
	GetRepoFilesRequest
	File
	GetRepoFilesResponse
	RepoHasObjectRequest
	RepoHasObjectResponse
	SignMessageRequest
	SignMessageResponse
	EthAddressRequest
	EthAddressResponse
	GetObjectRequest
	GetObjectResponse
	GetDiffRequest
	GetDiffResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SetUsernameRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *SetUsernameRequest) Reset()                    { *m = SetUsernameRequest{} }
func (m *SetUsernameRequest) String() string            { return proto.CompactTextString(m) }
func (*SetUsernameRequest) ProtoMessage()               {}
func (*SetUsernameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SetUsernameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type SetUsernameResponse struct {
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SetUsernameResponse) Reset()                    { *m = SetUsernameResponse{} }
func (m *SetUsernameResponse) String() string            { return proto.CompactTextString(m) }
func (*SetUsernameResponse) ProtoMessage()               {}
func (*SetUsernameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SetUsernameResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type GetUsernameRequest struct {
}

func (m *GetUsernameRequest) Reset()                    { *m = GetUsernameRequest{} }
func (m *GetUsernameRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUsernameRequest) ProtoMessage()               {}
func (*GetUsernameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetUsernameResponse struct {
	Username  string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *GetUsernameResponse) Reset()                    { *m = GetUsernameResponse{} }
func (m *GetUsernameResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUsernameResponse) ProtoMessage()               {}
func (*GetUsernameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetUsernameResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetUsernameResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type InitRepoRequest struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Email  string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
}

func (m *InitRepoRequest) Reset()                    { *m = InitRepoRequest{} }
func (m *InitRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*InitRepoRequest) ProtoMessage()               {}
func (*InitRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InitRepoRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *InitRepoRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *InitRepoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InitRepoRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type InitRepoResponse struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *InitRepoResponse) Reset()                    { *m = InitRepoResponse{} }
func (m *InitRepoResponse) String() string            { return proto.CompactTextString(m) }
func (*InitRepoResponse) ProtoMessage()               {}
func (*InitRepoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InitRepoResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type CheckpointRepoRequest struct {
	Path    string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *CheckpointRepoRequest) Reset()                    { *m = CheckpointRepoRequest{} }
func (m *CheckpointRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckpointRepoRequest) ProtoMessage()               {}
func (*CheckpointRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CheckpointRepoRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CheckpointRepoRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CheckpointRepoResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *CheckpointRepoResponse) Reset()                    { *m = CheckpointRepoResponse{} }
func (m *CheckpointRepoResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckpointRepoResponse) ProtoMessage()               {}
func (*CheckpointRepoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CheckpointRepoResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type PullRepoRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *PullRepoRequest) Reset()                    { *m = PullRepoRequest{} }
func (m *PullRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*PullRepoRequest) ProtoMessage()               {}
func (*PullRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PullRepoRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type PullRepoResponsePacket struct {
	ToFetch int64 `protobuf:"varint,1,opt,name=toFetch" json:"toFetch,omitempty"`
	Fetched int64 `protobuf:"varint,2,opt,name=fetched" json:"fetched,omitempty"`
}

func (m *PullRepoResponsePacket) Reset()                    { *m = PullRepoResponsePacket{} }
func (m *PullRepoResponsePacket) String() string            { return proto.CompactTextString(m) }
func (*PullRepoResponsePacket) ProtoMessage()               {}
func (*PullRepoResponsePacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PullRepoResponsePacket) GetToFetch() int64 {
	if m != nil {
		return m.ToFetch
	}
	return 0
}

func (m *PullRepoResponsePacket) GetFetched() int64 {
	if m != nil {
		return m.Fetched
	}
	return 0
}

type CloneRepoRequest struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Email  string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
}

func (m *CloneRepoRequest) Reset()                    { *m = CloneRepoRequest{} }
func (m *CloneRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*CloneRepoRequest) ProtoMessage()               {}
func (*CloneRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CloneRepoRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *CloneRepoRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CloneRepoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CloneRepoRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type CloneRepoResponsePacket struct {
	// Types that are valid to be assigned to Payload:
	//	*CloneRepoResponsePacket_Progress_
	//	*CloneRepoResponsePacket_Success_
	Payload isCloneRepoResponsePacket_Payload `protobuf_oneof:"payload"`
}

func (m *CloneRepoResponsePacket) Reset()                    { *m = CloneRepoResponsePacket{} }
func (m *CloneRepoResponsePacket) String() string            { return proto.CompactTextString(m) }
func (*CloneRepoResponsePacket) ProtoMessage()               {}
func (*CloneRepoResponsePacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isCloneRepoResponsePacket_Payload interface{ isCloneRepoResponsePacket_Payload() }

type CloneRepoResponsePacket_Progress_ struct {
	Progress *CloneRepoResponsePacket_Progress `protobuf:"bytes,1,opt,name=progress,oneof"`
}
type CloneRepoResponsePacket_Success_ struct {
	Success *CloneRepoResponsePacket_Success `protobuf:"bytes,2,opt,name=success,oneof"`
}

func (*CloneRepoResponsePacket_Progress_) isCloneRepoResponsePacket_Payload() {}
func (*CloneRepoResponsePacket_Success_) isCloneRepoResponsePacket_Payload()  {}

func (m *CloneRepoResponsePacket) GetPayload() isCloneRepoResponsePacket_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CloneRepoResponsePacket) GetProgress() *CloneRepoResponsePacket_Progress {
	if x, ok := m.GetPayload().(*CloneRepoResponsePacket_Progress_); ok {
		return x.Progress
	}
	return nil
}

func (m *CloneRepoResponsePacket) GetSuccess() *CloneRepoResponsePacket_Success {
	if x, ok := m.GetPayload().(*CloneRepoResponsePacket_Success_); ok {
		return x.Success
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CloneRepoResponsePacket) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CloneRepoResponsePacket_OneofMarshaler, _CloneRepoResponsePacket_OneofUnmarshaler, _CloneRepoResponsePacket_OneofSizer, []interface{}{
		(*CloneRepoResponsePacket_Progress_)(nil),
		(*CloneRepoResponsePacket_Success_)(nil),
	}
}

func _CloneRepoResponsePacket_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CloneRepoResponsePacket)
	// payload
	switch x := m.Payload.(type) {
	case *CloneRepoResponsePacket_Progress_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Progress); err != nil {
			return err
		}
	case *CloneRepoResponsePacket_Success_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CloneRepoResponsePacket.Payload has unexpected type %T", x)
	}
	return nil
}

func _CloneRepoResponsePacket_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CloneRepoResponsePacket)
	switch tag {
	case 1: // payload.progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloneRepoResponsePacket_Progress)
		err := b.DecodeMessage(msg)
		m.Payload = &CloneRepoResponsePacket_Progress_{msg}
		return true, err
	case 2: // payload.success
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloneRepoResponsePacket_Success)
		err := b.DecodeMessage(msg)
		m.Payload = &CloneRepoResponsePacket_Success_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CloneRepoResponsePacket_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CloneRepoResponsePacket)
	// payload
	switch x := m.Payload.(type) {
	case *CloneRepoResponsePacket_Progress_:
		s := proto.Size(x.Progress)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CloneRepoResponsePacket_Success_:
		s := proto.Size(x.Success)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CloneRepoResponsePacket_Progress struct {
	ToFetch int64 `protobuf:"varint,1,opt,name=toFetch" json:"toFetch,omitempty"`
	Fetched int64 `protobuf:"varint,2,opt,name=fetched" json:"fetched,omitempty"`
}

func (m *CloneRepoResponsePacket_Progress) Reset()         { *m = CloneRepoResponsePacket_Progress{} }
func (m *CloneRepoResponsePacket_Progress) String() string { return proto.CompactTextString(m) }
func (*CloneRepoResponsePacket_Progress) ProtoMessage()    {}
func (*CloneRepoResponsePacket_Progress) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

func (m *CloneRepoResponsePacket_Progress) GetToFetch() int64 {
	if m != nil {
		return m.ToFetch
	}
	return 0
}

func (m *CloneRepoResponsePacket_Progress) GetFetched() int64 {
	if m != nil {
		return m.Fetched
	}
	return 0
}

type CloneRepoResponsePacket_Success struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *CloneRepoResponsePacket_Success) Reset()         { *m = CloneRepoResponsePacket_Success{} }
func (m *CloneRepoResponsePacket_Success) String() string { return proto.CompactTextString(m) }
func (*CloneRepoResponsePacket_Success) ProtoMessage()    {}
func (*CloneRepoResponsePacket_Success) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 1}
}

func (m *CloneRepoResponsePacket_Success) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type FetchFromCommitRequest struct {
	RepoID       string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Path         string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Commit       []byte `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	CheckoutType uint64 `protobuf:"varint,4,opt,name=checkoutType" json:"checkoutType,omitempty"`
}

func (m *FetchFromCommitRequest) Reset()                    { *m = FetchFromCommitRequest{} }
func (m *FetchFromCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchFromCommitRequest) ProtoMessage()               {}
func (*FetchFromCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FetchFromCommitRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *FetchFromCommitRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FetchFromCommitRequest) GetCommit() []byte {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *FetchFromCommitRequest) GetCheckoutType() uint64 {
	if m != nil {
		return m.CheckoutType
	}
	return 0
}

type FetchFromCommitResponse struct {
	// Types that are valid to be assigned to Payload:
	//	*FetchFromCommitResponse_Header_
	//	*FetchFromCommitResponse_PackfileHeader_
	//	*FetchFromCommitResponse_PackfileData_
	//	*FetchFromCommitResponse_Chunk_
	Payload isFetchFromCommitResponse_Payload `protobuf_oneof:"payload"`
}

func (m *FetchFromCommitResponse) Reset()                    { *m = FetchFromCommitResponse{} }
func (m *FetchFromCommitResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchFromCommitResponse) ProtoMessage()               {}
func (*FetchFromCommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type isFetchFromCommitResponse_Payload interface{ isFetchFromCommitResponse_Payload() }

type FetchFromCommitResponse_Header_ struct {
	Header *FetchFromCommitResponse_Header `protobuf:"bytes,1,opt,name=header,oneof"`
}
type FetchFromCommitResponse_PackfileHeader_ struct {
	PackfileHeader *FetchFromCommitResponse_PackfileHeader `protobuf:"bytes,2,opt,name=packfileHeader,oneof"`
}
type FetchFromCommitResponse_PackfileData_ struct {
	PackfileData *FetchFromCommitResponse_PackfileData `protobuf:"bytes,3,opt,name=packfileData,oneof"`
}
type FetchFromCommitResponse_Chunk_ struct {
	Chunk *FetchFromCommitResponse_Chunk `protobuf:"bytes,4,opt,name=chunk,oneof"`
}

func (*FetchFromCommitResponse_Header_) isFetchFromCommitResponse_Payload()         {}
func (*FetchFromCommitResponse_PackfileHeader_) isFetchFromCommitResponse_Payload() {}
func (*FetchFromCommitResponse_PackfileData_) isFetchFromCommitResponse_Payload()   {}
func (*FetchFromCommitResponse_Chunk_) isFetchFromCommitResponse_Payload()          {}

func (m *FetchFromCommitResponse) GetPayload() isFetchFromCommitResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *FetchFromCommitResponse) GetHeader() *FetchFromCommitResponse_Header {
	if x, ok := m.GetPayload().(*FetchFromCommitResponse_Header_); ok {
		return x.Header
	}
	return nil
}

func (m *FetchFromCommitResponse) GetPackfileHeader() *FetchFromCommitResponse_PackfileHeader {
	if x, ok := m.GetPayload().(*FetchFromCommitResponse_PackfileHeader_); ok {
		return x.PackfileHeader
	}
	return nil
}

func (m *FetchFromCommitResponse) GetPackfileData() *FetchFromCommitResponse_PackfileData {
	if x, ok := m.GetPayload().(*FetchFromCommitResponse_PackfileData_); ok {
		return x.PackfileData
	}
	return nil
}

func (m *FetchFromCommitResponse) GetChunk() *FetchFromCommitResponse_Chunk {
	if x, ok := m.GetPayload().(*FetchFromCommitResponse_Chunk_); ok {
		return x.Chunk
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FetchFromCommitResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FetchFromCommitResponse_OneofMarshaler, _FetchFromCommitResponse_OneofUnmarshaler, _FetchFromCommitResponse_OneofSizer, []interface{}{
		(*FetchFromCommitResponse_Header_)(nil),
		(*FetchFromCommitResponse_PackfileHeader_)(nil),
		(*FetchFromCommitResponse_PackfileData_)(nil),
		(*FetchFromCommitResponse_Chunk_)(nil),
	}
}

func _FetchFromCommitResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FetchFromCommitResponse)
	// payload
	switch x := m.Payload.(type) {
	case *FetchFromCommitResponse_Header_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *FetchFromCommitResponse_PackfileHeader_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PackfileHeader); err != nil {
			return err
		}
	case *FetchFromCommitResponse_PackfileData_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PackfileData); err != nil {
			return err
		}
	case *FetchFromCommitResponse_Chunk_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chunk); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FetchFromCommitResponse.Payload has unexpected type %T", x)
	}
	return nil
}

func _FetchFromCommitResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FetchFromCommitResponse)
	switch tag {
	case 1: // payload.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FetchFromCommitResponse_Header)
		err := b.DecodeMessage(msg)
		m.Payload = &FetchFromCommitResponse_Header_{msg}
		return true, err
	case 2: // payload.packfileHeader
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FetchFromCommitResponse_PackfileHeader)
		err := b.DecodeMessage(msg)
		m.Payload = &FetchFromCommitResponse_PackfileHeader_{msg}
		return true, err
	case 3: // payload.packfileData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FetchFromCommitResponse_PackfileData)
		err := b.DecodeMessage(msg)
		m.Payload = &FetchFromCommitResponse_PackfileData_{msg}
		return true, err
	case 4: // payload.chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FetchFromCommitResponse_Chunk)
		err := b.DecodeMessage(msg)
		m.Payload = &FetchFromCommitResponse_Chunk_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FetchFromCommitResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FetchFromCommitResponse)
	// payload
	switch x := m.Payload.(type) {
	case *FetchFromCommitResponse_Header_:
		s := proto.Size(x.Header)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FetchFromCommitResponse_PackfileHeader_:
		s := proto.Size(x.PackfileHeader)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FetchFromCommitResponse_PackfileData_:
		s := proto.Size(x.PackfileData)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FetchFromCommitResponse_Chunk_:
		s := proto.Size(x.Chunk)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FetchFromCommitResponse_Header struct {
	UncompressedSize int64 `protobuf:"varint,1,opt,name=uncompressedSize" json:"uncompressedSize,omitempty"`
	TotalChunks      int64 `protobuf:"varint,2,opt,name=totalChunks" json:"totalChunks,omitempty"`
}

func (m *FetchFromCommitResponse_Header) Reset()         { *m = FetchFromCommitResponse_Header{} }
func (m *FetchFromCommitResponse_Header) String() string { return proto.CompactTextString(m) }
func (*FetchFromCommitResponse_Header) ProtoMessage()    {}
func (*FetchFromCommitResponse_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

func (m *FetchFromCommitResponse_Header) GetUncompressedSize() int64 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func (m *FetchFromCommitResponse_Header) GetTotalChunks() int64 {
	if m != nil {
		return m.TotalChunks
	}
	return 0
}

type FetchFromCommitResponse_PackfileHeader struct {
	PackfileID       []byte `protobuf:"bytes,1,opt,name=packfileID,proto3" json:"packfileID,omitempty"`
	UncompressedSize int64  `protobuf:"varint,2,opt,name=uncompressedSize" json:"uncompressedSize,omitempty"`
}

func (m *FetchFromCommitResponse_PackfileHeader) Reset() {
	*m = FetchFromCommitResponse_PackfileHeader{}
}
func (m *FetchFromCommitResponse_PackfileHeader) String() string { return proto.CompactTextString(m) }
func (*FetchFromCommitResponse_PackfileHeader) ProtoMessage()    {}
func (*FetchFromCommitResponse_PackfileHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 1}
}

func (m *FetchFromCommitResponse_PackfileHeader) GetPackfileID() []byte {
	if m != nil {
		return m.PackfileID
	}
	return nil
}

func (m *FetchFromCommitResponse_PackfileHeader) GetUncompressedSize() int64 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

type FetchFromCommitResponse_PackfileData struct {
	PackfileID []byte `protobuf:"bytes,1,opt,name=packfileID,proto3" json:"packfileID,omitempty"`
	Data       []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	End        bool   `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
}

func (m *FetchFromCommitResponse_PackfileData) Reset()         { *m = FetchFromCommitResponse_PackfileData{} }
func (m *FetchFromCommitResponse_PackfileData) String() string { return proto.CompactTextString(m) }
func (*FetchFromCommitResponse_PackfileData) ProtoMessage()    {}
func (*FetchFromCommitResponse_PackfileData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 2}
}

func (m *FetchFromCommitResponse_PackfileData) GetPackfileID() []byte {
	if m != nil {
		return m.PackfileID
	}
	return nil
}

func (m *FetchFromCommitResponse_PackfileData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FetchFromCommitResponse_PackfileData) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

type FetchFromCommitResponse_Chunk struct {
	ObjectID []byte `protobuf:"bytes,1,opt,name=objectID,proto3" json:"objectID,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	End      bool   `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
}

func (m *FetchFromCommitResponse_Chunk) Reset()         { *m = FetchFromCommitResponse_Chunk{} }
func (m *FetchFromCommitResponse_Chunk) String() string { return proto.CompactTextString(m) }
func (*FetchFromCommitResponse_Chunk) ProtoMessage()    {}
func (*FetchFromCommitResponse_Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 3}
}

func (m *FetchFromCommitResponse_Chunk) GetObjectID() []byte {
	if m != nil {
		return m.ObjectID
	}
	return nil
}

func (m *FetchFromCommitResponse_Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FetchFromCommitResponse_Chunk) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

type RegisterRepoIDRequest struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
}

func (m *RegisterRepoIDRequest) Reset()                    { *m = RegisterRepoIDRequest{} }
func (m *RegisterRepoIDRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRepoIDRequest) ProtoMessage()               {}
func (*RegisterRepoIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RegisterRepoIDRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

type FetchChunksRequest struct {
	RepoID string   `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Path   string   `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Chunks [][]byte `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (m *FetchChunksRequest) Reset()                    { *m = FetchChunksRequest{} }
func (m *FetchChunksRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchChunksRequest) ProtoMessage()               {}
func (*FetchChunksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FetchChunksRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *FetchChunksRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FetchChunksRequest) GetChunks() [][]byte {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type FetchChunksResponse struct {
	ObjectID []byte `protobuf:"bytes,1,opt,name=objectID,proto3" json:"objectID,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	End      bool   `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
}

func (m *FetchChunksResponse) Reset()                    { *m = FetchChunksResponse{} }
func (m *FetchChunksResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchChunksResponse) ProtoMessage()               {}
func (*FetchChunksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FetchChunksResponse) GetObjectID() []byte {
	if m != nil {
		return m.ObjectID
	}
	return nil
}

func (m *FetchChunksResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FetchChunksResponse) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

type RegisterRepoIDResponse struct {
}

func (m *RegisterRepoIDResponse) Reset()                    { *m = RegisterRepoIDResponse{} }
func (m *RegisterRepoIDResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterRepoIDResponse) ProtoMessage()               {}
func (*RegisterRepoIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type TrackLocalRepoRequest struct {
	RepoPath    string `protobuf:"bytes,1,opt,name=repoPath" json:"repoPath,omitempty"`
	ForceReload bool   `protobuf:"varint,2,opt,name=forceReload" json:"forceReload,omitempty"`
}

func (m *TrackLocalRepoRequest) Reset()                    { *m = TrackLocalRepoRequest{} }
func (m *TrackLocalRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*TrackLocalRepoRequest) ProtoMessage()               {}
func (*TrackLocalRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *TrackLocalRepoRequest) GetRepoPath() string {
	if m != nil {
		return m.RepoPath
	}
	return ""
}

func (m *TrackLocalRepoRequest) GetForceReload() bool {
	if m != nil {
		return m.ForceReload
	}
	return false
}

type TrackLocalRepoResponse struct {
}

func (m *TrackLocalRepoResponse) Reset()                    { *m = TrackLocalRepoResponse{} }
func (m *TrackLocalRepoResponse) String() string            { return proto.CompactTextString(m) }
func (*TrackLocalRepoResponse) ProtoMessage()               {}
func (*TrackLocalRepoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type GetLocalReposRequest struct {
}

func (m *GetLocalReposRequest) Reset()                    { *m = GetLocalReposRequest{} }
func (m *GetLocalReposRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLocalReposRequest) ProtoMessage()               {}
func (*GetLocalReposRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type GetLocalReposResponsePacket struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *GetLocalReposResponsePacket) Reset()                    { *m = GetLocalReposResponsePacket{} }
func (m *GetLocalReposResponsePacket) String() string            { return proto.CompactTextString(m) }
func (*GetLocalReposResponsePacket) ProtoMessage()               {}
func (*GetLocalReposResponsePacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetLocalReposResponsePacket) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *GetLocalReposResponsePacket) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SetReplicationPolicyRequest struct {
	RepoID          string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	ShouldReplicate bool   `protobuf:"varint,2,opt,name=shouldReplicate" json:"shouldReplicate,omitempty"`
}

func (m *SetReplicationPolicyRequest) Reset()                    { *m = SetReplicationPolicyRequest{} }
func (m *SetReplicationPolicyRequest) String() string            { return proto.CompactTextString(m) }
func (*SetReplicationPolicyRequest) ProtoMessage()               {}
func (*SetReplicationPolicyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SetReplicationPolicyRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *SetReplicationPolicyRequest) GetShouldReplicate() bool {
	if m != nil {
		return m.ShouldReplicate
	}
	return false
}

type SetReplicationPolicyResponse struct {
}

func (m *SetReplicationPolicyResponse) Reset()                    { *m = SetReplicationPolicyResponse{} }
func (m *SetReplicationPolicyResponse) String() string            { return proto.CompactTextString(m) }
func (*SetReplicationPolicyResponse) ProtoMessage()               {}
func (*SetReplicationPolicyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type AnnounceRepoContentRequest struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
}

func (m *AnnounceRepoContentRequest) Reset()                    { *m = AnnounceRepoContentRequest{} }
func (m *AnnounceRepoContentRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnounceRepoContentRequest) ProtoMessage()               {}
func (*AnnounceRepoContentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *AnnounceRepoContentRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

type AnnounceRepoContentResponse struct {
}

func (m *AnnounceRepoContentResponse) Reset()                    { *m = AnnounceRepoContentResponse{} }
func (m *AnnounceRepoContentResponse) String() string            { return proto.CompactTextString(m) }
func (*AnnounceRepoContentResponse) ProtoMessage()               {}
func (*AnnounceRepoContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type Ref struct {
	RefName    string `protobuf:"bytes,1,opt,name=refName" json:"refName,omitempty"`
	CommitHash string `protobuf:"bytes,2,opt,name=commitHash" json:"commitHash,omitempty"`
}

func (m *Ref) Reset()                    { *m = Ref{} }
func (m *Ref) String() string            { return proto.CompactTextString(m) }
func (*Ref) ProtoMessage()               {}
func (*Ref) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Ref) GetRefName() string {
	if m != nil {
		return m.RefName
	}
	return ""
}

func (m *Ref) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

type GetLocalRefsRequest struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *GetLocalRefsRequest) Reset()                    { *m = GetLocalRefsRequest{} }
func (m *GetLocalRefsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLocalRefsRequest) ProtoMessage()               {}
func (*GetLocalRefsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetLocalRefsRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *GetLocalRefsRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type GetLocalRefsResponse struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Refs []*Ref `protobuf:"bytes,2,rep,name=refs" json:"refs,omitempty"`
}

func (m *GetLocalRefsResponse) Reset()                    { *m = GetLocalRefsResponse{} }
func (m *GetLocalRefsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLocalRefsResponse) ProtoMessage()               {}
func (*GetLocalRefsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GetLocalRefsResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GetLocalRefsResponse) GetRefs() []*Ref {
	if m != nil {
		return m.Refs
	}
	return nil
}

type GetRemoteRefsRequest struct {
	RepoID   string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	PageSize uint64 `protobuf:"varint,2,opt,name=pageSize" json:"pageSize,omitempty"`
	Page     uint64 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (m *GetRemoteRefsRequest) Reset()                    { *m = GetRemoteRefsRequest{} }
func (m *GetRemoteRefsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRemoteRefsRequest) ProtoMessage()               {}
func (*GetRemoteRefsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetRemoteRefsRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *GetRemoteRefsRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetRemoteRefsRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type GetRemoteRefsResponse struct {
	Total uint64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Refs  []*Ref `protobuf:"bytes,2,rep,name=refs" json:"refs,omitempty"`
}

func (m *GetRemoteRefsResponse) Reset()                    { *m = GetRemoteRefsResponse{} }
func (m *GetRemoteRefsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRemoteRefsResponse) ProtoMessage()               {}
func (*GetRemoteRefsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetRemoteRefsResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetRemoteRefsResponse) GetRefs() []*Ref {
	if m != nil {
		return m.Refs
	}
	return nil
}

type IsBehindRemoteRequest struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *IsBehindRemoteRequest) Reset()                    { *m = IsBehindRemoteRequest{} }
func (m *IsBehindRemoteRequest) String() string            { return proto.CompactTextString(m) }
func (*IsBehindRemoteRequest) ProtoMessage()               {}
func (*IsBehindRemoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *IsBehindRemoteRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *IsBehindRemoteRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type IsBehindRemoteResponse struct {
	RepoID         string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	IsBehindRemote bool   `protobuf:"varint,2,opt,name=isBehindRemote" json:"isBehindRemote,omitempty"`
}

func (m *IsBehindRemoteResponse) Reset()                    { *m = IsBehindRemoteResponse{} }
func (m *IsBehindRemoteResponse) String() string            { return proto.CompactTextString(m) }
func (*IsBehindRemoteResponse) ProtoMessage()               {}
func (*IsBehindRemoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *IsBehindRemoteResponse) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *IsBehindRemoteResponse) GetIsBehindRemote() bool {
	if m != nil {
		return m.IsBehindRemote
	}
	return false
}

type UpdateRefRequest struct {
	RepoID     string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	RefName    string `protobuf:"bytes,2,opt,name=refName" json:"refName,omitempty"`
	CommitHash string `protobuf:"bytes,3,opt,name=commitHash" json:"commitHash,omitempty"`
}

func (m *UpdateRefRequest) Reset()                    { *m = UpdateRefRequest{} }
func (m *UpdateRefRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRefRequest) ProtoMessage()               {}
func (*UpdateRefRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *UpdateRefRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *UpdateRefRequest) GetRefName() string {
	if m != nil {
		return m.RefName
	}
	return ""
}

func (m *UpdateRefRequest) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

type UpdateRefResponse struct {
}

func (m *UpdateRefResponse) Reset()                    { *m = UpdateRefResponse{} }
func (m *UpdateRefResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRefResponse) ProtoMessage()               {}
func (*UpdateRefResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type ReplicationRequest struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
}

func (m *ReplicationRequest) Reset()                    { *m = ReplicationRequest{} }
func (m *ReplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplicationRequest) ProtoMessage()               {}
func (*ReplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ReplicationRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

type ReplicationResponsePacket struct {
	Percent int32 `protobuf:"varint,1,opt,name=percent" json:"percent,omitempty"`
}

func (m *ReplicationResponsePacket) Reset()                    { *m = ReplicationResponsePacket{} }
func (m *ReplicationResponsePacket) String() string            { return proto.CompactTextString(m) }
func (*ReplicationResponsePacket) ProtoMessage()               {}
func (*ReplicationResponsePacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ReplicationResponsePacket) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type SetRepoPublicRequest struct {
	RepoID   string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	IsPublic bool   `protobuf:"varint,2,opt,name=isPublic" json:"isPublic,omitempty"`
}

func (m *SetRepoPublicRequest) Reset()                    { *m = SetRepoPublicRequest{} }
func (m *SetRepoPublicRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRepoPublicRequest) ProtoMessage()               {}
func (*SetRepoPublicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *SetRepoPublicRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *SetRepoPublicRequest) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

type SetRepoPublicResponse struct {
	RepoID   string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	IsPublic bool   `protobuf:"varint,2,opt,name=isPublic" json:"isPublic,omitempty"`
}

func (m *SetRepoPublicResponse) Reset()                    { *m = SetRepoPublicResponse{} }
func (m *SetRepoPublicResponse) String() string            { return proto.CompactTextString(m) }
func (*SetRepoPublicResponse) ProtoMessage()               {}
func (*SetRepoPublicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *SetRepoPublicResponse) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *SetRepoPublicResponse) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

type IsRepoPublicRequest struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
}

func (m *IsRepoPublicRequest) Reset()                    { *m = IsRepoPublicRequest{} }
func (m *IsRepoPublicRequest) String() string            { return proto.CompactTextString(m) }
func (*IsRepoPublicRequest) ProtoMessage()               {}
func (*IsRepoPublicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *IsRepoPublicRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

type IsRepoPublicResponse struct {
	RepoID   string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	IsPublic bool   `protobuf:"varint,2,opt,name=isPublic" json:"isPublic,omitempty"`
}

func (m *IsRepoPublicResponse) Reset()                    { *m = IsRepoPublicResponse{} }
func (m *IsRepoPublicResponse) String() string            { return proto.CompactTextString(m) }
func (*IsRepoPublicResponse) ProtoMessage()               {}
func (*IsRepoPublicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *IsRepoPublicResponse) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *IsRepoPublicResponse) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

type GetRepoUsersRequest struct {
	RepoID   string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Type     uint64 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize" json:"pageSize,omitempty"`
	Page     uint64 `protobuf:"varint,4,opt,name=page" json:"page,omitempty"`
}

func (m *GetRepoUsersRequest) Reset()                    { *m = GetRepoUsersRequest{} }
func (m *GetRepoUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRepoUsersRequest) ProtoMessage()               {}
func (*GetRepoUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *GetRepoUsersRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *GetRepoUsersRequest) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GetRepoUsersRequest) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetRepoUsersRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type GetRepoUsersResponse struct {
	Total uint64   `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Users []string `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *GetRepoUsersResponse) Reset()                    { *m = GetRepoUsersResponse{} }
func (m *GetRepoUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRepoUsersResponse) ProtoMessage()               {}
func (*GetRepoUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *GetRepoUsersResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetRepoUsersResponse) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

type SetUserPermissionsRequest struct {
	RepoID   string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Puller   bool   `protobuf:"varint,3,opt,name=puller" json:"puller,omitempty"`
	Pusher   bool   `protobuf:"varint,4,opt,name=pusher" json:"pusher,omitempty"`
	Admin    bool   `protobuf:"varint,5,opt,name=admin" json:"admin,omitempty"`
}

func (m *SetUserPermissionsRequest) Reset()                    { *m = SetUserPermissionsRequest{} }
func (m *SetUserPermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetUserPermissionsRequest) ProtoMessage()               {}
func (*SetUserPermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *SetUserPermissionsRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *SetUserPermissionsRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SetUserPermissionsRequest) GetPuller() bool {
	if m != nil {
		return m.Puller
	}
	return false
}

func (m *SetUserPermissionsRequest) GetPusher() bool {
	if m != nil {
		return m.Pusher
	}
	return false
}

func (m *SetUserPermissionsRequest) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

type SetUserPermissionsResponse struct {
}

func (m *SetUserPermissionsResponse) Reset()                    { *m = SetUserPermissionsResponse{} }
func (m *SetUserPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*SetUserPermissionsResponse) ProtoMessage()               {}
func (*SetUserPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

type GetRepoHistoryRequest struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Page   uint64 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (m *GetRepoHistoryRequest) Reset()                    { *m = GetRepoHistoryRequest{} }
func (m *GetRepoHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRepoHistoryRequest) ProtoMessage()               {}
func (*GetRepoHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *GetRepoHistoryRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *GetRepoHistoryRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GetRepoHistoryRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

type Commit struct {
	CommitHash string   `protobuf:"bytes,1,opt,name=commitHash" json:"commitHash,omitempty"`
	Author     string   `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Message    string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Timestamp  uint64   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Files      []string `protobuf:"bytes,5,rep,name=files" json:"files,omitempty"`
	Verified   uint64   `protobuf:"varint,6,opt,name=verified" json:"verified,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *Commit) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

func (m *Commit) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Commit) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Commit) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Commit) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Commit) GetVerified() uint64 {
	if m != nil {
		return m.Verified
	}
	return 0
}

type GetRepoHistoryResponse struct {
	Commits []*Commit `protobuf:"bytes,1,rep,name=commits" json:"commits,omitempty"`
}

func (m *GetRepoHistoryResponse) Reset()                    { *m = GetRepoHistoryResponse{} }
func (m *GetRepoHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRepoHistoryResponse) ProtoMessage()               {}
func (*GetRepoHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *GetRepoHistoryResponse) GetCommits() []*Commit {
	if m != nil {
		return m.Commits
	}
	return nil
}

type GetRepoFilesRequest struct {
	RepoID string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *GetRepoFilesRequest) Reset()                    { *m = GetRepoFilesRequest{} }
func (m *GetRepoFilesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRepoFilesRequest) ProtoMessage()               {}
func (*GetRepoFilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *GetRepoFilesRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *GetRepoFilesRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type File struct {
	Name            string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Hash            []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Mode            uint32 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	Size            uint64 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Modified        uint32 `protobuf:"varint,5,opt,name=modified" json:"modified,omitempty"`
	UnstagedStatus  string `protobuf:"bytes,6,opt,name=unstagedStatus" json:"unstagedStatus,omitempty"`
	StagedStatus    string `protobuf:"bytes,7,opt,name=stagedStatus" json:"stagedStatus,omitempty"`
	MergeConflict   bool   `protobuf:"varint,8,opt,name=mergeConflict" json:"mergeConflict,omitempty"`
	MergeUnresolved bool   `protobuf:"varint,9,opt,name=mergeUnresolved" json:"mergeUnresolved,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *File) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *File) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *File) GetModified() uint32 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *File) GetUnstagedStatus() string {
	if m != nil {
		return m.UnstagedStatus
	}
	return ""
}

func (m *File) GetStagedStatus() string {
	if m != nil {
		return m.StagedStatus
	}
	return ""
}

func (m *File) GetMergeConflict() bool {
	if m != nil {
		return m.MergeConflict
	}
	return false
}

func (m *File) GetMergeUnresolved() bool {
	if m != nil {
		return m.MergeUnresolved
	}
	return false
}

type GetRepoFilesResponse struct {
	Files []*File `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *GetRepoFilesResponse) Reset()                    { *m = GetRepoFilesResponse{} }
func (m *GetRepoFilesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRepoFilesResponse) ProtoMessage()               {}
func (*GetRepoFilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *GetRepoFilesResponse) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type RepoHasObjectRequest struct {
	RepoID   string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	ObjectID []byte `protobuf:"bytes,3,opt,name=objectID,proto3" json:"objectID,omitempty"`
}

func (m *RepoHasObjectRequest) Reset()                    { *m = RepoHasObjectRequest{} }
func (m *RepoHasObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*RepoHasObjectRequest) ProtoMessage()               {}
func (*RepoHasObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *RepoHasObjectRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *RepoHasObjectRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RepoHasObjectRequest) GetObjectID() []byte {
	if m != nil {
		return m.ObjectID
	}
	return nil
}

type RepoHasObjectResponse struct {
	HasObject bool `protobuf:"varint,1,opt,name=hasObject" json:"hasObject,omitempty"`
}

func (m *RepoHasObjectResponse) Reset()                    { *m = RepoHasObjectResponse{} }
func (m *RepoHasObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*RepoHasObjectResponse) ProtoMessage()               {}
func (*RepoHasObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *RepoHasObjectResponse) GetHasObject() bool {
	if m != nil {
		return m.HasObject
	}
	return false
}

type SignMessageRequest struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SignMessageRequest) Reset()                    { *m = SignMessageRequest{} }
func (m *SignMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SignMessageRequest) ProtoMessage()               {}
func (*SignMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *SignMessageRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type SignMessageResponse struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignMessageResponse) Reset()                    { *m = SignMessageResponse{} }
func (m *SignMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*SignMessageResponse) ProtoMessage()               {}
func (*SignMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *SignMessageResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type EthAddressRequest struct {
}

func (m *EthAddressRequest) Reset()                    { *m = EthAddressRequest{} }
func (m *EthAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*EthAddressRequest) ProtoMessage()               {}
func (*EthAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

type EthAddressResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *EthAddressResponse) Reset()                    { *m = EthAddressResponse{} }
func (m *EthAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*EthAddressResponse) ProtoMessage()               {}
func (*EthAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *EthAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetObjectRequest struct {
	// need one or the other
	RepoID   string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	RepoRoot string `protobuf:"bytes,2,opt,name=repoRoot" json:"repoRoot,omitempty"`
	// need objectID -or-
	//  (filename -and-
	//     (commitHash -or- commitRef)
	//  )
	// @@TODO: unfuck this
	ObjectID   []byte `protobuf:"bytes,3,opt,name=objectID,proto3" json:"objectID,omitempty"`
	Filename   string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	CommitHash []byte `protobuf:"bytes,5,opt,name=commitHash,proto3" json:"commitHash,omitempty"`
	CommitRef  string `protobuf:"bytes,6,opt,name=commitRef" json:"commitRef,omitempty"`
	MaxSize    uint64 `protobuf:"varint,7,opt,name=maxSize" json:"maxSize,omitempty"`
}

func (m *GetObjectRequest) Reset()                    { *m = GetObjectRequest{} }
func (m *GetObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*GetObjectRequest) ProtoMessage()               {}
func (*GetObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *GetObjectRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *GetObjectRequest) GetRepoRoot() string {
	if m != nil {
		return m.RepoRoot
	}
	return ""
}

func (m *GetObjectRequest) GetObjectID() []byte {
	if m != nil {
		return m.ObjectID
	}
	return nil
}

func (m *GetObjectRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *GetObjectRequest) GetCommitHash() []byte {
	if m != nil {
		return m.CommitHash
	}
	return nil
}

func (m *GetObjectRequest) GetCommitRef() string {
	if m != nil {
		return m.CommitRef
	}
	return ""
}

func (m *GetObjectRequest) GetMaxSize() uint64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

type GetObjectResponse struct {
	// Types that are valid to be assigned to Payload:
	//	*GetObjectResponse_Header_
	//	*GetObjectResponse_Data_
	Payload isGetObjectResponse_Payload `protobuf_oneof:"payload"`
}

func (m *GetObjectResponse) Reset()                    { *m = GetObjectResponse{} }
func (m *GetObjectResponse) String() string            { return proto.CompactTextString(m) }
func (*GetObjectResponse) ProtoMessage()               {}
func (*GetObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

type isGetObjectResponse_Payload interface{ isGetObjectResponse_Payload() }

type GetObjectResponse_Header_ struct {
	Header *GetObjectResponse_Header `protobuf:"bytes,1,opt,name=header,oneof"`
}
type GetObjectResponse_Data_ struct {
	Data *GetObjectResponse_Data `protobuf:"bytes,2,opt,name=data,oneof"`
}

func (*GetObjectResponse_Header_) isGetObjectResponse_Payload() {}
func (*GetObjectResponse_Data_) isGetObjectResponse_Payload()   {}

func (m *GetObjectResponse) GetPayload() isGetObjectResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GetObjectResponse) GetHeader() *GetObjectResponse_Header {
	if x, ok := m.GetPayload().(*GetObjectResponse_Header_); ok {
		return x.Header
	}
	return nil
}

func (m *GetObjectResponse) GetData() *GetObjectResponse_Data {
	if x, ok := m.GetPayload().(*GetObjectResponse_Data_); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetObjectResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetObjectResponse_OneofMarshaler, _GetObjectResponse_OneofUnmarshaler, _GetObjectResponse_OneofSizer, []interface{}{
		(*GetObjectResponse_Header_)(nil),
		(*GetObjectResponse_Data_)(nil),
	}
}

func _GetObjectResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetObjectResponse)
	// payload
	switch x := m.Payload.(type) {
	case *GetObjectResponse_Header_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *GetObjectResponse_Data_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetObjectResponse.Payload has unexpected type %T", x)
	}
	return nil
}

func _GetObjectResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetObjectResponse)
	switch tag {
	case 1: // payload.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetObjectResponse_Header)
		err := b.DecodeMessage(msg)
		m.Payload = &GetObjectResponse_Header_{msg}
		return true, err
	case 2: // payload.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetObjectResponse_Data)
		err := b.DecodeMessage(msg)
		m.Payload = &GetObjectResponse_Data_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetObjectResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetObjectResponse)
	// payload
	switch x := m.Payload.(type) {
	case *GetObjectResponse_Header_:
		s := proto.Size(x.Header)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetObjectResponse_Data_:
		s := proto.Size(x.Data)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetObjectResponse_Header struct {
	UncompressedSize uint64 `protobuf:"varint,1,opt,name=uncompressedSize" json:"uncompressedSize,omitempty"`
}

func (m *GetObjectResponse_Header) Reset()                    { *m = GetObjectResponse_Header{} }
func (m *GetObjectResponse_Header) String() string            { return proto.CompactTextString(m) }
func (*GetObjectResponse_Header) ProtoMessage()               {}
func (*GetObjectResponse_Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58, 0} }

func (m *GetObjectResponse_Header) GetUncompressedSize() uint64 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

type GetObjectResponse_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	End  bool   `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (m *GetObjectResponse_Data) Reset()                    { *m = GetObjectResponse_Data{} }
func (m *GetObjectResponse_Data) String() string            { return proto.CompactTextString(m) }
func (*GetObjectResponse_Data) ProtoMessage()               {}
func (*GetObjectResponse_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58, 1} }

func (m *GetObjectResponse_Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetObjectResponse_Data) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

type GetDiffRequest struct {
	// need one or the other
	RepoID     string `protobuf:"bytes,1,opt,name=repoID" json:"repoID,omitempty"`
	RepoRoot   string `protobuf:"bytes,2,opt,name=repoRoot" json:"repoRoot,omitempty"`
	CommitHash []byte `protobuf:"bytes,3,opt,name=commitHash,proto3" json:"commitHash,omitempty"`
	CommitRef  string `protobuf:"bytes,4,opt,name=commitRef" json:"commitRef,omitempty"`
}

func (m *GetDiffRequest) Reset()                    { *m = GetDiffRequest{} }
func (m *GetDiffRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDiffRequest) ProtoMessage()               {}
func (*GetDiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *GetDiffRequest) GetRepoID() string {
	if m != nil {
		return m.RepoID
	}
	return ""
}

func (m *GetDiffRequest) GetRepoRoot() string {
	if m != nil {
		return m.RepoRoot
	}
	return ""
}

func (m *GetDiffRequest) GetCommitHash() []byte {
	if m != nil {
		return m.CommitHash
	}
	return nil
}

func (m *GetDiffRequest) GetCommitRef() string {
	if m != nil {
		return m.CommitRef
	}
	return ""
}

type GetDiffResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	End  bool   `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (m *GetDiffResponse) Reset()                    { *m = GetDiffResponse{} }
func (m *GetDiffResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDiffResponse) ProtoMessage()               {}
func (*GetDiffResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *GetDiffResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetDiffResponse) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

func init() {
	proto.RegisterType((*SetUsernameRequest)(nil), "noderpc.SetUsernameRequest")
	proto.RegisterType((*SetUsernameResponse)(nil), "noderpc.SetUsernameResponse")
	proto.RegisterType((*GetUsernameRequest)(nil), "noderpc.GetUsernameRequest")
	proto.RegisterType((*GetUsernameResponse)(nil), "noderpc.GetUsernameResponse")
	proto.RegisterType((*InitRepoRequest)(nil), "noderpc.InitRepoRequest")
	proto.RegisterType((*InitRepoResponse)(nil), "noderpc.InitRepoResponse")
	proto.RegisterType((*CheckpointRepoRequest)(nil), "noderpc.CheckpointRepoRequest")
	proto.RegisterType((*CheckpointRepoResponse)(nil), "noderpc.CheckpointRepoResponse")
	proto.RegisterType((*PullRepoRequest)(nil), "noderpc.PullRepoRequest")
	proto.RegisterType((*PullRepoResponsePacket)(nil), "noderpc.PullRepoResponsePacket")
	proto.RegisterType((*CloneRepoRequest)(nil), "noderpc.CloneRepoRequest")
	proto.RegisterType((*CloneRepoResponsePacket)(nil), "noderpc.CloneRepoResponsePacket")
	proto.RegisterType((*CloneRepoResponsePacket_Progress)(nil), "noderpc.CloneRepoResponsePacket.Progress")
	proto.RegisterType((*CloneRepoResponsePacket_Success)(nil), "noderpc.CloneRepoResponsePacket.Success")
	proto.RegisterType((*FetchFromCommitRequest)(nil), "noderpc.FetchFromCommitRequest")
	proto.RegisterType((*FetchFromCommitResponse)(nil), "noderpc.FetchFromCommitResponse")
	proto.RegisterType((*FetchFromCommitResponse_Header)(nil), "noderpc.FetchFromCommitResponse.Header")
	proto.RegisterType((*FetchFromCommitResponse_PackfileHeader)(nil), "noderpc.FetchFromCommitResponse.PackfileHeader")
	proto.RegisterType((*FetchFromCommitResponse_PackfileData)(nil), "noderpc.FetchFromCommitResponse.PackfileData")
	proto.RegisterType((*FetchFromCommitResponse_Chunk)(nil), "noderpc.FetchFromCommitResponse.Chunk")
	proto.RegisterType((*RegisterRepoIDRequest)(nil), "noderpc.RegisterRepoIDRequest")
	proto.RegisterType((*FetchChunksRequest)(nil), "noderpc.FetchChunksRequest")
	proto.RegisterType((*FetchChunksResponse)(nil), "noderpc.FetchChunksResponse")
	proto.RegisterType((*RegisterRepoIDResponse)(nil), "noderpc.RegisterRepoIDResponse")
	proto.RegisterType((*TrackLocalRepoRequest)(nil), "noderpc.TrackLocalRepoRequest")
	proto.RegisterType((*TrackLocalRepoResponse)(nil), "noderpc.TrackLocalRepoResponse")
	proto.RegisterType((*GetLocalReposRequest)(nil), "noderpc.GetLocalReposRequest")
	proto.RegisterType((*GetLocalReposResponsePacket)(nil), "noderpc.GetLocalReposResponsePacket")
	proto.RegisterType((*SetReplicationPolicyRequest)(nil), "noderpc.SetReplicationPolicyRequest")
	proto.RegisterType((*SetReplicationPolicyResponse)(nil), "noderpc.SetReplicationPolicyResponse")
	proto.RegisterType((*AnnounceRepoContentRequest)(nil), "noderpc.AnnounceRepoContentRequest")
	proto.RegisterType((*AnnounceRepoContentResponse)(nil), "noderpc.AnnounceRepoContentResponse")
	proto.RegisterType((*Ref)(nil), "noderpc.Ref")
	proto.RegisterType((*GetLocalRefsRequest)(nil), "noderpc.GetLocalRefsRequest")
	proto.RegisterType((*GetLocalRefsResponse)(nil), "noderpc.GetLocalRefsResponse")
	proto.RegisterType((*GetRemoteRefsRequest)(nil), "noderpc.GetRemoteRefsRequest")
	proto.RegisterType((*GetRemoteRefsResponse)(nil), "noderpc.GetRemoteRefsResponse")
	proto.RegisterType((*IsBehindRemoteRequest)(nil), "noderpc.IsBehindRemoteRequest")
	proto.RegisterType((*IsBehindRemoteResponse)(nil), "noderpc.IsBehindRemoteResponse")
	proto.RegisterType((*UpdateRefRequest)(nil), "noderpc.UpdateRefRequest")
	proto.RegisterType((*UpdateRefResponse)(nil), "noderpc.UpdateRefResponse")
	proto.RegisterType((*ReplicationRequest)(nil), "noderpc.ReplicationRequest")
	proto.RegisterType((*ReplicationResponsePacket)(nil), "noderpc.ReplicationResponsePacket")
	proto.RegisterType((*SetRepoPublicRequest)(nil), "noderpc.SetRepoPublicRequest")
	proto.RegisterType((*SetRepoPublicResponse)(nil), "noderpc.SetRepoPublicResponse")
	proto.RegisterType((*IsRepoPublicRequest)(nil), "noderpc.IsRepoPublicRequest")
	proto.RegisterType((*IsRepoPublicResponse)(nil), "noderpc.IsRepoPublicResponse")
	proto.RegisterType((*GetRepoUsersRequest)(nil), "noderpc.GetRepoUsersRequest")
	proto.RegisterType((*GetRepoUsersResponse)(nil), "noderpc.GetRepoUsersResponse")
	proto.RegisterType((*SetUserPermissionsRequest)(nil), "noderpc.SetUserPermissionsRequest")
	proto.RegisterType((*SetUserPermissionsResponse)(nil), "noderpc.SetUserPermissionsResponse")
	proto.RegisterType((*GetRepoHistoryRequest)(nil), "noderpc.GetRepoHistoryRequest")
	proto.RegisterType((*Commit)(nil), "noderpc.Commit")
	proto.RegisterType((*GetRepoHistoryResponse)(nil), "noderpc.GetRepoHistoryResponse")
	proto.RegisterType((*GetRepoFilesRequest)(nil), "noderpc.GetRepoFilesRequest")
	proto.RegisterType((*File)(nil), "noderpc.File")
	proto.RegisterType((*GetRepoFilesResponse)(nil), "noderpc.GetRepoFilesResponse")
	proto.RegisterType((*RepoHasObjectRequest)(nil), "noderpc.RepoHasObjectRequest")
	proto.RegisterType((*RepoHasObjectResponse)(nil), "noderpc.RepoHasObjectResponse")
	proto.RegisterType((*SignMessageRequest)(nil), "noderpc.SignMessageRequest")
	proto.RegisterType((*SignMessageResponse)(nil), "noderpc.SignMessageResponse")
	proto.RegisterType((*EthAddressRequest)(nil), "noderpc.EthAddressRequest")
	proto.RegisterType((*EthAddressResponse)(nil), "noderpc.EthAddressResponse")
	proto.RegisterType((*GetObjectRequest)(nil), "noderpc.GetObjectRequest")
	proto.RegisterType((*GetObjectResponse)(nil), "noderpc.GetObjectResponse")
	proto.RegisterType((*GetObjectResponse_Header)(nil), "noderpc.GetObjectResponse.Header")
	proto.RegisterType((*GetObjectResponse_Data)(nil), "noderpc.GetObjectResponse.Data")
	proto.RegisterType((*GetDiffRequest)(nil), "noderpc.GetDiffRequest")
	proto.RegisterType((*GetDiffResponse)(nil), "noderpc.GetDiffResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeRPC service

type NodeRPCClient interface {
	SetUsername(ctx context.Context, in *SetUsernameRequest, opts ...grpc.CallOption) (*SetUsernameResponse, error)
	GetUsername(ctx context.Context, in *GetUsernameRequest, opts ...grpc.CallOption) (*GetUsernameResponse, error)
	InitRepo(ctx context.Context, in *InitRepoRequest, opts ...grpc.CallOption) (*InitRepoResponse, error)
	CheckpointRepo(ctx context.Context, in *CheckpointRepoRequest, opts ...grpc.CallOption) (*CheckpointRepoResponse, error)
	PullRepo(ctx context.Context, in *PullRepoRequest, opts ...grpc.CallOption) (NodeRPC_PullRepoClient, error)
	CloneRepo(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (NodeRPC_CloneRepoClient, error)
	FetchFromCommit(ctx context.Context, in *FetchFromCommitRequest, opts ...grpc.CallOption) (NodeRPC_FetchFromCommitClient, error)
	FetchChunks(ctx context.Context, in *FetchChunksRequest, opts ...grpc.CallOption) (NodeRPC_FetchChunksClient, error)
	RegisterRepoID(ctx context.Context, in *RegisterRepoIDRequest, opts ...grpc.CallOption) (*RegisterRepoIDResponse, error)
	TrackLocalRepo(ctx context.Context, in *TrackLocalRepoRequest, opts ...grpc.CallOption) (*TrackLocalRepoResponse, error)
	GetLocalRepos(ctx context.Context, in *GetLocalReposRequest, opts ...grpc.CallOption) (NodeRPC_GetLocalReposClient, error)
	SetReplicationPolicy(ctx context.Context, in *SetReplicationPolicyRequest, opts ...grpc.CallOption) (*SetReplicationPolicyResponse, error)
	AnnounceRepoContent(ctx context.Context, in *AnnounceRepoContentRequest, opts ...grpc.CallOption) (*AnnounceRepoContentResponse, error)
	GetLocalRefs(ctx context.Context, in *GetLocalRefsRequest, opts ...grpc.CallOption) (*GetLocalRefsResponse, error)
	GetRemoteRefs(ctx context.Context, in *GetRemoteRefsRequest, opts ...grpc.CallOption) (*GetRemoteRefsResponse, error)
	IsBehindRemote(ctx context.Context, in *IsBehindRemoteRequest, opts ...grpc.CallOption) (*IsBehindRemoteResponse, error)
	UpdateRef(ctx context.Context, in *UpdateRefRequest, opts ...grpc.CallOption) (*UpdateRefResponse, error)
	RequestReplication(ctx context.Context, in *ReplicationRequest, opts ...grpc.CallOption) (NodeRPC_RequestReplicationClient, error)
	SetRepoPublic(ctx context.Context, in *SetRepoPublicRequest, opts ...grpc.CallOption) (*SetRepoPublicResponse, error)
	IsRepoPublic(ctx context.Context, in *IsRepoPublicRequest, opts ...grpc.CallOption) (*IsRepoPublicResponse, error)
	SetUserPermissions(ctx context.Context, in *SetUserPermissionsRequest, opts ...grpc.CallOption) (*SetUserPermissionsResponse, error)
	GetRepoUsers(ctx context.Context, in *GetRepoUsersRequest, opts ...grpc.CallOption) (*GetRepoUsersResponse, error)
	GetRepoHistory(ctx context.Context, in *GetRepoHistoryRequest, opts ...grpc.CallOption) (*GetRepoHistoryResponse, error)
	GetRepoFiles(ctx context.Context, in *GetRepoFilesRequest, opts ...grpc.CallOption) (*GetRepoFilesResponse, error)
	RepoHasObject(ctx context.Context, in *RepoHasObjectRequest, opts ...grpc.CallOption) (*RepoHasObjectResponse, error)
	SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error)
	EthAddress(ctx context.Context, in *EthAddressRequest, opts ...grpc.CallOption) (*EthAddressResponse, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (NodeRPC_GetObjectClient, error)
	GetDiff(ctx context.Context, in *GetDiffRequest, opts ...grpc.CallOption) (NodeRPC_GetDiffClient, error)
}

type nodeRPCClient struct {
	cc *grpc.ClientConn
}

func NewNodeRPCClient(cc *grpc.ClientConn) NodeRPCClient {
	return &nodeRPCClient{cc}
}

func (c *nodeRPCClient) SetUsername(ctx context.Context, in *SetUsernameRequest, opts ...grpc.CallOption) (*SetUsernameResponse, error) {
	out := new(SetUsernameResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/SetUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) GetUsername(ctx context.Context, in *GetUsernameRequest, opts ...grpc.CallOption) (*GetUsernameResponse, error) {
	out := new(GetUsernameResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/GetUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) InitRepo(ctx context.Context, in *InitRepoRequest, opts ...grpc.CallOption) (*InitRepoResponse, error) {
	out := new(InitRepoResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/InitRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) CheckpointRepo(ctx context.Context, in *CheckpointRepoRequest, opts ...grpc.CallOption) (*CheckpointRepoResponse, error) {
	out := new(CheckpointRepoResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/CheckpointRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) PullRepo(ctx context.Context, in *PullRepoRequest, opts ...grpc.CallOption) (NodeRPC_PullRepoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeRPC_serviceDesc.Streams[0], c.cc, "/noderpc.NodeRPC/PullRepo", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRPCPullRepoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeRPC_PullRepoClient interface {
	Recv() (*PullRepoResponsePacket, error)
	grpc.ClientStream
}

type nodeRPCPullRepoClient struct {
	grpc.ClientStream
}

func (x *nodeRPCPullRepoClient) Recv() (*PullRepoResponsePacket, error) {
	m := new(PullRepoResponsePacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeRPCClient) CloneRepo(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (NodeRPC_CloneRepoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeRPC_serviceDesc.Streams[1], c.cc, "/noderpc.NodeRPC/CloneRepo", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRPCCloneRepoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeRPC_CloneRepoClient interface {
	Recv() (*CloneRepoResponsePacket, error)
	grpc.ClientStream
}

type nodeRPCCloneRepoClient struct {
	grpc.ClientStream
}

func (x *nodeRPCCloneRepoClient) Recv() (*CloneRepoResponsePacket, error) {
	m := new(CloneRepoResponsePacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeRPCClient) FetchFromCommit(ctx context.Context, in *FetchFromCommitRequest, opts ...grpc.CallOption) (NodeRPC_FetchFromCommitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeRPC_serviceDesc.Streams[2], c.cc, "/noderpc.NodeRPC/FetchFromCommit", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRPCFetchFromCommitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeRPC_FetchFromCommitClient interface {
	Recv() (*FetchFromCommitResponse, error)
	grpc.ClientStream
}

type nodeRPCFetchFromCommitClient struct {
	grpc.ClientStream
}

func (x *nodeRPCFetchFromCommitClient) Recv() (*FetchFromCommitResponse, error) {
	m := new(FetchFromCommitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeRPCClient) FetchChunks(ctx context.Context, in *FetchChunksRequest, opts ...grpc.CallOption) (NodeRPC_FetchChunksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeRPC_serviceDesc.Streams[3], c.cc, "/noderpc.NodeRPC/FetchChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRPCFetchChunksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeRPC_FetchChunksClient interface {
	Recv() (*FetchChunksResponse, error)
	grpc.ClientStream
}

type nodeRPCFetchChunksClient struct {
	grpc.ClientStream
}

func (x *nodeRPCFetchChunksClient) Recv() (*FetchChunksResponse, error) {
	m := new(FetchChunksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeRPCClient) RegisterRepoID(ctx context.Context, in *RegisterRepoIDRequest, opts ...grpc.CallOption) (*RegisterRepoIDResponse, error) {
	out := new(RegisterRepoIDResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/RegisterRepoID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) TrackLocalRepo(ctx context.Context, in *TrackLocalRepoRequest, opts ...grpc.CallOption) (*TrackLocalRepoResponse, error) {
	out := new(TrackLocalRepoResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/TrackLocalRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) GetLocalRepos(ctx context.Context, in *GetLocalReposRequest, opts ...grpc.CallOption) (NodeRPC_GetLocalReposClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeRPC_serviceDesc.Streams[4], c.cc, "/noderpc.NodeRPC/GetLocalRepos", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRPCGetLocalReposClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeRPC_GetLocalReposClient interface {
	Recv() (*GetLocalReposResponsePacket, error)
	grpc.ClientStream
}

type nodeRPCGetLocalReposClient struct {
	grpc.ClientStream
}

func (x *nodeRPCGetLocalReposClient) Recv() (*GetLocalReposResponsePacket, error) {
	m := new(GetLocalReposResponsePacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeRPCClient) SetReplicationPolicy(ctx context.Context, in *SetReplicationPolicyRequest, opts ...grpc.CallOption) (*SetReplicationPolicyResponse, error) {
	out := new(SetReplicationPolicyResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/SetReplicationPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) AnnounceRepoContent(ctx context.Context, in *AnnounceRepoContentRequest, opts ...grpc.CallOption) (*AnnounceRepoContentResponse, error) {
	out := new(AnnounceRepoContentResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/AnnounceRepoContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) GetLocalRefs(ctx context.Context, in *GetLocalRefsRequest, opts ...grpc.CallOption) (*GetLocalRefsResponse, error) {
	out := new(GetLocalRefsResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/GetLocalRefs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) GetRemoteRefs(ctx context.Context, in *GetRemoteRefsRequest, opts ...grpc.CallOption) (*GetRemoteRefsResponse, error) {
	out := new(GetRemoteRefsResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/GetRemoteRefs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) IsBehindRemote(ctx context.Context, in *IsBehindRemoteRequest, opts ...grpc.CallOption) (*IsBehindRemoteResponse, error) {
	out := new(IsBehindRemoteResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/IsBehindRemote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) UpdateRef(ctx context.Context, in *UpdateRefRequest, opts ...grpc.CallOption) (*UpdateRefResponse, error) {
	out := new(UpdateRefResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/UpdateRef", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) RequestReplication(ctx context.Context, in *ReplicationRequest, opts ...grpc.CallOption) (NodeRPC_RequestReplicationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeRPC_serviceDesc.Streams[5], c.cc, "/noderpc.NodeRPC/RequestReplication", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRPCRequestReplicationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeRPC_RequestReplicationClient interface {
	Recv() (*ReplicationResponsePacket, error)
	grpc.ClientStream
}

type nodeRPCRequestReplicationClient struct {
	grpc.ClientStream
}

func (x *nodeRPCRequestReplicationClient) Recv() (*ReplicationResponsePacket, error) {
	m := new(ReplicationResponsePacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeRPCClient) SetRepoPublic(ctx context.Context, in *SetRepoPublicRequest, opts ...grpc.CallOption) (*SetRepoPublicResponse, error) {
	out := new(SetRepoPublicResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/SetRepoPublic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) IsRepoPublic(ctx context.Context, in *IsRepoPublicRequest, opts ...grpc.CallOption) (*IsRepoPublicResponse, error) {
	out := new(IsRepoPublicResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/IsRepoPublic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) SetUserPermissions(ctx context.Context, in *SetUserPermissionsRequest, opts ...grpc.CallOption) (*SetUserPermissionsResponse, error) {
	out := new(SetUserPermissionsResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/SetUserPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) GetRepoUsers(ctx context.Context, in *GetRepoUsersRequest, opts ...grpc.CallOption) (*GetRepoUsersResponse, error) {
	out := new(GetRepoUsersResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/GetRepoUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) GetRepoHistory(ctx context.Context, in *GetRepoHistoryRequest, opts ...grpc.CallOption) (*GetRepoHistoryResponse, error) {
	out := new(GetRepoHistoryResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/GetRepoHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) GetRepoFiles(ctx context.Context, in *GetRepoFilesRequest, opts ...grpc.CallOption) (*GetRepoFilesResponse, error) {
	out := new(GetRepoFilesResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/GetRepoFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) RepoHasObject(ctx context.Context, in *RepoHasObjectRequest, opts ...grpc.CallOption) (*RepoHasObjectResponse, error) {
	out := new(RepoHasObjectResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/RepoHasObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error) {
	out := new(SignMessageResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/SignMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) EthAddress(ctx context.Context, in *EthAddressRequest, opts ...grpc.CallOption) (*EthAddressResponse, error) {
	out := new(EthAddressResponse)
	err := grpc.Invoke(ctx, "/noderpc.NodeRPC/EthAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (NodeRPC_GetObjectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeRPC_serviceDesc.Streams[6], c.cc, "/noderpc.NodeRPC/GetObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRPCGetObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeRPC_GetObjectClient interface {
	Recv() (*GetObjectResponse, error)
	grpc.ClientStream
}

type nodeRPCGetObjectClient struct {
	grpc.ClientStream
}

func (x *nodeRPCGetObjectClient) Recv() (*GetObjectResponse, error) {
	m := new(GetObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeRPCClient) GetDiff(ctx context.Context, in *GetDiffRequest, opts ...grpc.CallOption) (NodeRPC_GetDiffClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeRPC_serviceDesc.Streams[7], c.cc, "/noderpc.NodeRPC/GetDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRPCGetDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeRPC_GetDiffClient interface {
	Recv() (*GetDiffResponse, error)
	grpc.ClientStream
}

type nodeRPCGetDiffClient struct {
	grpc.ClientStream
}

func (x *nodeRPCGetDiffClient) Recv() (*GetDiffResponse, error) {
	m := new(GetDiffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeRPC service

type NodeRPCServer interface {
	SetUsername(context.Context, *SetUsernameRequest) (*SetUsernameResponse, error)
	GetUsername(context.Context, *GetUsernameRequest) (*GetUsernameResponse, error)
	InitRepo(context.Context, *InitRepoRequest) (*InitRepoResponse, error)
	CheckpointRepo(context.Context, *CheckpointRepoRequest) (*CheckpointRepoResponse, error)
	PullRepo(*PullRepoRequest, NodeRPC_PullRepoServer) error
	CloneRepo(*CloneRepoRequest, NodeRPC_CloneRepoServer) error
	FetchFromCommit(*FetchFromCommitRequest, NodeRPC_FetchFromCommitServer) error
	FetchChunks(*FetchChunksRequest, NodeRPC_FetchChunksServer) error
	RegisterRepoID(context.Context, *RegisterRepoIDRequest) (*RegisterRepoIDResponse, error)
	TrackLocalRepo(context.Context, *TrackLocalRepoRequest) (*TrackLocalRepoResponse, error)
	GetLocalRepos(*GetLocalReposRequest, NodeRPC_GetLocalReposServer) error
	SetReplicationPolicy(context.Context, *SetReplicationPolicyRequest) (*SetReplicationPolicyResponse, error)
	AnnounceRepoContent(context.Context, *AnnounceRepoContentRequest) (*AnnounceRepoContentResponse, error)
	GetLocalRefs(context.Context, *GetLocalRefsRequest) (*GetLocalRefsResponse, error)
	GetRemoteRefs(context.Context, *GetRemoteRefsRequest) (*GetRemoteRefsResponse, error)
	IsBehindRemote(context.Context, *IsBehindRemoteRequest) (*IsBehindRemoteResponse, error)
	UpdateRef(context.Context, *UpdateRefRequest) (*UpdateRefResponse, error)
	RequestReplication(*ReplicationRequest, NodeRPC_RequestReplicationServer) error
	SetRepoPublic(context.Context, *SetRepoPublicRequest) (*SetRepoPublicResponse, error)
	IsRepoPublic(context.Context, *IsRepoPublicRequest) (*IsRepoPublicResponse, error)
	SetUserPermissions(context.Context, *SetUserPermissionsRequest) (*SetUserPermissionsResponse, error)
	GetRepoUsers(context.Context, *GetRepoUsersRequest) (*GetRepoUsersResponse, error)
	GetRepoHistory(context.Context, *GetRepoHistoryRequest) (*GetRepoHistoryResponse, error)
	GetRepoFiles(context.Context, *GetRepoFilesRequest) (*GetRepoFilesResponse, error)
	RepoHasObject(context.Context, *RepoHasObjectRequest) (*RepoHasObjectResponse, error)
	SignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error)
	EthAddress(context.Context, *EthAddressRequest) (*EthAddressResponse, error)
	GetObject(*GetObjectRequest, NodeRPC_GetObjectServer) error
	GetDiff(*GetDiffRequest, NodeRPC_GetDiffServer) error
}

func RegisterNodeRPCServer(s *grpc.Server, srv NodeRPCServer) {
	s.RegisterService(&_NodeRPC_serviceDesc, srv)
}

func _NodeRPC_SetUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).SetUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/SetUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).SetUsername(ctx, req.(*SetUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_GetUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).GetUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/GetUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).GetUsername(ctx, req.(*GetUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_InitRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).InitRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/InitRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).InitRepo(ctx, req.(*InitRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_CheckpointRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).CheckpointRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/CheckpointRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).CheckpointRepo(ctx, req.(*CheckpointRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_PullRepo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRepoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeRPCServer).PullRepo(m, &nodeRPCPullRepoServer{stream})
}

type NodeRPC_PullRepoServer interface {
	Send(*PullRepoResponsePacket) error
	grpc.ServerStream
}

type nodeRPCPullRepoServer struct {
	grpc.ServerStream
}

func (x *nodeRPCPullRepoServer) Send(m *PullRepoResponsePacket) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeRPC_CloneRepo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloneRepoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeRPCServer).CloneRepo(m, &nodeRPCCloneRepoServer{stream})
}

type NodeRPC_CloneRepoServer interface {
	Send(*CloneRepoResponsePacket) error
	grpc.ServerStream
}

type nodeRPCCloneRepoServer struct {
	grpc.ServerStream
}

func (x *nodeRPCCloneRepoServer) Send(m *CloneRepoResponsePacket) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeRPC_FetchFromCommit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchFromCommitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeRPCServer).FetchFromCommit(m, &nodeRPCFetchFromCommitServer{stream})
}

type NodeRPC_FetchFromCommitServer interface {
	Send(*FetchFromCommitResponse) error
	grpc.ServerStream
}

type nodeRPCFetchFromCommitServer struct {
	grpc.ServerStream
}

func (x *nodeRPCFetchFromCommitServer) Send(m *FetchFromCommitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeRPC_FetchChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchChunksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeRPCServer).FetchChunks(m, &nodeRPCFetchChunksServer{stream})
}

type NodeRPC_FetchChunksServer interface {
	Send(*FetchChunksResponse) error
	grpc.ServerStream
}

type nodeRPCFetchChunksServer struct {
	grpc.ServerStream
}

func (x *nodeRPCFetchChunksServer) Send(m *FetchChunksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeRPC_RegisterRepoID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRepoIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).RegisterRepoID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/RegisterRepoID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).RegisterRepoID(ctx, req.(*RegisterRepoIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_TrackLocalRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackLocalRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).TrackLocalRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/TrackLocalRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).TrackLocalRepo(ctx, req.(*TrackLocalRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_GetLocalRepos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLocalReposRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeRPCServer).GetLocalRepos(m, &nodeRPCGetLocalReposServer{stream})
}

type NodeRPC_GetLocalReposServer interface {
	Send(*GetLocalReposResponsePacket) error
	grpc.ServerStream
}

type nodeRPCGetLocalReposServer struct {
	grpc.ServerStream
}

func (x *nodeRPCGetLocalReposServer) Send(m *GetLocalReposResponsePacket) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeRPC_SetReplicationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReplicationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).SetReplicationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/SetReplicationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).SetReplicationPolicy(ctx, req.(*SetReplicationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_AnnounceRepoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceRepoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).AnnounceRepoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/AnnounceRepoContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).AnnounceRepoContent(ctx, req.(*AnnounceRepoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_GetLocalRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocalRefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).GetLocalRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/GetLocalRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).GetLocalRefs(ctx, req.(*GetLocalRefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_GetRemoteRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteRefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).GetRemoteRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/GetRemoteRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).GetRemoteRefs(ctx, req.(*GetRemoteRefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_IsBehindRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBehindRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).IsBehindRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/IsBehindRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).IsBehindRemote(ctx, req.(*IsBehindRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_UpdateRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).UpdateRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/UpdateRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).UpdateRef(ctx, req.(*UpdateRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_RequestReplication_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplicationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeRPCServer).RequestReplication(m, &nodeRPCRequestReplicationServer{stream})
}

type NodeRPC_RequestReplicationServer interface {
	Send(*ReplicationResponsePacket) error
	grpc.ServerStream
}

type nodeRPCRequestReplicationServer struct {
	grpc.ServerStream
}

func (x *nodeRPCRequestReplicationServer) Send(m *ReplicationResponsePacket) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeRPC_SetRepoPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRepoPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).SetRepoPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/SetRepoPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).SetRepoPublic(ctx, req.(*SetRepoPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_IsRepoPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRepoPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).IsRepoPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/IsRepoPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).IsRepoPublic(ctx, req.(*IsRepoPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_SetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).SetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/SetUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).SetUserPermissions(ctx, req.(*SetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_GetRepoUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).GetRepoUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/GetRepoUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).GetRepoUsers(ctx, req.(*GetRepoUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_GetRepoHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).GetRepoHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/GetRepoHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).GetRepoHistory(ctx, req.(*GetRepoHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_GetRepoFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).GetRepoFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/GetRepoFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).GetRepoFiles(ctx, req.(*GetRepoFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_RepoHasObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoHasObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).RepoHasObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/RepoHasObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).RepoHasObject(ctx, req.(*RepoHasObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/SignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).SignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_EthAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).EthAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noderpc.NodeRPC/EthAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).EthAddress(ctx, req.(*EthAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_GetObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeRPCServer).GetObject(m, &nodeRPCGetObjectServer{stream})
}

type NodeRPC_GetObjectServer interface {
	Send(*GetObjectResponse) error
	grpc.ServerStream
}

type nodeRPCGetObjectServer struct {
	grpc.ServerStream
}

func (x *nodeRPCGetObjectServer) Send(m *GetObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeRPC_GetDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeRPCServer).GetDiff(m, &nodeRPCGetDiffServer{stream})
}

type NodeRPC_GetDiffServer interface {
	Send(*GetDiffResponse) error
	grpc.ServerStream
}

type nodeRPCGetDiffServer struct {
	grpc.ServerStream
}

func (x *nodeRPCGetDiffServer) Send(m *GetDiffResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noderpc.NodeRPC",
	HandlerType: (*NodeRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUsername",
			Handler:    _NodeRPC_SetUsername_Handler,
		},
		{
			MethodName: "GetUsername",
			Handler:    _NodeRPC_GetUsername_Handler,
		},
		{
			MethodName: "InitRepo",
			Handler:    _NodeRPC_InitRepo_Handler,
		},
		{
			MethodName: "CheckpointRepo",
			Handler:    _NodeRPC_CheckpointRepo_Handler,
		},
		{
			MethodName: "RegisterRepoID",
			Handler:    _NodeRPC_RegisterRepoID_Handler,
		},
		{
			MethodName: "TrackLocalRepo",
			Handler:    _NodeRPC_TrackLocalRepo_Handler,
		},
		{
			MethodName: "SetReplicationPolicy",
			Handler:    _NodeRPC_SetReplicationPolicy_Handler,
		},
		{
			MethodName: "AnnounceRepoContent",
			Handler:    _NodeRPC_AnnounceRepoContent_Handler,
		},
		{
			MethodName: "GetLocalRefs",
			Handler:    _NodeRPC_GetLocalRefs_Handler,
		},
		{
			MethodName: "GetRemoteRefs",
			Handler:    _NodeRPC_GetRemoteRefs_Handler,
		},
		{
			MethodName: "IsBehindRemote",
			Handler:    _NodeRPC_IsBehindRemote_Handler,
		},
		{
			MethodName: "UpdateRef",
			Handler:    _NodeRPC_UpdateRef_Handler,
		},
		{
			MethodName: "SetRepoPublic",
			Handler:    _NodeRPC_SetRepoPublic_Handler,
		},
		{
			MethodName: "IsRepoPublic",
			Handler:    _NodeRPC_IsRepoPublic_Handler,
		},
		{
			MethodName: "SetUserPermissions",
			Handler:    _NodeRPC_SetUserPermissions_Handler,
		},
		{
			MethodName: "GetRepoUsers",
			Handler:    _NodeRPC_GetRepoUsers_Handler,
		},
		{
			MethodName: "GetRepoHistory",
			Handler:    _NodeRPC_GetRepoHistory_Handler,
		},
		{
			MethodName: "GetRepoFiles",
			Handler:    _NodeRPC_GetRepoFiles_Handler,
		},
		{
			MethodName: "RepoHasObject",
			Handler:    _NodeRPC_RepoHasObject_Handler,
		},
		{
			MethodName: "SignMessage",
			Handler:    _NodeRPC_SignMessage_Handler,
		},
		{
			MethodName: "EthAddress",
			Handler:    _NodeRPC_EthAddress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullRepo",
			Handler:       _NodeRPC_PullRepo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CloneRepo",
			Handler:       _NodeRPC_CloneRepo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchFromCommit",
			Handler:       _NodeRPC_FetchFromCommit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchChunks",
			Handler:       _NodeRPC_FetchChunks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLocalRepos",
			Handler:       _NodeRPC_GetLocalRepos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RequestReplication",
			Handler:       _NodeRPC_RequestReplication_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetObject",
			Handler:       _NodeRPC_GetObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDiff",
			Handler:       _NodeRPC_GetDiff_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "noderpc.proto",
}

func init() { proto.RegisterFile("noderpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x5b, 0x73, 0xdb, 0xc6,
	0x15, 0xe6, 0x55, 0x24, 0x8f, 0xae, 0x59, 0x49, 0x34, 0x0d, 0x5d, 0xac, 0xae, 0x1d, 0x57, 0xe9,
	0x24, 0x4a, 0x46, 0x8e, 0xa7, 0x0f, 0x99, 0x49, 0x2b, 0x4b, 0x31, 0xa9, 0xd4, 0x89, 0x39, 0x4b,
	0xbb, 0x71, 0x3a, 0x9d, 0x66, 0x20, 0x60, 0x49, 0xa2, 0x22, 0xb1, 0x08, 0x00, 0x66, 0xea, 0x3e,
	0x75, 0xfa, 0x03, 0xfa, 0xd0, 0x99, 0xfe, 0x89, 0x3e, 0xf4, 0x67, 0xf4, 0x27, 0xf4, 0xa7, 0xf4,
	0xb9, 0xb3, 0x17, 0x00, 0x8b, 0x0b, 0x2f, 0x96, 0xa7, 0x6f, 0x38, 0x67, 0x77, 0xbf, 0x3d, 0x7b,
	0x2e, 0xbb, 0xe7, 0x1c, 0xc0, 0xa6, 0xcb, 0x6c, 0xea, 0x7b, 0xd6, 0x99, 0xe7, 0xb3, 0x90, 0xa1,
	0x86, 0x22, 0xf1, 0x67, 0x80, 0x06, 0x34, 0x7c, 0x1d, 0x50, 0xdf, 0x35, 0xa7, 0x94, 0xd0, 0x1f,
	0x67, 0x34, 0x08, 0x91, 0x01, 0xcd, 0x99, 0x62, 0x75, 0xca, 0x27, 0xe5, 0xd3, 0x16, 0x89, 0x69,
	0xfc, 0x04, 0x76, 0x53, 0x2b, 0x02, 0x8f, 0xb9, 0x01, 0x45, 0x87, 0xd0, 0x0a, 0x9c, 0x91, 0x6b,
	0x86, 0x33, 0x9f, 0x76, 0x2a, 0x27, 0xe5, 0xd3, 0x0d, 0x92, 0x30, 0xf0, 0x1e, 0xa0, 0x6e, 0x6e,
	0x1b, 0xfc, 0x12, 0x76, 0xbb, 0x05, 0x50, 0x0b, 0x76, 0x5f, 0xb2, 0xcd, 0x08, 0xb6, 0xaf, 0x5d,
	0x27, 0x24, 0xd4, 0x63, 0xd1, 0x51, 0xda, 0xb0, 0xe6, 0x53, 0x8f, 0x5d, 0x5f, 0x29, 0x28, 0x45,
	0x21, 0x04, 0x35, 0xcf, 0x0c, 0xc7, 0x02, 0xa3, 0x45, 0xc4, 0x37, 0xe7, 0x89, 0x4d, 0xab, 0x92,
	0x27, 0x36, 0xdc, 0x83, 0x3a, 0x9d, 0x9a, 0xce, 0xa4, 0x53, 0x13, 0x4c, 0x49, 0xe0, 0xc7, 0xb0,
	0x93, 0x6c, 0xa4, 0xc4, 0x8e, 0x10, 0xcb, 0x09, 0x22, 0xfe, 0x0a, 0xf6, 0x2f, 0xc7, 0xd4, 0xba,
	0xf5, 0x98, 0xe3, 0xa6, 0xc4, 0x2a, 0x98, 0x8c, 0x3a, 0xd0, 0x98, 0xd2, 0x20, 0x30, 0x47, 0x54,
	0x49, 0x15, 0x91, 0xf8, 0x14, 0xda, 0x59, 0x18, 0xb5, 0xe9, 0x16, 0x54, 0xd8, 0xad, 0x40, 0x69,
	0x92, 0x0a, 0xbb, 0xc5, 0x1f, 0xc2, 0x76, 0x7f, 0x36, 0x99, 0x2c, 0xd9, 0x0a, 0xbf, 0x80, 0x76,
	0x32, 0x4d, 0x42, 0xf5, 0x4d, 0xeb, 0x96, 0x86, 0x5c, 0x88, 0x90, 0x3d, 0xa7, 0xa1, 0x25, 0x17,
	0x54, 0x49, 0x44, 0xf2, 0x91, 0x21, 0xff, 0xa0, 0xb6, 0x10, 0xaf, 0x4a, 0x22, 0x12, 0x8f, 0x61,
	0xe7, 0x72, 0xc2, 0x5c, 0xfa, 0xff, 0xd7, 0xfb, 0xdf, 0x2b, 0x70, 0x4f, 0xdb, 0x2a, 0x25, 0x79,
	0x17, 0x9a, 0x9e, 0xcf, 0x46, 0x3e, 0x0d, 0x02, 0xb1, 0xe7, 0xfa, 0xf9, 0x47, 0x67, 0x91, 0xd7,
	0xcf, 0x59, 0x73, 0xd6, 0x57, 0x0b, 0x7a, 0x25, 0x12, 0x2f, 0x46, 0x57, 0xd0, 0x08, 0x66, 0x96,
	0xc5, 0x71, 0x2a, 0x02, 0xe7, 0x74, 0x29, 0xce, 0x40, 0xce, 0xef, 0x95, 0x48, 0xb4, 0xd4, 0xf8,
	0x12, 0x9a, 0x11, 0xfa, 0x5d, 0x94, 0x6a, 0x1c, 0x41, 0x43, 0xa1, 0x16, 0x59, 0xf0, 0x59, 0x0b,
	0x1a, 0x9e, 0xf9, 0x76, 0xc2, 0x4c, 0x1b, 0xff, 0xa5, 0x0c, 0x6d, 0x81, 0xf6, 0xdc, 0x67, 0xd3,
	0x4b, 0x36, 0x9d, 0x72, 0xc7, 0x7c, 0x77, 0x2b, 0xb4, 0x61, 0xcd, 0x12, 0x8b, 0x85, 0x1d, 0x36,
	0x88, 0xa2, 0x10, 0x86, 0x0d, 0x8b, 0x3b, 0x1f, 0x9b, 0x85, 0xaf, 0xde, 0x7a, 0x54, 0x18, 0xa4,
	0x46, 0x52, 0x3c, 0xfc, 0xaf, 0x3a, 0xdc, 0xcb, 0x89, 0xa0, 0x5c, 0xf4, 0x02, 0xd6, 0xc6, 0xd4,
	0xb4, 0xa9, 0xaf, 0xac, 0xf2, 0xf3, 0x58, 0x9b, 0x73, 0x56, 0x9c, 0xf5, 0xc4, 0xf4, 0x5e, 0x89,
	0xa8, 0x85, 0xe8, 0x7b, 0xd8, 0xf2, 0x4c, 0xeb, 0x76, 0xe8, 0x4c, 0xa8, 0x1c, 0x53, 0x86, 0xf9,
	0x74, 0x29, 0x54, 0x3f, 0xb5, 0xac, 0x57, 0x22, 0x19, 0x20, 0x34, 0x80, 0x8d, 0x88, 0x73, 0x65,
	0x86, 0xa6, 0x38, 0xfb, 0xfa, 0xf9, 0x27, 0x2b, 0x03, 0xf3, 0x45, 0xbd, 0x12, 0x49, 0x81, 0xa0,
	0x2f, 0xa1, 0x6e, 0x8d, 0x67, 0xee, 0xad, 0xd0, 0xd5, 0xfa, 0xf9, 0xe3, 0xa5, 0x68, 0x97, 0x7c,
	0x76, 0xaf, 0x44, 0xe4, 0x32, 0xe3, 0xb7, 0xb0, 0xa6, 0xc4, 0xfb, 0x05, 0xec, 0xcc, 0x5c, 0x8b,
	0x4d, 0x3d, 0xee, 0x47, 0xd4, 0x1e, 0x38, 0x7f, 0xa6, 0xca, 0x85, 0x72, 0x7c, 0x74, 0x02, 0xeb,
	0x21, 0x0b, 0xcd, 0x89, 0x00, 0x0b, 0x94, 0x3f, 0xe9, 0x2c, 0xe3, 0xf7, 0xb0, 0x95, 0x56, 0x08,
	0x3a, 0x06, 0x88, 0x24, 0x57, 0x4e, 0xb2, 0x41, 0x34, 0x4e, 0xe1, 0xfe, 0x95, 0xe2, 0xfd, 0x8d,
	0x57, 0xb0, 0xa1, 0x6b, 0x65, 0x29, 0x36, 0x82, 0x9a, 0xcd, 0x55, 0x2e, 0xaf, 0x71, 0xf1, 0x8d,
	0x76, 0xa0, 0x4a, 0x5d, 0x5b, 0x58, 0xa1, 0x49, 0xf8, 0xa7, 0x71, 0x0d, 0x75, 0x21, 0x3d, 0x7f,
	0x16, 0xd8, 0xcd, 0x1f, 0xa9, 0x15, 0xc6, 0x60, 0x31, 0xbd, 0x1a, 0x94, 0x1e, 0x33, 0x9f, 0xc2,
	0x3e, 0xa1, 0x23, 0x27, 0x08, 0xa9, 0x4f, 0x44, 0x48, 0x2c, 0x89, 0x18, 0xfc, 0x06, 0x90, 0x30,
	0x9e, 0xd4, 0xe4, 0x5d, 0xe3, 0x4b, 0x5a, 0xa6, 0x7a, 0x52, 0x15, 0xf1, 0x25, 0x28, 0xfc, 0x1d,
	0xec, 0xa6, 0x90, 0x93, 0x57, 0xf0, 0xfd, 0x8e, 0x8b, 0x3b, 0xd0, 0xce, 0x9e, 0x51, 0x62, 0xe3,
	0xd7, 0xb0, 0xff, 0xca, 0x37, 0xad, 0xdb, 0x17, 0xcc, 0x32, 0x53, 0x6f, 0x85, 0x01, 0x4d, 0x7e,
	0x82, 0x7e, 0x72, 0xdb, 0xc4, 0x34, 0x77, 0xaf, 0x21, 0xf3, 0x2d, 0x4a, 0x28, 0xd7, 0xa0, 0xd8,
	0xbb, 0x49, 0x74, 0x16, 0xdf, 0x30, 0x0b, 0xab, 0x36, 0x6c, 0xc3, 0x5e, 0x97, 0x86, 0x31, 0x3f,
	0xd2, 0x1f, 0xbe, 0x86, 0x83, 0x0c, 0x3f, 0x75, 0xa5, 0xbf, 0x83, 0x7a, 0xf1, 0x0f, 0x70, 0x30,
	0xa0, 0xfc, 0x71, 0x9c, 0x38, 0x96, 0x19, 0x3a, 0xcc, 0xed, 0xb3, 0x89, 0x63, 0xbd, 0x5d, 0x66,
	0xa9, 0x53, 0xd8, 0x0e, 0xc6, 0x6c, 0x36, 0xb1, 0xa3, 0x95, 0x54, 0x9d, 0x2c, 0xcb, 0xc6, 0xc7,
	0x70, 0x58, 0xbc, 0x81, 0x3a, 0xe3, 0xe7, 0x60, 0x5c, 0xb8, 0x2e, 0x9b, 0xb9, 0x96, 0x78, 0x21,
	0x2e, 0x99, 0x1b, 0x52, 0x77, 0xd9, 0x4d, 0x8c, 0x8f, 0xe0, 0xa0, 0x70, 0x95, 0x02, 0xfd, 0x15,
	0x54, 0x09, 0x1d, 0xf2, 0x67, 0xc2, 0xa7, 0xc3, 0x6f, 0x93, 0x8c, 0x28, 0x22, 0x79, 0x90, 0xc9,
	0x7b, 0xba, 0x67, 0x06, 0x91, 0x42, 0x34, 0x0e, 0xbe, 0x10, 0x39, 0x96, 0xd2, 0xf0, 0xf0, 0x2e,
	0x8e, 0x8b, 0x5f, 0xe8, 0xc6, 0x1b, 0x06, 0x8b, 0x12, 0x1e, 0x74, 0x02, 0x35, 0x9f, 0x0e, 0xf9,
	0xe5, 0x53, 0x3d, 0x5d, 0x3f, 0xdf, 0x88, 0x2f, 0x3e, 0x42, 0x87, 0x44, 0x8c, 0xe0, 0x3f, 0x08,
	0x34, 0x42, 0xa7, 0x2c, 0xa4, 0xab, 0x48, 0x64, 0x40, 0xd3, 0x33, 0x47, 0x34, 0xbe, 0x79, 0x6a,
	0x24, 0xa6, 0xa5, 0x04, 0x23, 0x99, 0x38, 0xd4, 0x88, 0xf8, 0xc6, 0x2f, 0x61, 0x3f, 0x83, 0xaf,
	0xc4, 0xdd, 0x83, 0xba, 0xb8, 0x0b, 0x05, 0x7e, 0x8d, 0x48, 0x62, 0x05, 0x81, 0x2f, 0x61, 0xff,
	0x3a, 0x78, 0x46, 0xc7, 0x8e, 0x6b, 0x47, 0xa8, 0xef, 0xae, 0xc3, 0x37, 0xd0, 0xce, 0x82, 0x28,
	0xb1, 0xe6, 0xa1, 0x3c, 0x86, 0x2d, 0x27, 0xb5, 0x42, 0xf9, 0x65, 0x86, 0x8b, 0x6d, 0xd8, 0x79,
	0xed, 0xd9, 0xa6, 0x38, 0xec, 0x32, 0xc9, 0x34, 0x37, 0xaa, 0x2c, 0x72, 0xa3, 0x6a, 0xce, 0x8d,
	0x76, 0xe1, 0x03, 0x6d, 0x17, 0xe5, 0x9c, 0x1f, 0x03, 0xd2, 0xc2, 0x61, 0x99, 0xa7, 0x3f, 0x85,
	0xfb, 0xa9, 0xd9, 0xd9, 0xb4, 0xd3, 0xa3, 0xbe, 0x45, 0xdd, 0x50, 0xac, 0xaa, 0x93, 0x88, 0xc4,
	0x5f, 0xc3, 0x9e, 0x0c, 0x3b, 0xd6, 0x9f, 0xdd, 0x4c, 0x1c, 0x6b, 0x05, 0x7f, 0x71, 0x02, 0x39,
	0x55, 0x69, 0x2c, 0xa6, 0xf1, 0x6f, 0x60, 0x3f, 0x83, 0xb5, 0xc4, 0x08, 0x8b, 0xc0, 0x3e, 0x81,
	0xdd, 0xeb, 0x60, 0x65, 0xb9, 0xf8, 0x39, 0xd2, 0xd3, 0xdf, 0x63, 0xeb, 0x1f, 0x45, 0x50, 0x73,
	0x30, 0x5e, 0x3c, 0xad, 0x12, 0xd4, 0x21, 0xcf, 0xdc, 0x64, 0xf8, 0x88, 0xef, 0x54, 0x58, 0x55,
	0xe7, 0x84, 0x55, 0x4d, 0x0b, 0xab, 0x67, 0x2a, 0x6c, 0xe3, 0x2d, 0x17, 0x46, 0xd5, 0x1e, 0xd4,
	0x79, 0xc9, 0x26, 0xc3, 0xaa, 0x45, 0x24, 0x81, 0xff, 0x51, 0x86, 0xfb, 0xaa, 0x76, 0xec, 0x53,
	0x7f, 0xea, 0x04, 0x81, 0xc3, 0xdc, 0x55, 0x2e, 0x80, 0xb8, 0x1c, 0xac, 0x64, 0xca, 0xc1, 0x36,
	0xac, 0x79, 0xb3, 0xc9, 0x84, 0xfa, 0xea, 0xdd, 0x53, 0x94, 0xe4, 0x07, 0x63, 0xea, 0x8b, 0x33,
	0x08, 0x3e, 0xa7, 0xb8, 0x5c, 0xa6, 0x3d, 0x75, 0xdc, 0x4e, 0x5d, 0xb0, 0x25, 0x81, 0x0f, 0xc1,
	0x28, 0x12, 0x4b, 0x79, 0xf9, 0x77, 0xea, 0x42, 0xf1, 0x58, 0xcf, 0x09, 0x42, 0xe6, 0xbf, 0xbd,
	0x63, 0x89, 0x93, 0xbb, 0xa9, 0xfe, 0x59, 0x86, 0x35, 0x99, 0x07, 0x66, 0xc2, 0xaf, 0x9c, 0x0d,
	0x3f, 0xbe, 0x95, 0x39, 0x0b, 0xc7, 0xcc, 0x57, 0xa0, 0x8a, 0xd2, 0x4b, 0xc6, 0x6a, 0xaa, 0x64,
	0xe4, 0x85, 0x72, 0xe8, 0x4c, 0x69, 0x10, 0x9a, 0x53, 0x4f, 0x19, 0x32, 0x61, 0x70, 0x3d, 0xf0,
	0x24, 0x2c, 0xe8, 0xd4, 0xa5, 0x7d, 0x04, 0xc1, 0x35, 0xfd, 0x13, 0xf5, 0x9d, 0xa1, 0x43, 0xed,
	0xce, 0x9a, 0xf4, 0x89, 0x88, 0xc6, 0x97, 0xd0, 0xce, 0x6a, 0x41, 0x79, 0xc0, 0x47, 0xd0, 0x90,
	0x92, 0xf2, 0xb2, 0x8b, 0x5f, 0xa2, 0xdb, 0x49, 0xb9, 0x24, 0xb3, 0xdc, 0x68, 0x5c, 0x3d, 0x46,
	0x1c, 0xe4, 0x39, 0xdf, 0xf0, 0x2e, 0x17, 0xe9, 0xdf, 0x2a, 0x50, 0xe3, 0x8b, 0xe3, 0xa2, 0xb1,
	0xac, 0x15, 0x8d, 0x08, 0x6a, 0xe3, 0xe8, 0x19, 0xdc, 0x20, 0xe2, 0x9b, 0xf3, 0xa6, 0xcc, 0x96,
	0xfa, 0xd9, 0x24, 0xe2, 0x9b, 0xf3, 0x02, 0xee, 0xf8, 0xca, 0xc1, 0xf9, 0x37, 0x3f, 0xfc, 0x94,
	0xd9, 0xf2, 0xf0, 0x75, 0x31, 0x37, 0xa6, 0xf9, 0x5d, 0x3c, 0x73, 0x83, 0xd0, 0x1c, 0x51, 0x7b,
	0x10, 0x9a, 0xe1, 0x2c, 0x10, 0xea, 0x69, 0x91, 0x0c, 0x97, 0x97, 0x4a, 0xa9, 0x59, 0x0d, 0x31,
	0x2b, 0xc5, 0x43, 0x8f, 0x60, 0x73, 0x4a, 0xfd, 0x11, 0xbd, 0x64, 0xee, 0x70, 0xe2, 0x58, 0x61,
	0xa7, 0x29, 0x5c, 0x31, 0xcd, 0xe4, 0x69, 0x89, 0x60, 0xbc, 0x76, 0x7d, 0x1a, 0xb0, 0xc9, 0x4f,
	0xd4, 0xee, 0xb4, 0x64, 0x5a, 0x92, 0x61, 0xe3, 0x2f, 0xe2, 0xc0, 0x54, 0x3a, 0x55, 0x66, 0x79,
	0x18, 0x99, 0x58, 0x1a, 0x65, 0x33, 0xa9, 0x41, 0x9c, 0x09, 0x55, 0x16, 0xe7, 0x8f, 0xb1, 0x30,
	0xa9, 0x19, 0xbc, 0x14, 0xb9, 0xe5, 0x5d, 0x5c, 0x5b, 0x4f, 0x54, 0xab, 0xe9, 0x44, 0x15, 0x3f,
	0xe5, 0x69, 0x76, 0x0a, 0x3f, 0x69, 0x17, 0x8d, 0x23, 0xa6, 0x6a, 0x5f, 0x24, 0x0c, 0x7c, 0x06,
	0x68, 0xe0, 0x8c, 0xdc, 0x6f, 0xa4, 0x2f, 0x47, 0x42, 0x69, 0xce, 0x2e, 0x13, 0xe2, 0xb8, 0x3f,
	0xf2, 0x04, 0x76, 0x53, 0xf3, 0x8b, 0x7a, 0x52, 0xe5, 0x6c, 0xb3, 0x68, 0x17, 0x3e, 0xf8, 0x2a,
	0x1c, 0x5f, 0xd8, 0x36, 0x2f, 0x61, 0xa2, 0x84, 0xf4, 0x0c, 0x90, 0xce, 0x54, 0x40, 0x1d, 0x68,
	0x98, 0x92, 0x15, 0xa5, 0x5f, 0x8a, 0xc4, 0xff, 0x29, 0xc3, 0x4e, 0x97, 0x86, 0xab, 0x69, 0x4f,
	0x65, 0xd7, 0x84, 0xb1, 0x30, 0xba, 0xc9, 0x22, 0x7a, 0x91, 0x16, 0xf9, 0x18, 0x37, 0x97, 0x70,
	0x77, 0xd9, 0x0e, 0x89, 0xe9, 0xcc, 0xcd, 0x51, 0x97, 0x45, 0x96, 0x76, 0x73, 0x1c, 0x42, 0xcb,
	0x52, 0xb5, 0xe6, 0x50, 0x79, 0x6d, 0xc2, 0x10, 0x2a, 0x35, 0xff, 0x24, 0x1e, 0x81, 0x86, 0x88,
	0x85, 0x88, 0xc4, 0xff, 0x2d, 0xc3, 0x07, 0xda, 0xc1, 0x94, 0x22, 0xbe, 0xc8, 0xd4, 0xf2, 0x3f,
	0x8b, 0xbd, 0x2a, 0x37, 0x37, 0x5f, 0xc5, 0x3f, 0xd5, 0xaa, 0x96, 0xf5, 0xf3, 0x07, 0x0b, 0x96,
	0xaa, 0xa2, 0x5a, 0x4c, 0x37, 0x3e, 0x5f, 0x5a, 0x0c, 0xd7, 0x0a, 0x8a, 0xd1, 0x8f, 0xa1, 0x26,
	0x8a, 0xd0, 0xa8, 0x54, 0x2a, 0xe7, 0x4b, 0xa5, 0x4a, 0x61, 0x65, 0xf8, 0xd7, 0x32, 0x6c, 0x75,
	0x69, 0x78, 0xe5, 0x0c, 0x87, 0xef, 0x63, 0xcf, 0x7c, 0x42, 0xb5, 0xc0, 0x2e, 0xb5, 0x8c, 0x5d,
	0xf0, 0x2f, 0x61, 0x3b, 0x96, 0x21, 0xc9, 0xb6, 0x97, 0x1f, 0xe4, 0xfc, 0xdf, 0x08, 0x1a, 0xdf,
	0x32, 0x9b, 0x92, 0xfe, 0x25, 0xfa, 0x1a, 0xd6, 0xb5, 0x4e, 0x2d, 0x3a, 0x88, 0x15, 0x9e, 0xef,
	0xf8, 0x1a, 0x87, 0xc5, 0x83, 0xea, 0x09, 0x2c, 0x71, 0xac, 0x6e, 0x21, 0x56, 0x77, 0x11, 0x56,
	0xb7, 0x10, 0xeb, 0x02, 0x9a, 0x51, 0xf3, 0x14, 0x75, 0xe2, 0xb9, 0x99, 0xc6, 0xad, 0x71, 0xbf,
	0x60, 0x24, 0x86, 0x18, 0xc0, 0x56, 0xba, 0x21, 0x8a, 0x8e, 0x93, 0x47, 0xa7, 0xa8, 0xe1, 0x6a,
	0x3c, 0x98, 0x3b, 0x1e, 0x83, 0x5e, 0x43, 0x33, 0x6a, 0x8a, 0x6a, 0x72, 0x65, 0xda, 0xa9, 0x1a,
	0x50, 0x71, 0x07, 0x15, 0x97, 0x3e, 0x2b, 0xa3, 0x17, 0xd0, 0x8a, 0x5b, 0x85, 0xe8, 0x7e, 0x51,
	0xfb, 0x50, 0x82, 0x9d, 0x2c, 0xeb, 0x2c, 0x0a, 0xb4, 0x37, 0xb0, 0x9d, 0x69, 0x1c, 0xa1, 0x07,
	0xf3, 0x5b, 0x4a, 0x59, 0xe4, 0x39, 0x3d, 0x27, 0x25, 0xe7, 0xba, 0xd6, 0x7b, 0xd0, 0xcc, 0x9a,
	0xef, 0x75, 0x68, 0x66, 0x2d, 0x68, 0x57, 0x08, 0xb4, 0x01, 0x6c, 0xa5, 0x1b, 0x0e, 0x9a, 0x55,
	0x0a, 0xbb, 0x2d, 0x9a, 0x32, 0xe7, 0x74, 0x2a, 0x84, 0xa9, 0xd3, 0x4d, 0x05, 0x0d, 0xb4, 0xb0,
	0x89, 0xa1, 0x81, 0xce, 0xe9, 0x46, 0x94, 0xd0, 0x1b, 0xd8, 0x4c, 0xf5, 0x1d, 0xd0, 0x91, 0xee,
	0xb3, 0xb9, 0x3e, 0x85, 0xf1, 0x68, 0xde, 0x70, 0xce, 0x56, 0x34, 0x2a, 0x57, 0xd2, 0x5d, 0x02,
	0xf4, 0x48, 0x0f, 0xb0, 0x79, 0x5d, 0x0a, 0xe3, 0xc3, 0x25, 0xb3, 0xe2, 0x03, 0xdc, 0xc0, 0x6e,
	0x41, 0xdb, 0x00, 0x3d, 0x8c, 0xd7, 0xcf, 0x6f, 0x45, 0x68, 0x87, 0x59, 0xd4, 0x79, 0x28, 0xa1,
	0x6f, 0x60, 0x43, 0xaf, 0xfb, 0xd1, 0x61, 0x81, 0x12, 0xe2, 0xfa, 0xdd, 0x38, 0x9a, 0x33, 0x1a,
	0xc3, 0xf5, 0x85, 0xce, 0x93, 0xc2, 0x3c, 0xad, 0xf3, 0x5c, 0x43, 0xc0, 0x38, 0x9e, 0x37, 0xac,
	0xbb, 0x46, 0xba, 0xa8, 0xd6, 0x5c, 0xa3, 0xb0, 0x64, 0xd7, 0x5c, 0xa3, 0xb8, 0x1a, 0xc7, 0x25,
	0x74, 0x05, 0xad, 0xb8, 0xd2, 0xd5, 0x42, 0x37, 0x5b, 0x63, 0x1b, 0x46, 0xd1, 0x50, 0x8c, 0xf2,
	0x3d, 0x2f, 0x8d, 0xc5, 0x44, 0xcd, 0x8a, 0x5a, 0x7c, 0xe5, 0xeb, 0x66, 0x03, 0x17, 0x0f, 0xe6,
	0x3c, 0xac, 0x0f, 0x9b, 0xa9, 0x22, 0x56, 0xd3, 0x63, 0x51, 0xa1, 0xac, 0xe9, 0xb1, 0xb0, 0xf6,
	0x95, 0x86, 0xd6, 0x4b, 0x53, 0xcd, 0xd0, 0x05, 0x05, 0xae, 0x66, 0xe8, 0xa2, 0x7a, 0x16, 0x97,
	0xd0, 0x0f, 0xf1, 0x3f, 0x45, 0xad, 0x9c, 0x42, 0x38, 0xfb, 0xc2, 0xe4, 0x4b, 0x40, 0xe3, 0xe1,
	0xc2, 0x39, 0x19, 0xc7, 0x8c, 0x6b, 0xd1, 0xb4, 0x63, 0x66, 0xab, 0x62, 0xe3, 0x68, 0xce, 0xa8,
	0xee, 0x46, 0xe9, 0xd2, 0x06, 0x1d, 0x67, 0x97, 0xa4, 0x2b, 0x3f, 0xe3, 0xc1, 0xdc, 0xf1, 0x02,
	0x19, 0x45, 0x5a, 0x9e, 0x97, 0x51, 0xaf, 0x80, 0xf2, 0x32, 0xa6, 0x72, 0x79, 0x19, 0x3c, 0xa9,
	0x44, 0x5a, 0x33, 0x7a, 0x51, 0x02, 0x6f, 0x1c, 0xcf, 0x1b, 0xd6, 0x5f, 0x74, 0x2d, 0x67, 0xd6,
	0xb3, 0x83, 0x5c, 0xe6, 0xad, 0x67, 0x07, 0xf9, 0x34, 0x1b, 0x97, 0x50, 0x17, 0x20, 0xc9, 0x9a,
	0x51, 0x12, 0x19, 0xb9, 0xfc, 0xda, 0x38, 0x28, 0x1c, 0x8b, 0x81, 0x9e, 0x43, 0x2b, 0xce, 0x06,
	0xb5, 0xe0, 0xcb, 0x66, 0xd8, 0x5a, 0xf0, 0xe5, 0x92, 0x47, 0x11, 0x23, 0xbf, 0x86, 0x86, 0xca,
	0x9f, 0xd0, 0x3d, 0x7d, 0xaa, 0x96, 0xd5, 0x19, 0x9d, 0xfc, 0x40, 0x82, 0xf0, 0xac, 0xf6, 0xbb,
	0x8a, 0x77, 0x73, 0xb3, 0x26, 0x7e, 0x97, 0x3f, 0xf9, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d,
	0xd1, 0x79, 0x5c, 0x3f, 0x1f, 0x00, 0x00,
}
